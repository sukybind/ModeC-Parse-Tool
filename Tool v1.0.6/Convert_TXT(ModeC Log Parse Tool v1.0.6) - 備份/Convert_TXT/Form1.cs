using Excel = Aspose.Cells;
using System.Globalization;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics.Eventing.Reader;
using Aspose.Cells.Drawing.Texts;
using System.Configuration;

namespace Convert_TXT
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            x = this.Width;
            y = this.Height;
            setTag(this);
        }

        private float x;//定義當前窗體的寬度
        private float y;//定義當前窗體的高度


        private void setTag(Control cons)
        {
            foreach (Control con in cons.Controls)
            {
                con.Tag = con.Width + ";" + con.Height + ";" + con.Left + ";" + con.Top + ";" + con.Font.Size;
                if (con.Controls.Count > 0)
                {
                    setTag(con);
                }
            }
        }

        private void setControls(float newx, float newy, Control cons)
        {
            //遍歷窗體中的控件，重新設置控件的值
            foreach (Control con in cons.Controls)
            {
                //獲取控件的Tag屬性值，並分割後存儲字符串數組
                if (con.Tag != null)
                {
                    string[] mytag = con.Tag.ToString().Split(new char[] { ';' });
                    //根據窗體縮放的比例確定控件的值
                    con.Width = Convert.ToInt32(Convert.ToSingle(mytag[0]) * newx);//寬度
                    con.Height = Convert.ToInt32(Convert.ToSingle(mytag[1]) * newy);//高度
                    con.Left = Convert.ToInt32(Convert.ToSingle(mytag[2]) * newx);//左邊距
                    con.Top = Convert.ToInt32(Convert.ToSingle(mytag[3]) * newy);//頂邊距
                    Single currentSize = Convert.ToSingle(mytag[4]) * newy;//字體大小
                    con.Font = new Font(con.Font.Name, currentSize, con.Font.Style, con.Font.Unit);
                    if (con.Controls.Count > 0)
                    {
                        setControls(newx, newy, con);
                    }
                }
            }
        }

        private void Form1_Resize(object sender, EventArgs e)
        {
            float newx = (this.Width) / x;
            float newy = (this.Height) / y;
            setControls(newx, newy, this);
        }

        private int progress_percent = 0;

        private int[] s0_mode_font_color = new int[1000];   //DeepSkyBlue : 0, Blue : 1, Orange : 2, LightSeaGreen : 3
        private int[] s1_mode_font_color = new int[1000];   //DeepSkyBlue : 0, Blue : 1, Orange : 2, LightSeaGreen : 3
        private int[] s2_mode_font_color = new int[1000];   //DeepSkyBlue : 0, Blue : 1, Orange : 2, LightSeaGreen : 3
        private int[] s3_mode_font_color = new int[1000];   //DeepSkyBlue : 0, Blue : 1, Orange : 2, LightSeaGreen : 3

        private int convert_count0 = 1;
        private int convert_count1 = 1;
        private int convert_count2 = 1;
        private int convert_count3 = 1;

        private int s0fileexistflag = 0;
        private int s1fileexistflag = 0;
        private int s2fileexistflag = 0;
        private int s3fileexistflag = 0;

        private int s0_merge_count = 9;
        private int s1_merge_count = 9;
        private int s2_merge_count = 9;
        private int s3_merge_count = 9;

        private int gnss_flag;

        private int enable_count = 0;

        private String Enable, Enable_all, WorkMode, FirstFixStage, TraceFixStage, PrecisionChk, Stage, ITEM;
        private int chk_enable_count;

        DateTime[] time0_store = new DateTime[1000];
        DateTime[] time1_store = new DateTime[1000];
        DateTime[] time2_store = new DateTime[1000];
        DateTime[] time3_store = new DateTime[1000];

        /**
         * Write to "GNSS MDA" excel
         */
        private int s0_gnss_cell_flag = 0;
        private int s0_gnss_item = 0;
        private int s0_gps_prn_count = 1;
        private int s0_gps_snr_count = 2;
        private int s0_glo_prn_count = 3;
        private int s0_glo_snr_count = 4;
        private int s0_gal_prn_count = 5;
        private int s0_gal_snr_count = 6;
        private int s0_bei_prn_count = 7;
        private int s0_bei_snr_count = 8;
        private int s0_qzs_prn_count = 9;
        private int s0_qzs_snr_count = 10;

        private int s1_gnss_cell_flag = 0;
        private int s1_gnss_item = 0;
        private int s1_gps_prn_count = 1;
        private int s1_gps_snr_count = 2;
        private int s1_glo_prn_count = 3;
        private int s1_glo_snr_count = 4;
        private int s1_gal_prn_count = 5;
        private int s1_gal_snr_count = 6;
        private int s1_bei_prn_count = 7;
        private int s1_bei_snr_count = 8;
        private int s1_qzs_prn_count = 9;
        private int s1_qzs_snr_count = 10;

        private int s2_gnss_cell_flag = 0;
        private int s2_gnss_item = 0;
        private int s2_gps_prn_count = 1;
        private int s2_gps_snr_count = 2;
        private int s2_glo_prn_count = 3;
        private int s2_glo_snr_count = 4;
        private int s2_gal_prn_count = 5;
        private int s2_gal_snr_count = 6;
        private int s2_bei_prn_count = 7;
        private int s2_bei_snr_count = 8;
        private int s2_qzs_prn_count = 9;
        private int s2_qzs_snr_count = 10;

        private int s3_gnss_cell_flag = 0;
        private int s3_gnss_item = 0;
        private int s3_gps_prn_count = 1;
        private int s3_gps_snr_count = 2;
        private int s3_glo_prn_count = 3;
        private int s3_glo_snr_count = 4;
        private int s3_gal_prn_count = 5;
        private int s3_gal_snr_count = 6;
        private int s3_bei_prn_count = 7;
        private int s3_bei_snr_count = 8;
        private int s3_qzs_prn_count = 9;
        private int s3_qzs_snr_count = 10;

        private string[] S0_ITEM = new string[1000];
        private string[] S1_ITEM = new string[1000];
        private string[] S2_ITEM = new string[1000];
        private string[] S3_ITEM = new string[1000];

        private string[] S0_GPS_PRN = new string[1000];
        private string[] S0_GPS_SNR = new string[1000];
        private string[] S0_GLO_PRN = new string[1000];
        private string[] S0_GLO_SNR = new string[1000];
        private string[] S0_GAL_PRN = new string[1000];
        private string[] S0_GAL_SNR = new string[1000];
        private string[] S0_BEI_PRN = new string[1000];
        private string[] S0_BEI_SNR = new string[1000];
        private string[] S0_QZS_PRN = new string[1000];
        private string[] S0_QZS_SNR = new string[1000];

        private string[] S1_GPS_PRN = new string[1000];
        private string[] S1_GPS_SNR = new string[1000];
        private string[] S1_GLO_PRN = new string[1000];
        private string[] S1_GLO_SNR = new string[1000];
        private string[] S1_GAL_PRN = new string[1000];
        private string[] S1_GAL_SNR = new string[1000];
        private string[] S1_BEI_PRN = new string[1000];
        private string[] S1_BEI_SNR = new string[1000];
        private string[] S1_QZS_PRN = new string[1000];
        private string[] S1_QZS_SNR = new string[1000];

        private string[] S2_GPS_PRN = new string[1000];
        private string[] S2_GPS_SNR = new string[1000];
        private string[] S2_GLO_PRN = new string[1000];
        private string[] S2_GLO_SNR = new string[1000];
        private string[] S2_GAL_PRN = new string[1000];
        private string[] S2_GAL_SNR = new string[1000];
        private string[] S2_BEI_PRN = new string[1000];
        private string[] S2_BEI_SNR = new string[1000];
        private string[] S2_QZS_PRN = new string[1000];
        private string[] S2_QZS_SNR = new string[1000];

        private string[] S3_GPS_PRN = new string[1000];
        private string[] S3_GPS_SNR = new string[1000];
        private string[] S3_GLO_PRN = new string[1000];
        private string[] S3_GLO_SNR = new string[1000];
        private string[] S3_GAL_PRN = new string[1000];
        private string[] S3_GAL_SNR = new string[1000];
        private string[] S3_BEI_PRN = new string[1000];
        private string[] S3_BEI_SNR = new string[1000];
        private string[] S3_QZS_PRN = new string[1000];
        private string[] S3_QZS_SNR = new string[1000];
        //String GPS_PRN, GPS_SNR, GLO_PRN, GLO_SNR, GAL_PRN, GAL_SNR, BEI_PRN, BEI_SNR, QZS_PRN, QZS_SNR;

        public int s0_t0;
        public int s0_t1;
        public int s0_t2;
        public int s0_t3;
        public int s0_t4;
        public int s0_t5;
        public int s0_t6;
        public int s0_t7;
        public int s0_t8;

        public int s1_t0;
        public int s1_t1;
        public int s1_t2;
        public int s1_t3;
        public int s1_t4;
        public int s1_t5;
        public int s1_t6;
        public int s1_t7;
        public int s1_t8;

        public int s2_t0;
        public int s2_t1;
        public int s2_t2;
        public int s2_t3;
        public int s2_t4;
        public int s2_t5;
        public int s2_t6;
        public int s2_t7;
        public int s2_t8;

        public int s3_t0;
        public int s3_t1;
        public int s3_t2;
        public int s3_t3;
        public int s3_t4;
        public int s3_t5;
        public int s3_t6;
        public int s3_t7;
        public int s3_t8;

        private string[] S0_GNSS_EPO = new string[4];              //S0_EPO Enable check
        private string[] S1_GNSS_EPO = new string[4];              //S1_EPO Enable check
        private string[] S2_GNSS_EPO = new string[4];              //S2_EPO Enable check
        private string[] S3_GNSS_EPO = new string[4];              //S3_EPO Enable check

        private string S0_Area1_2_4_startitem = "StartItem = [2]";
        private string S0_Area3_startitem = "StartItem = [N/A]";
        private string S0_Area1_stopitem = "StopItem = [N/A]";     //定位的前一個點
        private string S0_Area2_stopitem = "StopItem = [N/A]";     //定位的點
        private string S0_Area3_stopitem = "StopItem = [N/A]";
        private string S0_Area4_stopitem = "StopItem = [N/A]";
        private string S0_Area1_totalitem = "TotalItem = [N/A]";
        private string S0_Area2_totalitem = "TotalItem = [N/A]";
        private string S0_Area3_totalitem = "TotalItem = [N/A]";
        private string S0_Area4_totalitem = "TotalItem = [N/A]";

        private string S1_Area1_2_4_startitem = "StartItem = [2]";
        private string S1_Area3_startitem = "StartItem = [N/A]";
        private string S1_Area1_stopitem = "StopItem = [N/A]";     //定位的前一個點
        private string S1_Area2_stopitem = "StopItem = [N/A]";     //定位的點
        private string S1_Area3_stopitem = "StopItem = [N/A]";
        private string S1_Area4_stopitem = "StopItem = [N/A]";
        private string S1_Area1_totalitem = "TotalItem = [N/A]";
        private string S1_Area2_totalitem = "TotalItem = [N/A]";
        private string S1_Area3_totalitem = "TotalItem = [N/A]";
        private string S1_Area4_totalitem = "TotalItem = [N/A]";

        private string S2_Area1_2_4_startitem = "StartItem = [2]";
        private string S2_Area3_startitem = "StartItem = [N/A]";
        private string S2_Area1_stopitem = "StopItem = [N/A]";     //定位的前一個點
        private string S2_Area2_stopitem = "StopItem = [N/A]";     //定位的點
        private string S2_Area3_stopitem = "StopItem = [N/A]";
        private string S2_Area4_stopitem = "StopItem = [N/A]";
        private string S2_Area1_totalitem = "TotalItem = [N/A]";
        private string S2_Area2_totalitem = "TotalItem = [N/A]";
        private string S2_Area3_totalitem = "TotalItem = [N/A]";
        private string S2_Area4_totalitem = "TotalItem = [N/A]";

        private string S3_Area1_2_4_startitem = "StartItem = [2]";
        private string S3_Area3_startitem = "StartItem = [N/A]";
        private string S3_Area1_stopitem = "StopItem = [N/A]";     //定位的前一個點
        private string S3_Area2_stopitem = "StopItem = [N/A]";     //定位的點
        private string S3_Area3_stopitem = "StopItem = [N/A]";
        private string S3_Area4_stopitem = "StopItem = [N/A]";
        private string S3_Area1_totalitem = "TotalItem = [N/A]";
        private string S3_Area2_totalitem = "TotalItem = [N/A]";
        private string S3_Area3_totalitem = "TotalItem = [N/A]";
        private string S3_Area4_totalitem = "TotalItem = [N/A]";

        private bool fix_equal;
        private int s0_first_fix_flag = 0;
        private int s0_analyze_utc_time_flag = 0;

        private int s1_first_fix_flag = 0;
        private int s1_analyze_utc_time_flag = 0;

        private int s2_first_fix_flag = 0;
        private int s2_analyze_utc_time_flag = 0;

        private int s3_first_fix_flag = 0;
        private int s3_analyze_utc_time_flag = 0;

        private string[] S0_GPS_SAT = new string[1000];
        private string[] S0_GPS_CN = new string[1000];
        private string[] S0_GLO_SAT = new string[1000];
        private string[] S0_GLO_CN = new string[1000];
        private string[] S0_GAL_SAT = new string[1000];
        private string[] S0_GAL_CN = new string[1000];
        private string[] S0_BEI_SAT = new string[1000];
        private string[] S0_BEI_CN = new string[1000];
        private string[] S0_QZS_SAT = new string[1000];

        private string[] S1_GPS_SAT = new string[1000];
        private string[] S1_GPS_CN = new string[1000];
        private string[] S1_GLO_SAT = new string[1000];
        private string[] S1_GLO_CN = new string[1000];
        private string[] S1_GAL_SAT = new string[1000];
        private string[] S1_GAL_CN = new string[1000];
        private string[] S1_BEI_SAT = new string[1000];
        private string[] S1_BEI_CN = new string[1000];

        private string[] S2_GPS_SAT = new string[1000];
        private string[] S2_GPS_CN = new string[1000];
        private string[] S2_GLO_SAT = new string[1000];
        private string[] S2_GLO_CN = new string[1000];
        private string[] S2_GAL_SAT = new string[1000];
        private string[] S2_GAL_CN = new string[1000];
        private string[] S2_BEI_SAT = new string[1000];
        private string[] S2_BEI_CN = new string[1000];

        private string[] S3_GPS_SAT = new string[1000];
        private string[] S3_GPS_CN = new string[1000];
        private string[] S3_GLO_SAT = new string[1000];
        private string[] S3_GLO_CN = new string[1000];
        private string[] S3_GAL_SAT = new string[1000];
        private string[] S3_GAL_CN = new string[1000];
        private string[] S3_BEI_SAT = new string[1000];
        private string[] S3_BEI_CN = new string[1000];

        private float S0_A1_GPS_SAT_Accumulate = 0;
        private float S0_A1_GPS_CN_Accumulate = 0;
        private float S0_A1_GLO_SAT_Accumulate = 0;
        private float S0_A1_GLO_CN_Accumulate = 0;
        private float S0_A1_GAL_SAT_Accumulate = 0;
        private float S0_A1_GAL_CN_Accumulate = 0;
        private float S0_A1_BEI_SAT_Accumulate = 0;
        private float S0_A1_BEI_CN_Accumulate = 0;

        private float S0_A2_GPS_SAT_Accumulate = 0;
        private float S0_A2_GPS_CN_Accumulate = 0;
        private float S0_A2_GLO_SAT_Accumulate = 0;
        private float S0_A2_GLO_CN_Accumulate = 0;
        private float S0_A2_GAL_SAT_Accumulate = 0;
        private float S0_A2_GAL_CN_Accumulate = 0;
        private float S0_A2_BEI_SAT_Accumulate = 0;
        private float S0_A2_BEI_CN_Accumulate = 0;

        private float S0_A3_GPS_SAT_Accumulate = 0;
        private float S0_A3_GPS_CN_Accumulate = 0;
        private float S0_A3_GLO_SAT_Accumulate = 0;
        private float S0_A3_GLO_CN_Accumulate = 0;
        private float S0_A3_GAL_SAT_Accumulate = 0;
        private float S0_A3_GAL_CN_Accumulate = 0;
        private float S0_A3_BEI_SAT_Accumulate = 0;
        private float S0_A3_BEI_CN_Accumulate = 0;

        private float S0_A4_GPS_SAT_Accumulate = 0;
        private float S0_A4_GPS_CN_Accumulate = 0;
        private float S0_A4_GLO_SAT_Accumulate = 0;
        private float S0_A4_GLO_CN_Accumulate = 0;
        private float S0_A4_GAL_SAT_Accumulate = 0;
        private float S0_A4_GAL_CN_Accumulate = 0;
        private float S0_A4_BEI_SAT_Accumulate = 0;
        private float S0_A4_BEI_CN_Accumulate = 0;

        private float S1_A1_GPS_SAT_Accumulate = 0;
        private float S1_A1_GPS_CN_Accumulate = 0;
        private float S1_A1_GLO_SAT_Accumulate = 0;
        private float S1_A1_GLO_CN_Accumulate = 0;
        private float S1_A1_GAL_SAT_Accumulate = 0;
        private float S1_A1_GAL_CN_Accumulate = 0;
        private float S1_A1_BEI_SAT_Accumulate = 0;
        private float S1_A1_BEI_CN_Accumulate = 0;

        private float S1_A2_GPS_SAT_Accumulate = 0;
        private float S1_A2_GPS_CN_Accumulate = 0;
        private float S1_A2_GLO_SAT_Accumulate = 0;
        private float S1_A2_GLO_CN_Accumulate = 0;
        private float S1_A2_GAL_SAT_Accumulate = 0;
        private float S1_A2_GAL_CN_Accumulate = 0;
        private float S1_A2_BEI_SAT_Accumulate = 0;
        private float S1_A2_BEI_CN_Accumulate = 0;

        private float S1_A3_GPS_SAT_Accumulate = 0;
        private float S1_A3_GPS_CN_Accumulate = 0;
        private float S1_A3_GLO_SAT_Accumulate = 0;
        private float S1_A3_GLO_CN_Accumulate = 0;
        private float S1_A3_GAL_SAT_Accumulate = 0;
        private float S1_A3_GAL_CN_Accumulate = 0;
        private float S1_A3_BEI_SAT_Accumulate = 0;
        private float S1_A3_BEI_CN_Accumulate = 0;

        private float S1_A4_GPS_SAT_Accumulate = 0;
        private float S1_A4_GPS_CN_Accumulate = 0;
        private float S1_A4_GLO_SAT_Accumulate = 0;
        private float S1_A4_GLO_CN_Accumulate = 0;
        private float S1_A4_GAL_SAT_Accumulate = 0;
        private float S1_A4_GAL_CN_Accumulate = 0;
        private float S1_A4_BEI_SAT_Accumulate = 0;
        private float S1_A4_BEI_CN_Accumulate = 0;

        private float S2_A1_GPS_SAT_Accumulate = 0;
        private float S2_A1_GPS_CN_Accumulate = 0;
        private float S2_A1_GLO_SAT_Accumulate = 0;
        private float S2_A1_GLO_CN_Accumulate = 0;
        private float S2_A1_GAL_SAT_Accumulate = 0;
        private float S2_A1_GAL_CN_Accumulate = 0;
        private float S2_A1_BEI_SAT_Accumulate = 0;
        private float S2_A1_BEI_CN_Accumulate = 0;

        private float S2_A2_GPS_SAT_Accumulate = 0;
        private float S2_A2_GPS_CN_Accumulate = 0;
        private float S2_A2_GLO_SAT_Accumulate = 0;
        private float S2_A2_GLO_CN_Accumulate = 0;
        private float S2_A2_GAL_SAT_Accumulate = 0;
        private float S2_A2_GAL_CN_Accumulate = 0;
        private float S2_A2_BEI_SAT_Accumulate = 0;
        private float S2_A2_BEI_CN_Accumulate = 0;

        private float S2_A3_GPS_SAT_Accumulate = 0;
        private float S2_A3_GPS_CN_Accumulate = 0;
        private float S2_A3_GLO_SAT_Accumulate = 0;
        private float S2_A3_GLO_CN_Accumulate = 0;
        private float S2_A3_GAL_SAT_Accumulate = 0;
        private float S2_A3_GAL_CN_Accumulate = 0;
        private float S2_A3_BEI_SAT_Accumulate = 0;
        private float S2_A3_BEI_CN_Accumulate = 0;

        private float S2_A4_GPS_SAT_Accumulate = 0;
        private float S2_A4_GPS_CN_Accumulate = 0;
        private float S2_A4_GLO_SAT_Accumulate = 0;
        private float S2_A4_GLO_CN_Accumulate = 0;
        private float S2_A4_GAL_SAT_Accumulate = 0;
        private float S2_A4_GAL_CN_Accumulate = 0;
        private float S2_A4_BEI_SAT_Accumulate = 0;
        private float S2_A4_BEI_CN_Accumulate = 0;

        private float S3_A1_GPS_SAT_Accumulate = 0;
        private float S3_A1_GPS_CN_Accumulate = 0;
        private float S3_A1_GLO_SAT_Accumulate = 0;
        private float S3_A1_GLO_CN_Accumulate = 0;
        private float S3_A1_GAL_SAT_Accumulate = 0;
        private float S3_A1_GAL_CN_Accumulate = 0;
        private float S3_A1_BEI_SAT_Accumulate = 0;
        private float S3_A1_BEI_CN_Accumulate = 0;

        private float S3_A2_GPS_SAT_Accumulate = 0;
        private float S3_A2_GPS_CN_Accumulate = 0;
        private float S3_A2_GLO_SAT_Accumulate = 0;
        private float S3_A2_GLO_CN_Accumulate = 0;
        private float S3_A2_GAL_SAT_Accumulate = 0;
        private float S3_A2_GAL_CN_Accumulate = 0;
        private float S3_A2_BEI_SAT_Accumulate = 0;
        private float S3_A2_BEI_CN_Accumulate = 0;

        private float S3_A3_GPS_SAT_Accumulate = 0;
        private float S3_A3_GPS_CN_Accumulate = 0;
        private float S3_A3_GLO_SAT_Accumulate = 0;
        private float S3_A3_GLO_CN_Accumulate = 0;
        private float S3_A3_GAL_SAT_Accumulate = 0;
        private float S3_A3_GAL_CN_Accumulate = 0;
        private float S3_A3_BEI_SAT_Accumulate = 0;
        private float S3_A3_BEI_CN_Accumulate = 0;

        private float S3_A4_GPS_SAT_Accumulate = 0;
        private float S3_A4_GPS_CN_Accumulate = 0;
        private float S3_A4_GLO_SAT_Accumulate = 0;
        private float S3_A4_GLO_CN_Accumulate = 0;
        private float S3_A4_GAL_SAT_Accumulate = 0;
        private float S3_A4_GAL_CN_Accumulate = 0;
        private float S3_A4_BEI_SAT_Accumulate = 0;
        private float S3_A4_BEI_CN_Accumulate = 0;

        private int T1_T2_item_count = 0;
        private int T3_T4_item_count = 0;
        private int T5_T6_item_count = 0;
        private int T7_T8_item_count = 0;

        private int S0_T1_T2_item_fix_time = 0;
        private int S0_T3_T4_item_fix_time = 0;
        private int S0_T5_T6_item_fix_time = 0;
        private int S0_T7_T8_item_fix_time = 0;

        private int S1_T1_T2_item_fix_time = 0;
        private int S1_T3_T4_item_fix_time = 0;
        private int S1_T5_T6_item_fix_time = 0;
        private int S1_T7_T8_item_fix_time = 0;

        private int S2_T1_T2_item_fix_time = 0;
        private int S2_T3_T4_item_fix_time = 0;
        private int S2_T5_T6_item_fix_time = 0;
        private int S2_T7_T8_item_fix_time = 0;

        private int S3_T1_T2_item_fix_time = 0;
        private int S3_T3_T4_item_fix_time = 0;
        private int S3_T5_T6_item_fix_time = 0;
        private int S3_T7_T8_item_fix_time = 0;

        private int S0_T1_T2_item_analyze_utc_time = 0;
        private int S0_T3_T4_item_analyze_utc_time = 0;
        private int S0_T5_T6_item_analyze_utc_time = 0;

        private int S1_T1_T2_item_analyze_utc_time = 0;
        private int S1_T3_T4_item_analyze_utc_time = 0;
        private int S1_T5_T6_item_analyze_utc_time = 0;

        private int S2_T1_T2_item_analyze_utc_time = 0;
        private int S2_T3_T4_item_analyze_utc_time = 0;
        private int S2_T5_T6_item_analyze_utc_time = 0;

        private int S3_T1_T2_item_analyze_utc_time = 0;
        private int S3_T3_T4_item_analyze_utc_time = 0;
        private int S3_T5_T6_item_analyze_utc_time = 0;

        private int S0_T3_remainder_T0 = 0;
        private int S0_T3_T4_cycle = 0;
        private int S0_T3_T4_remainder = 0;

        private int S1_T3_remainder_T0 = 0;
        private int S1_T3_T4_cycle = 0;
        private int S1_T3_T4_remainder = 0;

        private int S2_T3_remainder_T0 = 0;
        private int S2_T3_T4_cycle = 0;
        private int S2_T3_T4_remainder = 0;

        private int S3_T3_remainder_T0 = 0;
        private int S3_T3_T4_cycle = 0;
        private int S3_T3_T4_remainder = 0;

        private int S0_T5_remainder_T0 = 0;
        private int S0_T5_T6_cycle = 0;
        private int S0_T5_T6_remainder = 0;

        private int S1_T5_remainder_T0 = 0;
        private int S1_T5_T6_cycle = 0;
        private int S1_T5_T6_remainder = 0;

        private int S2_T5_remainder_T0 = 0;
        private int S2_T5_T6_cycle = 0;
        private int S2_T5_T6_remainder = 0;

        private int S3_T5_remainder_T0 = 0;
        private int S3_T5_T6_cycle = 0;
        private int S3_T5_T6_remainder = 0;

        private int S0_T7_remainder_T0 = 0;
        private int S0_T7_T8_cycle = 0;
        private int S0_T7_T8_remainder = 0;

        private int S1_T7_remainder_T0 = 0;
        private int S1_T7_T8_cycle = 0;
        private int S1_T7_T8_remainder = 0;

        private int S2_T7_remainder_T0 = 0;
        private int S2_T7_T8_cycle = 0;
        private int S2_T7_T8_remainder = 0;

        private int S3_T7_remainder_T0 = 0;
        private int S3_T7_T8_cycle = 0;
        private int S3_T7_T8_remainder = 0;

        private float S0_A1_GPS_SAT_AVG;
        private float S0_A1_GPS_CN_AVG;
        private float S0_A1_GLO_SAT_AVG;
        private float S0_A1_GLO_CN_AVG;
        private float S0_A1_GAL_SAT_AVG;
        private float S0_A1_GAL_CN_AVG;
        private float S0_A1_BEI_SAT_AVG;
        private float S0_A1_BEI_CN_AVG;

        private float S1_A1_GPS_SAT_AVG;
        private float S1_A1_GPS_CN_AVG;
        private float S1_A1_GLO_SAT_AVG;
        private float S1_A1_GLO_CN_AVG;
        private float S1_A1_GAL_SAT_AVG;
        private float S1_A1_GAL_CN_AVG;
        private float S1_A1_BEI_SAT_AVG;
        private float S1_A1_BEI_CN_AVG;

        private float S2_A1_GPS_SAT_AVG;
        private float S2_A1_GPS_CN_AVG;
        private float S2_A1_GLO_SAT_AVG;
        private float S2_A1_GLO_CN_AVG;
        private float S2_A1_GAL_SAT_AVG;
        private float S2_A1_GAL_CN_AVG;
        private float S2_A1_BEI_SAT_AVG;
        private float S2_A1_BEI_CN_AVG;

        private float S3_A1_GPS_SAT_AVG;
        private float S3_A1_GPS_CN_AVG;
        private float S3_A1_GLO_SAT_AVG;
        private float S3_A1_GLO_CN_AVG;
        private float S3_A1_GAL_SAT_AVG;
        private float S3_A1_GAL_CN_AVG;
        private float S3_A1_BEI_SAT_AVG;
        private float S3_A1_BEI_CN_AVG;

        private float S0_A2_GPS_SAT_AVG;
        private float S0_A2_GPS_CN_AVG;
        private float S0_A2_GLO_SAT_AVG;
        private float S0_A2_GLO_CN_AVG;
        private float S0_A2_GAL_SAT_AVG;
        private float S0_A2_GAL_CN_AVG;
        private float S0_A2_BEI_SAT_AVG;
        private float S0_A2_BEI_CN_AVG;

        private float S1_A2_GPS_SAT_AVG;
        private float S1_A2_GPS_CN_AVG;
        private float S1_A2_GLO_SAT_AVG;
        private float S1_A2_GLO_CN_AVG;
        private float S1_A2_GAL_SAT_AVG;
        private float S1_A2_GAL_CN_AVG;
        private float S1_A2_BEI_SAT_AVG;
        private float S1_A2_BEI_CN_AVG;

        private float S2_A2_GPS_SAT_AVG;
        private float S2_A2_GPS_CN_AVG;
        private float S2_A2_GLO_SAT_AVG;
        private float S2_A2_GLO_CN_AVG;
        private float S2_A2_GAL_SAT_AVG;
        private float S2_A2_GAL_CN_AVG;
        private float S2_A2_BEI_SAT_AVG;
        private float S2_A2_BEI_CN_AVG;

        private float S3_A2_GPS_SAT_AVG;
        private float S3_A2_GPS_CN_AVG;
        private float S3_A2_GLO_SAT_AVG;
        private float S3_A2_GLO_CN_AVG;
        private float S3_A2_GAL_SAT_AVG;
        private float S3_A2_GAL_CN_AVG;
        private float S3_A2_BEI_SAT_AVG;
        private float S3_A2_BEI_CN_AVG;

        private float S0_A3_GPS_SAT_AVG;
        private float S0_A3_GPS_CN_AVG;
        private float S0_A3_GLO_SAT_AVG;
        private float S0_A3_GLO_CN_AVG;
        private float S0_A3_GAL_SAT_AVG;
        private float S0_A3_GAL_CN_AVG;
        private float S0_A3_BEI_SAT_AVG;
        private float S0_A3_BEI_CN_AVG;

        private float S1_A3_GPS_SAT_AVG;
        private float S1_A3_GPS_CN_AVG;
        private float S1_A3_GLO_SAT_AVG;
        private float S1_A3_GLO_CN_AVG;
        private float S1_A3_GAL_SAT_AVG;
        private float S1_A3_GAL_CN_AVG;
        private float S1_A3_BEI_SAT_AVG;
        private float S1_A3_BEI_CN_AVG;

        private float S2_A3_GPS_SAT_AVG;
        private float S2_A3_GPS_CN_AVG;
        private float S2_A3_GLO_SAT_AVG;
        private float S2_A3_GLO_CN_AVG;
        private float S2_A3_GAL_SAT_AVG;
        private float S2_A3_GAL_CN_AVG;
        private float S2_A3_BEI_SAT_AVG;
        private float S2_A3_BEI_CN_AVG;

        private float S3_A3_GPS_SAT_AVG;
        private float S3_A3_GPS_CN_AVG;
        private float S3_A3_GLO_SAT_AVG;
        private float S3_A3_GLO_CN_AVG;
        private float S3_A3_GAL_SAT_AVG;
        private float S3_A3_GAL_CN_AVG;
        private float S3_A3_BEI_SAT_AVG;
        private float S3_A3_BEI_CN_AVG;

        private float S0_A4_GPS_SAT_AVG;
        private float S0_A4_GPS_CN_AVG;
        private float S0_A4_GLO_SAT_AVG;
        private float S0_A4_GLO_CN_AVG;
        private float S0_A4_GAL_SAT_AVG;
        private float S0_A4_GAL_CN_AVG;
        private float S0_A4_BEI_SAT_AVG;
        private float S0_A4_BEI_CN_AVG;

        private float S1_A4_GPS_SAT_AVG;
        private float S1_A4_GPS_CN_AVG;
        private float S1_A4_GLO_SAT_AVG;
        private float S1_A4_GLO_CN_AVG;
        private float S1_A4_GAL_SAT_AVG;
        private float S1_A4_GAL_CN_AVG;
        private float S1_A4_BEI_SAT_AVG;
        private float S1_A4_BEI_CN_AVG;

        private float S2_A4_GPS_SAT_AVG;
        private float S2_A4_GPS_CN_AVG;
        private float S2_A4_GLO_SAT_AVG;
        private float S2_A4_GLO_CN_AVG;
        private float S2_A4_GAL_SAT_AVG;
        private float S2_A4_GAL_CN_AVG;
        private float S2_A4_BEI_SAT_AVG;
        private float S2_A4_BEI_CN_AVG;

        private float S3_A4_GPS_SAT_AVG;
        private float S3_A4_GPS_CN_AVG;
        private float S3_A4_GLO_SAT_AVG;
        private float S3_A4_GLO_CN_AVG;
        private float S3_A4_GAL_SAT_AVG;
        private float S3_A4_GAL_CN_AVG;
        private float S3_A4_BEI_SAT_AVG;
        private float S3_A4_BEI_CN_AVG;

        private int s0_first_fix_previous_item = 0;
        private int s0_TTFF_time_int = 0;
        private int s0_Analyze_UTC_time_int = 0;

        private string s0_first_fix_item;
        private string s0_analyze_utc_time_item;
        private string s0_TTFF_item = "TTFF Item = [N/A]";
        private string s0_TTFF_time = "TTFF Usage Time = [N/A]";
        private string s0_Analyze_UTC_item = "Analyze UTC Item = [N/A]";
        private string s0_Analyze_UTC_time = "Analyze UTC Usage Time = [N/A]";

        private int s1_first_fix_previous_item = 0;
        private int s1_TTFF_time_int = 0;
        private int s1_Analyze_UTC_time_int = 0;

        private string s1_first_fix_item;
        private string s1_analyze_utc_time_item;
        private string s1_TTFF_item = "TTFF Item = [N/A]";
        private string s1_TTFF_time = "TTFF Usage Time = [N/A]";
        private string s1_Analyze_UTC_item = "Analyze UTC Item = [N/A]";
        private string s1_Analyze_UTC_time = "Analyze UTC Usage Time = [N/A]";

        private int s2_first_fix_previous_item = 0;
        private int s2_TTFF_time_int = 0;
        private int s2_Analyze_UTC_time_int = 0;

        private string s2_first_fix_item;
        private string s2_analyze_utc_time_item;
        private string s2_TTFF_item = "TTFF Item = [N/A]";
        private string s2_TTFF_time = "TTFF Usage Time = [N/A]";
        private string s2_Analyze_UTC_item = "Analyze UTC Item = [N/A]";
        private string s2_Analyze_UTC_time = "Analyze UTC Usage Time = [N/A]";

        private int s3_first_fix_previous_item = 0;
        private int s3_TTFF_time_int = 0;
        private int s3_Analyze_UTC_time_int = 0;

        private string s3_first_fix_item;
        private string s3_analyze_utc_time_item;
        private string s3_TTFF_item = "TTFF Item = [N/A]";
        private string s3_TTFF_time = "TTFF Usage Time = [N/A]";
        private string s3_Analyze_UTC_item = "Analyze UTC Item = [N/A]";
        private string s3_Analyze_UTC_time = "Analyze UTC Usage Time = [N/A]";

        /**
         * Write to "GNSS MDA" excel
         */

        /**
         *  For save Excel array
         */
        private int excel_mode_flag = 0;
        private int excel_mode_frame;
        private int merge_excel_mode_frame = 9;

        private string[] s0_Instruction_code_cmd = new string[1000];
        private string[] s0_Instruction_code_cmd_two = new string[1000];
        private string[] s0_Item = new string[1000];
        private string[] s0_ymd = new string[1000];
        private string[] s0_hms = new string[1000];
        private string[] s0_fix = new string[1000];
        private string[] s0_ramdom_first = new string[1000];
        private string[] s0_ramdom_second = new string[1000];
        private string[] s0_ramdom_third = new string[1000];
        private string[] s0_ramdom_forth = new string[1000];
        private string[] s0_ramdom_fiveth = new string[1000];
        private string[] s0_sat = new string[1000];
        private string[] s0_mode = new string[1000];
        private string[] s0_interval = new string[1000];
        private int[] s0_interval_font_color = new int[1000];
        private string[] s0_interval_judge = new string[1000];
        private int s0_interval_judge_flag = 0; // 0 -> OK, 1 -> False
        private int s0_cycle_judge_color_flag = 0;      //打點組數顏色判斷
        private int[] s0_cycle_mode_judge = new int[1000];            //T3~T4 = 2, Dynamic = 3, Geofencing = 4, 餘數 = 5
        private int[] s0_cycle_T3_T4;
        private int s0_cycle_T3_T4_count = 0;
        private int[] s0_cycle_dynamic = new int[1000];
        private int s0_cycle_dynamic_count = 0;
        private int[] s0_cycle_geofencing = new int[1000];
        private int s0_cycle_geofencing_count = 0;
        private int[] s0_cycle_add = new int[1000];
        private int s0_cycle_remainder;
        private int s0_cycle = 0;
        private string[] s0_excel_setting = new string[1000];
        private string s0_opfilename;

        private string[] s1_Instruction_code_cmd = new string[1000];
        private string[] s1_Instruction_code_cmd_two = new string[1000];
        private string[] s1_Item = new string[1000];
        private string[] s1_ymd = new string[1000];
        private string[] s1_hms = new string[1000];
        private string[] s1_fix = new string[1000];
        private string[] s1_ramdom_first = new string[1000];
        private string[] s1_ramdom_second = new string[1000];
        private string[] s1_ramdom_third = new string[1000];
        private string[] s1_ramdom_forth = new string[1000];
        private string[] s1_ramdom_fiveth = new string[1000];
        private string[] s1_sat = new string[1000];
        private string[] s1_mode = new string[1000];
        private string[] s1_interval = new string[1000];
        private int[] s1_interval_font_color = new int[1000];
        private string[] s1_interval_judge = new string[1000];
        private int s1_interval_judge_flag = 0; // 0 -> OK, 1 -> False
        private int s1_cycle_judge_color_flag = 0;      //打點組數顏色判斷
        private int[] s1_cycle_mode_judge = new int[1000];            //T3~T4 = 2, Dynamic = 3, Geofencing = 4, 餘數 = 5
        private int[] s1_cycle_T3_T4;
        private int s1_cycle_T3_T4_count = 0;
        private int[] s1_cycle_dynamic = new int[1000];
        private int s1_cycle_dynamic_count = 0;
        private int[] s1_cycle_geofencing = new int[1000];
        private int s1_cycle_geofencing_count = 0;
        private int[] s1_cycle_add = new int[1000];
        private int s1_cycle_remainder;
        private int s1_cycle = 0;
        private string[] s1_excel_setting = new string[1000];
        private string s1_opfilename;

        private string[] s2_Instruction_code_cmd = new string[1000];
        private string[] s2_Instruction_code_cmd_two = new string[1000];
        private string[] s2_Item = new string[1000];
        private string[] s2_ymd = new string[1000];
        private string[] s2_hms = new string[1000];
        private string[] s2_fix = new string[1000];
        private string[] s2_ramdom_first = new string[1000];
        private string[] s2_ramdom_second = new string[1000];
        private string[] s2_ramdom_third = new string[1000];
        private string[] s2_ramdom_forth = new string[1000];
        private string[] s2_ramdom_fiveth = new string[1000];
        private string[] s2_sat = new string[1000];
        private string[] s2_mode = new string[1000];
        private string[] s2_interval = new string[1000];
        private int[] s2_interval_font_color = new int[1000];
        private string[] s2_interval_judge = new string[1000];
        private int s2_interval_judge_flag = 0; // 0 -> OK, 1 -> False
        private int s2_cycle_judge_color_flag = 0;      //打點組數顏色判斷
        private int[] s2_cycle_mode_judge = new int[1000];            //T3~T4 = 2, Dynamic = 3, Geofencing = 4, 餘數 = 5
        private int[] s2_cycle_T3_T4;
        private int s2_cycle_T3_T4_count = 0;
        private int[] s2_cycle_dynamic = new int[1000];
        private int s2_cycle_dynamic_count = 0;
        private int[] s2_cycle_geofencing = new int[1000];
        private int s2_cycle_geofencing_count = 0;
        private int[] s2_cycle_add = new int[1000];
        private int s2_cycle_remainder;
        private int s2_cycle = 0;
        private string[] s2_excel_setting = new string[1000];
        private string s2_opfilename;

        private string[] s3_Instruction_code_cmd = new string[1000];
        private string[] s3_Instruction_code_cmd_two = new string[1000];
        private string[] s3_Item = new string[1000];
        private string[] s3_ymd = new string[1000];
        private string[] s3_hms = new string[1000];
        private string[] s3_fix = new string[1000];
        private string[] s3_ramdom_first = new string[1000];
        private string[] s3_ramdom_second = new string[1000];
        private string[] s3_ramdom_third = new string[1000];
        private string[] s3_ramdom_forth = new string[1000];
        private string[] s3_ramdom_fiveth = new string[1000];
        private string[] s3_sat = new string[1000];
        private string[] s3_mode = new string[1000];
        private string[] s3_interval = new string[1000];
        private int[] s3_interval_font_color = new int[1000];
        private string[] s3_interval_judge = new string[1000];
        private int s3_interval_judge_flag = 0; // 0 -> OK, 1 -> False
        private int s3_cycle_judge_color_flag = 0;      //打點組數顏色判斷
        private int[] s3_cycle_mode_judge = new int[1000];            //T3~T4 = 2, Dynamic = 3, Geofencing = 4, 餘數 = 5
        private int[] s3_cycle_T3_T4;
        private int s3_cycle_T3_T4_count = 0;
        private int[] s3_cycle_dynamic = new int[1000];
        private int s3_cycle_dynamic_count = 0;
        private int[] s3_cycle_geofencing = new int[1000];
        private int s3_cycle_geofencing_count = 0;
        private int[] s3_cycle_add = new int[1000];
        private int s3_cycle_remainder;
        private int s3_cycle = 0;
        private string[] s3_excel_setting = new string[1000];
        private string s3_opfilename;
        /**
         *  For save Excel array
         */

        private int s0_free_run_time = 0;
        private int s0_t3_t4_time = 0;
        private int s0_dynamic_time = 0;
        private int s0_geofencing_time = 0;

        private int s1_free_run_time = 0;
        private int s1_t3_t4_time = 0;
        private int s1_dynamic_time = 0;
        private int s1_geofencing_time = 0;

        private int s2_free_run_time = 0;
        private int s2_t3_t4_time = 0;
        private int s2_dynamic_time = 0;
        private int s2_geofencing_time = 0;

        private int s3_free_run_time = 0;
        private int s3_t3_t4_time = 0;
        private int s3_dynamic_time = 0;
        private int s3_geofencing_time = 0;

        private void OpFilebtn_Click(object sender, EventArgs e)
        {
            OpenFileLocation1.ShowDialog();
            OpFileBox1.Text = OpenFileLocation1.FileName;
            s0_opfilename = Path.GetFileName(OpFileBox1.Text);
            int txt_index = s0_opfilename.IndexOf(".txt");
            s0_opfilename = s0_opfilename.Remove(txt_index);
        }

        private void OpFilebtn2_Click(object sender, EventArgs e)
        {
            OpenFileLocation2.ShowDialog();
            OpFileBox2.Text = OpenFileLocation2.FileName;
            s1_opfilename = Path.GetFileName(OpFileBox2.Text);
            int txt_index = s1_opfilename.IndexOf(".txt");
            s1_opfilename = s1_opfilename.Remove(txt_index);
        }

        private void OpFilebtn3_Click(object sender, EventArgs e)
        {
            OpenFileLocation3.ShowDialog();
            OpFileBox3.Text = OpenFileLocation3.FileName;
            s2_opfilename = Path.GetFileName(OpFileBox3.Text);
            int txt_index = s2_opfilename.IndexOf(".txt");
            s2_opfilename = s2_opfilename.Remove(txt_index);
        }

        private void OpFilebtn4_Click(object sender, EventArgs e)
        {
            OpenFileLocation4.ShowDialog();
            OpFileBox4.Text = OpenFileLocation4.FileName;
            s3_opfilename = Path.GetFileName(OpFileBox4.Text);
            int txt_index = s3_opfilename.IndexOf(".txt");
            s3_opfilename = s3_opfilename.Remove(txt_index);
        }

        private void SvFilebtn_Click(object sender, EventArgs e)
        {
            SaveFileLocation.ShowDialog();
            SvFileBox.Text = SaveFileLocation.SelectedPath;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            String open_file0_path = OpFileBox1.Text;
            String open_file1_path = OpFileBox2.Text;
            String open_file2_path = OpFileBox3.Text;
            String open_file3_path = OpFileBox4.Text;

            String T0, T1, T2, T3, T4, T5, T6, T7, T8, COM, SN, FV, MotionDetection;
            int FoundPeriodicCycle, FoundT0, FoundT1, FoundT2, FoundT3, FoundT4, FoundT5, FoundT6, FoundT7, FoundT8, FoundCOM, FoundSN, FoundFV, FoundEnable, FoundWorkMode, FoundStage, FoundFirstFixStage, FoundTraceFixStage, FoundPrecisionChk, FoundDistanceThreshold, FoundDestinationLongitude, FoundDestinationLatitude, FoundDestinationAltitude, FoundMotionDetection, FoundAngle, FoundDataRate, FoundSampleFrequency;
            int first_stage_flag = 0;

            Font New_Font;

            //S0
            if (s0chkb.Checked == true)
            {
                if (File.Exists(open_file0_path))
                {
                    s0fileexistflag = 1;
                }
                else if (open_file0_path == "")
                {
                    s0fileexistflag = 2;
                }
                else
                {
                    s0fileexistflag = 2;
                    MessageBox.Show(textBox9.Text + " : The File doesn't exist!");
                }
            }

            //S1
            if (s1chkb.Checked == true)
            {
                if (File.Exists(open_file1_path))
                {
                    s1fileexistflag = 1;
                }
                else if (open_file1_path == "")
                {
                    s1fileexistflag = 2;
                }
                else
                {
                    s1fileexistflag = 2;
                    MessageBox.Show(textBox10.Text + " : The File doesn't exist!");
                }
            }

            //S2
            if (s2chkb.Checked == true)
            {
                if (File.Exists(open_file2_path))
                {
                    s2fileexistflag = 1;
                }
                else if (open_file2_path == "")
                {
                    s2fileexistflag = 2;
                }
                else
                {
                    s2fileexistflag = 2;
                    MessageBox.Show(textBox11.Text + " : The File doesn't exist!");
                }
            }

            //S3
            if (s3chkb.Checked == true)
            {
                if (File.Exists(open_file3_path))
                {
                    s3fileexistflag = 1;
                }
                else if (open_file0_path == "")
                {
                    s3fileexistflag = 2;
                }
                else
                {
                    s3fileexistflag = 2;
                    MessageBox.Show(textBox12.Text + " : The File doesn't exist!");
                }
            }

            /**
             *  S0
             */
            if (s0chkb.Checked == true & s0fileexistflag == 1)
            {

                richTextBox7.Clear();
                this.tabPage1.Text = textBox9.Text;
                foreach (String line in File.ReadLines(open_file0_path))
                {
                    FoundPeriodicCycle = line.IndexOf("PeriodicCycle:");
                    FoundT0 = line.IndexOf("T0:");
                    FoundT1 = line.IndexOf("T1:");
                    FoundT2 = line.IndexOf("T2:");
                    FoundT3 = line.IndexOf("T3:");
                    FoundT4 = line.IndexOf("T4:");
                    FoundT5 = line.IndexOf("T5:");
                    FoundT6 = line.IndexOf("T6:");
                    FoundT7 = line.IndexOf("T7:");
                    FoundT8 = line.IndexOf("T8:");
                    FoundCOM = line.IndexOf("COMPort:");
                    FoundSN = line.IndexOf("SerialNumber:");
                    FoundFV = line.IndexOf("FirmwareVersion:");
                    FoundEnable = line.IndexOf("Enable:");
                    FoundWorkMode = line.IndexOf("WorkMode:");
                    FoundStage = line.IndexOf("Stage:");
                    FoundFirstFixStage = line.IndexOf("FirstFixStage:");
                    FoundTraceFixStage = line.IndexOf("TraceFixStage:");
                    FoundPrecisionChk = line.IndexOf("PrecisionChk:");
                    FoundDistanceThreshold = line.IndexOf("DistanceThreshold:");
                    FoundDestinationLongitude = line.IndexOf("DestinationLongitude:");
                    FoundDestinationLatitude = line.IndexOf("DestinationLatitude:");
                    FoundDestinationAltitude = line.IndexOf("DestinationAltitude:");
                    FoundMotionDetection = line.IndexOf("[MotionDetection]");
                    FoundAngle = line.IndexOf("Angle");
                    FoundDataRate = line.IndexOf("DataRate");
                    FoundSampleFrequency = line.IndexOf("SampleFrequency");


                    if (FoundWorkMode != -1)
                    {
                        WorkMode = line;
                    }

                    if (FoundFirstFixStage != -1)
                    {
                        FirstFixStage = line;
                    }

                    if (FoundTraceFixStage != -1)
                    {
                        TraceFixStage = line;
                    }

                    if (FoundPrecisionChk != -1)
                    {
                        PrecisionChk = line.Substring(FoundPrecisionChk + 13, 1);

                        if (Int16.Parse(PrecisionChk) == 1)
                        {
                            PrecisionChk = "PrecisionChk: True";
                        }
                        else if (Int16.Parse(PrecisionChk) == 0)
                        {
                            PrecisionChk = "PrecisionChk: False";
                        }
                    }

                    if (FoundEnable != -1)
                    {
                        enable_count++;
                        Enable_all = line;
                        Enable = line.Substring(FoundEnable + 7, 1);
                        chk_enable_count = Int16.Parse(Enable);
                    }

                    if (first_stage_flag == 0 && FoundStage != -1)
                    {
                        first_stage_flag = 1;
                        Stage = line;
                    }

                    if (FoundCOM != -1)
                    {
                        COM = line.Substring(FoundCOM + 8);
                        label26.Text = COM;
                    }

                    if (FoundSN != -1)
                    {
                        SN = line.Substring(FoundSN + 13);
                        label27.Text = SN;
                    }

                    if (FoundFV != -1)
                    {
                        FV = line.Substring(FoundFV + 16);
                        label28.Text = FV;
                    }

                    if (FoundPeriodicCycle != -1)
                    {
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(FirstFixStage + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(TraceFixStage + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT0 != -1)
                    {
                        T0 = line.Substring(FoundT0 + 3);
                        s0_t0 = Int32.Parse(T0);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText("[Periodic]" + Environment.NewLine);
                        if (enable_count == 1)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(Stage + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(WorkMode + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT1 != -1)
                    {
                        T1 = line.Substring(FoundT1 + 3);
                        s0_t1 = Int32.Parse(T1);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT2 != -1)
                    {
                        T2 = line.Substring(FoundT2 + 3);
                        s0_t2 = Int32.Parse(T2);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT3 != -1)
                    {
                        T3 = line.Substring(FoundT3 + 3);
                        s0_t3 = Int32.Parse(T3);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT4 != -1)
                    {
                        T4 = line.Substring(FoundT4 + 3);
                        s0_t4 = Int32.Parse(T4);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT5 != -1)
                    {
                        T5 = line.Substring(FoundT5 + 3);
                        s0_t5 = Int32.Parse(T5);
                        richTextBox7.SelectionColor = Color.Orange;          //Orange
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText("[Dynamic]" + Environment.NewLine);
                        if (enable_count == 2)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox7.SelectionColor = Color.Orange;          //Orange
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox7.SelectionColor = Color.Orange;          //Orange
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox7.SelectionColor = Color.Orange;          //Orange
                        richTextBox7.AppendText(PrecisionChk + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Orange;          //Orange
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT6 != -1)
                    {
                        T6 = line.Substring(FoundT6 + 3);
                        s0_t6 = Int32.Parse(T6);
                        richTextBox7.SelectionColor = Color.Orange;          //Orange
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT7 != -1)
                    {
                        T7 = line.Substring(FoundT7 + 3);
                        s0_t7 = Int32.Parse(T7);
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText("[Geofencing]" + Environment.NewLine);
                        if (enable_count == 3)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT8 != -1)
                    {
                        T8 = line.Substring(FoundT8 + 3);
                        s0_t8 = Int32.Parse(T8);
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDistanceThreshold != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLongitude != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLatitude != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationAltitude != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundMotionDetection != -1)
                    {
                        MotionDetection = line;
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox7.AppendText(MotionDetection + Environment.NewLine);
                    }

                    if (FoundAngle != -1)
                    {
                        if (enable_count == 4)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDataRate != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundSampleFrequency != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                }

                first_stage_flag = 0;
                enable_count = 0;
                chk_enable_count = 0;

            }

            /**
             *  S1
             */
            if (s1chkb.Checked == true & s1fileexistflag == 1)
            {
                richTextBox8.Clear();
                this.tabPage2.Text = textBox10.Text;
                foreach (String line in File.ReadLines(open_file1_path))
                {
                    FoundPeriodicCycle = line.IndexOf("PeriodicCycle:");
                    FoundT0 = line.IndexOf("T0:");
                    FoundT1 = line.IndexOf("T1:");
                    FoundT2 = line.IndexOf("T2:");
                    FoundT3 = line.IndexOf("T3:");
                    FoundT4 = line.IndexOf("T4:");
                    FoundT5 = line.IndexOf("T5:");
                    FoundT6 = line.IndexOf("T6:");
                    FoundT7 = line.IndexOf("T7:");
                    FoundT8 = line.IndexOf("T8:");
                    FoundCOM = line.IndexOf("COMPort:");
                    FoundSN = line.IndexOf("SerialNumber:");
                    FoundFV = line.IndexOf("FirmwareVersion:");
                    FoundEnable = line.IndexOf("Enable:");
                    FoundWorkMode = line.IndexOf("WorkMode:");
                    FoundStage = line.IndexOf("Stage:");
                    FoundFirstFixStage = line.IndexOf("FirstFixStage:");
                    FoundTraceFixStage = line.IndexOf("TraceFixStage:");
                    FoundPrecisionChk = line.IndexOf("PrecisionChk:");
                    FoundDistanceThreshold = line.IndexOf("DistanceThreshold:");
                    FoundDestinationLongitude = line.IndexOf("DestinationLongitude:");
                    FoundDestinationLatitude = line.IndexOf("DestinationLatitude:");
                    FoundDestinationAltitude = line.IndexOf("DestinationAltitude:");
                    FoundMotionDetection = line.IndexOf("[MotionDetection]");
                    FoundAngle = line.IndexOf("Angle");
                    FoundDataRate = line.IndexOf("DataRate");
                    FoundSampleFrequency = line.IndexOf("SampleFrequency");

                    if (FoundWorkMode != -1)
                    {
                        WorkMode = line;
                    }

                    if (FoundFirstFixStage != -1)
                    {
                        FirstFixStage = line;
                    }

                    if (FoundTraceFixStage != -1)
                    {
                        TraceFixStage = line;
                    }

                    if (FoundPrecisionChk != -1)
                    {
                        PrecisionChk = line.Substring(FoundPrecisionChk + 13, 1);

                        if (Int16.Parse(PrecisionChk) == 1)
                        {
                            PrecisionChk = "PrecisionChk: True";
                        }
                        else if (Int16.Parse(PrecisionChk) == 0)
                        {
                            PrecisionChk = "PrecisionChk: False";
                        }
                    }

                    if (FoundEnable != -1)
                    {
                        enable_count++;
                        Enable_all = line;
                        Enable = line.Substring(FoundEnable + 7, 1);
                        chk_enable_count = Int16.Parse(Enable);
                    }

                    if (first_stage_flag == 0 && FoundStage != -1)
                    {
                        first_stage_flag = 1;
                        Stage = line;
                    }

                    if (FoundCOM != -1)
                    {
                        COM = line.Substring(FoundCOM + 8);
                        label31.Text = COM;
                    }

                    if (FoundSN != -1)
                    {
                        SN = line.Substring(FoundSN + 13);
                        label30.Text = SN;
                    }

                    if (FoundFV != -1)
                    {
                        FV = line.Substring(FoundFV + 16);
                        label29.Text = FV;
                    }

                    if (FoundPeriodicCycle != -1)
                    {
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(FirstFixStage + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(TraceFixStage + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT0 != -1)
                    {
                        T0 = line.Substring(FoundT0 + 3);
                        s1_t0 = Int32.Parse(T0);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText("[Periodic]" + Environment.NewLine);
                        if (enable_count == 1)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(Stage + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(WorkMode + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT1 != -1)
                    {
                        T1 = line.Substring(FoundT1 + 3);
                        s1_t1 = Int32.Parse(T1);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT2 != -1)
                    {
                        T2 = line.Substring(FoundT2 + 3);
                        s1_t2 = Int32.Parse(T2);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT3 != -1)
                    {
                        T3 = line.Substring(FoundT3 + 3);
                        s1_t3 = Int32.Parse(T3);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT4 != -1)
                    {
                        T4 = line.Substring(FoundT4 + 3);
                        s1_t4 = Int32.Parse(T4);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT5 != -1)
                    {
                        T5 = line.Substring(FoundT5 + 3);
                        s1_t5 = Int32.Parse(T5);
                        richTextBox8.SelectionColor = Color.Orange;          //Orange
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText("[Dynamic]" + Environment.NewLine);
                        if (enable_count == 2)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox8.SelectionColor = Color.Orange;          //Orange
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox8.SelectionColor = Color.Orange;          //Orange
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox8.SelectionColor = Color.Orange;          //Orange
                        richTextBox8.AppendText(PrecisionChk + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Orange;          //Orange
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT6 != -1)
                    {
                        T6 = line.Substring(FoundT6 + 3);
                        s1_t6 = Int32.Parse(T6);
                        richTextBox8.SelectionColor = Color.Orange;          //Orange
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT7 != -1)
                    {
                        T7 = line.Substring(FoundT7 + 3);
                        s1_t7 = Int32.Parse(T7);
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText("[Geofencing]" + Environment.NewLine);
                        if (enable_count == 3)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT8 != -1)
                    {
                        T8 = line.Substring(FoundT8 + 3);
                        s1_t8 = Int32.Parse(T8);
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDistanceThreshold != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLongitude != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLatitude != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationAltitude != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundMotionDetection != -1)
                    {
                        MotionDetection = line;
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox8.AppendText(MotionDetection + Environment.NewLine);
                    }

                    if (FoundAngle != -1)
                    {
                        if (enable_count == 4)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDataRate != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundSampleFrequency != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }
                }

                first_stage_flag = 0;
                enable_count = 0;
                chk_enable_count = 0;
            }

            /**
             *  S2
             */
            if (s2chkb.Checked == true & s2fileexistflag == 1)
            {
                richTextBox11.Clear();
                this.tabPage3.Text = textBox11.Text;
                foreach (String line in File.ReadLines(open_file2_path))
                {
                    FoundPeriodicCycle = line.IndexOf("PeriodicCycle:");
                    FoundT0 = line.IndexOf("T0:");
                    FoundT1 = line.IndexOf("T1:");
                    FoundT2 = line.IndexOf("T2:");
                    FoundT3 = line.IndexOf("T3:");
                    FoundT4 = line.IndexOf("T4:");
                    FoundT5 = line.IndexOf("T5:");
                    FoundT6 = line.IndexOf("T6:");
                    FoundT7 = line.IndexOf("T7:");
                    FoundT8 = line.IndexOf("T8:");
                    FoundCOM = line.IndexOf("COMPort:");
                    FoundSN = line.IndexOf("SerialNumber:");
                    FoundFV = line.IndexOf("FirmwareVersion:");
                    FoundEnable = line.IndexOf("Enable:");
                    FoundWorkMode = line.IndexOf("WorkMode:");
                    FoundStage = line.IndexOf("Stage:");
                    FoundFirstFixStage = line.IndexOf("FirstFixStage:");
                    FoundTraceFixStage = line.IndexOf("TraceFixStage:");
                    FoundPrecisionChk = line.IndexOf("PrecisionChk:");
                    FoundDistanceThreshold = line.IndexOf("DistanceThreshold:");
                    FoundDestinationLongitude = line.IndexOf("DestinationLongitude:");
                    FoundDestinationLatitude = line.IndexOf("DestinationLatitude:");
                    FoundDestinationAltitude = line.IndexOf("DestinationAltitude:");
                    FoundMotionDetection = line.IndexOf("[MotionDetection]");
                    FoundAngle = line.IndexOf("Angle");
                    FoundDataRate = line.IndexOf("DataRate");
                    FoundSampleFrequency = line.IndexOf("SampleFrequency");

                    if (FoundWorkMode != -1)
                    {
                        WorkMode = line;
                    }

                    if (FoundFirstFixStage != -1)
                    {
                        FirstFixStage = line;
                    }

                    if (FoundTraceFixStage != -1)
                    {
                        TraceFixStage = line;
                    }

                    if (FoundPrecisionChk != -1)
                    {
                        PrecisionChk = line.Substring(FoundPrecisionChk + 13, 1);

                        if (Int16.Parse(PrecisionChk) == 1)
                        {
                            PrecisionChk = "PrecisionChk: True";
                        }
                        else if (Int16.Parse(PrecisionChk) == 0)
                        {
                            PrecisionChk = "PrecisionChk: False";
                        }
                    }

                    if (FoundEnable != -1)
                    {
                        enable_count++;
                        Enable_all = line;
                        Enable = line.Substring(FoundEnable + 7, 1);
                        chk_enable_count = Int16.Parse(Enable);
                    }

                    if (first_stage_flag == 0 && FoundStage != -1)
                    {
                        first_stage_flag = 1;
                        Stage = line;
                    }

                    if (FoundCOM != -1)
                    {
                        COM = line.Substring(FoundCOM + 8);
                        label37.Text = COM;
                    }

                    if (FoundSN != -1)
                    {
                        SN = line.Substring(FoundSN + 13);
                        label36.Text = SN;
                    }

                    if (FoundFV != -1)
                    {
                        FV = line.Substring(FoundFV + 16);
                        label35.Text = FV;
                    }

                    if (FoundPeriodicCycle != -1)
                    {
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(FirstFixStage + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(TraceFixStage + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT0 != -1)
                    {
                        T0 = line.Substring(FoundT0 + 3);
                        s2_t0 = Int32.Parse(T0);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText("[Periodic]" + Environment.NewLine);
                        if (enable_count == 1)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(Stage + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(WorkMode + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT1 != -1)
                    {
                        T1 = line.Substring(FoundT1 + 3);
                        s2_t1 = Int32.Parse(T1);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT2 != -1)
                    {
                        T2 = line.Substring(FoundT2 + 3);
                        s2_t2 = Int32.Parse(T2);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT3 != -1)
                    {
                        T3 = line.Substring(FoundT3 + 3);
                        s2_t3 = Int32.Parse(T3);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT4 != -1)
                    {
                        T4 = line.Substring(FoundT4 + 3);
                        s2_t4 = Int32.Parse(T4);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT5 != -1)
                    {
                        T5 = line.Substring(FoundT5 + 3);
                        s2_t5 = Int32.Parse(T5);
                        richTextBox11.SelectionColor = Color.Orange;          //Orange
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText("[Dynamic]" + Environment.NewLine);
                        if (enable_count == 2)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox11.SelectionColor = Color.Orange;          //Orange
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox11.SelectionColor = Color.Orange;          //Orange
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox11.SelectionColor = Color.Orange;          //Orange
                        richTextBox11.AppendText(PrecisionChk + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Orange;          //Orange
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT6 != -1)
                    {
                        T6 = line.Substring(FoundT6 + 3);
                        s2_t6 = Int32.Parse(T6);
                        richTextBox11.SelectionColor = Color.Orange;          //Orange
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT7 != -1)
                    {
                        T7 = line.Substring(FoundT7 + 3);
                        s2_t7 = Int32.Parse(T7);
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText("[Geofencing]" + Environment.NewLine);
                        if (enable_count == 3)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT8 != -1)
                    {
                        T8 = line.Substring(FoundT8 + 3);
                        s2_t8 = Int32.Parse(T8);
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDistanceThreshold != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLongitude != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLatitude != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationAltitude != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundMotionDetection != -1)
                    {
                        MotionDetection = line;
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox11.AppendText(MotionDetection + Environment.NewLine);
                    }

                    if (FoundAngle != -1)
                    {
                        if (enable_count == 4)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDataRate != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundSampleFrequency != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }
                }

                first_stage_flag = 0;
                enable_count = 0;
                chk_enable_count = 0;
            }

            /**
             *  S3
             */
            if (s3chkb.Checked == true & s3fileexistflag == 1)
            {
                richTextBox12.Clear();
                this.tabPage4.Text = textBox12.Text;
                foreach (String line in File.ReadLines(open_file3_path))
                {
                    FoundPeriodicCycle = line.IndexOf("PeriodicCycle:");
                    FoundT0 = line.IndexOf("T0:");
                    FoundT1 = line.IndexOf("T1:");
                    FoundT2 = line.IndexOf("T2:");
                    FoundT3 = line.IndexOf("T3:");
                    FoundT4 = line.IndexOf("T4:");
                    FoundT5 = line.IndexOf("T5:");
                    FoundT6 = line.IndexOf("T6:");
                    FoundT7 = line.IndexOf("T7:");
                    FoundT8 = line.IndexOf("T8:");
                    FoundCOM = line.IndexOf("COMPort:");
                    FoundSN = line.IndexOf("SerialNumber:");
                    FoundFV = line.IndexOf("FirmwareVersion:");
                    FoundEnable = line.IndexOf("Enable:");
                    FoundWorkMode = line.IndexOf("WorkMode:");
                    FoundStage = line.IndexOf("Stage:");
                    FoundFirstFixStage = line.IndexOf("FirstFixStage:");
                    FoundTraceFixStage = line.IndexOf("TraceFixStage:");
                    FoundPrecisionChk = line.IndexOf("PrecisionChk:");
                    FoundDistanceThreshold = line.IndexOf("DistanceThreshold:");
                    FoundDestinationLongitude = line.IndexOf("DestinationLongitude:");
                    FoundDestinationLatitude = line.IndexOf("DestinationLatitude:");
                    FoundDestinationAltitude = line.IndexOf("DestinationAltitude:");
                    FoundMotionDetection = line.IndexOf("[MotionDetection]");
                    FoundAngle = line.IndexOf("Angle");
                    FoundDataRate = line.IndexOf("DataRate");
                    FoundSampleFrequency = line.IndexOf("SampleFrequency");

                    if (FoundWorkMode != -1)
                    {
                        WorkMode = line;
                    }

                    if (FoundFirstFixStage != -1)
                    {
                        FirstFixStage = line;
                    }

                    if (FoundTraceFixStage != -1)
                    {
                        TraceFixStage = line;
                    }

                    if (FoundPrecisionChk != -1)
                    {
                        PrecisionChk = line.Substring(FoundPrecisionChk + 13, 1);

                        if (Int16.Parse(PrecisionChk) == 1)
                        {
                            PrecisionChk = "PrecisionChk: True";
                        }
                        else if (Int16.Parse(PrecisionChk) == 0)
                        {
                            PrecisionChk = "PrecisionChk: False";
                        }
                    }

                    if (FoundEnable != -1)
                    {
                        enable_count++;
                        Enable_all = line;
                        Enable = line.Substring(FoundEnable + 7, 1);
                        chk_enable_count = Int16.Parse(Enable);
                    }

                    if (first_stage_flag == 0 && FoundStage != -1)
                    {
                        first_stage_flag = 1;
                        Stage = line;
                    }

                    if (FoundCOM != -1)
                    {
                        COM = line.Substring(FoundCOM + 8);
                        label43.Text = COM;
                    }

                    if (FoundSN != -1)
                    {
                        SN = line.Substring(FoundSN + 13);
                        label42.Text = SN;
                    }

                    if (FoundFV != -1)
                    {
                        FV = line.Substring(FoundFV + 16);
                        label41.Text = FV;
                    }

                    if (FoundPeriodicCycle != -1)
                    {
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(FirstFixStage + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(TraceFixStage + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT0 != -1)
                    {
                        T0 = line.Substring(FoundT0 + 3);
                        s3_t0 = Int32.Parse(T0);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText("[Periodic]" + Environment.NewLine);
                        if (enable_count == 1)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(Stage + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(WorkMode + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT1 != -1)
                    {
                        T1 = line.Substring(FoundT1 + 3);
                        s3_t1 = Int32.Parse(T1);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT2 != -1)
                    {
                        T2 = line.Substring(FoundT2 + 3);
                        s3_t2 = Int32.Parse(T2);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT3 != -1)
                    {
                        T3 = line.Substring(FoundT3 + 3);
                        s3_t3 = Int32.Parse(T3);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT4 != -1)
                    {
                        T4 = line.Substring(FoundT4 + 3);
                        s3_t4 = Int32.Parse(T4);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT5 != -1)
                    {
                        T5 = line.Substring(FoundT5 + 3);
                        s3_t5 = Int32.Parse(T5);
                        richTextBox12.SelectionColor = Color.Orange;          //Orange
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText("[Dynamic]" + Environment.NewLine);
                        if (enable_count == 2)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox12.SelectionColor = Color.Orange;          //Orange
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox12.SelectionColor = Color.Orange;          //Orange
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox12.SelectionColor = Color.Orange;          //Orange
                        richTextBox12.AppendText(PrecisionChk + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Orange;          //Orange
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT6 != -1)
                    {
                        T6 = line.Substring(FoundT6 + 3);
                        s3_t6 = Int32.Parse(T6);
                        richTextBox12.SelectionColor = Color.Orange;          //Orange
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT7 != -1)
                    {
                        T7 = line.Substring(FoundT7 + 3);
                        s3_t7 = Int32.Parse(T7);
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText("[Geofencing]" + Environment.NewLine);
                        if (enable_count == 3)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT8 != -1)
                    {
                        T8 = line.Substring(FoundT8 + 3);
                        s3_t8 = Int32.Parse(T8);
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDistanceThreshold != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLongitude != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLatitude != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationAltitude != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundMotionDetection != -1)
                    {
                        MotionDetection = line;
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox12.AppendText(MotionDetection + Environment.NewLine);
                    }

                    if (FoundAngle != -1)
                    {
                        if (enable_count == 4)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDataRate != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundSampleFrequency != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }
                }

                first_stage_flag = 0;
                enable_count = 0;
                chk_enable_count = 0;

            }

        }

        private void button5_Click(object sender, EventArgs e)
        {
            parse_covert();
        }


        private void parse_covert()
        {
            //String save_file_path = SvFileBox.Text + "\" + ;
            String open_file1_path = OpFileBox1.Text;
            String open_file2_path = OpFileBox2.Text;
            String open_file3_path = OpFileBox3.Text;
            String open_file4_path = OpFileBox4.Text;

            Font New_Font;
            DateTime UTC_TIME_, UTC_TIME_ALL, localDateTime;
            TimeSpan s0_time_subtract, s1_time_subtract, s2_time_subtract, s3_time_subtract;
            int int32_s0_time;

            //COM SerialNumber FirmwareVersion
            String COM, SN, FV;
            int FoundCOM, FoundSN, FoundFV;

            //Locus Row Data
            String MXCM10033, Fix, Analyze_UTC_time, GNSS_MODE;
            int FoundMXCM10033;
            string[] FoundComma = new string[20];

            //UTC_TIME
            String UTC_TIME_HMS, UTC_TIME_YMDHMS, UTC_TIME_yyyy, UTC_TIME_MM, UTC_TIME_dd, UTC_TIME_HH, UTC_TIME_mm, UTC_TIME_ss;

            //[Periodic]
            String T0, T1, T2, T3, T4;
            int FoundPeriodicCycle, FoundStage, FoundWorkMode, FoundT0, FoundT1, FoundT2, FoundT3, FoundT4, FoundFirstFixStage, FoundTraceFixStage;

            //[Dynamic]
            String T5, T6;
            int FoundPrecisionChk, FoundT5, FoundT6;

            //[Geofencing]
            String T7, T8;
            int FoundT7, FoundT8, FoundDistanceThreshold, FoundDestinationLongitude, FoundDestinationLatitude, FoundDestinationAltitude;

            //[MotionDetection]
            String MotionDetection;
            int FoundMotionDetection, FoundAngle, FoundDataRate, FoundSampleFrequency;

            //[GPS_EPO]、[GLO_EPO]、[GAL_EPO]、[BEI_EPO]  GNSS_EPO Title 
            int FoundGPS_EPO, FoundGLO_EPO, FoundGAL_EPO, FoundBEI_EPO;

            //GNSS
            String GPS_PRN, GPS_SNR, GLO_PRN, GLO_SNR, GAL_PRN, GAL_SNR, BEI_PRN, BEI_SNR, QZS_PRN, QZS_SNR;
            int FoundGPS_PRN, FoundGPS_SNR, FoundGLO_PRN, FoundGLO_SNR, FoundGAL_PRN, FoundGAL_SNR, FoundBEI_PRN, FoundBEI_SNR, FoundQZS_PRN, FoundQZS_SNR;

            //Common use
            string[] EpoDataNumberEnable = new string[4];
            string[] EpoDataNumber = new string[4];
            string[] FWN = new string[4];
            string[] FTOW = new string[4];
            string[] LWN = new string[4];
            string[] LTOW = new string[4];
            int FoundEnable, FoundEpoDataNumber, FoundFWN, FoundFTOW, FoundLWN, FoundLTOW;

            int first_stage_flag = 0;

            convert_count0 = 1;
            convert_count1 = 1;
            convert_count2 = 1;
            convert_count3 = 1;

            /*
             * Check Read File Exist
             */
            //S0
            if (s0chkb.Checked == true)
            {
                if (File.Exists(open_file1_path))
                {
                    s0fileexistflag = 1;
                }
                else if (open_file1_path == "")
                {
                    s0fileexistflag = 2;
                }
                else
                {
                    s0fileexistflag = 2;
                    MessageBox.Show(textBox9.Text + " : The File doesn't exist!");
                }
            }

            //S1
            if (s1chkb.Checked == true)
            {
                if (File.Exists(open_file2_path))
                {
                    s1fileexistflag = 1;
                }
                else if (open_file2_path == "")
                {
                    s1fileexistflag = 2;
                }
                else
                {
                    button5.BackColor = Color.Red;
                    s1fileexistflag = 2;
                    MessageBox.Show(textBox10.Text + " : The File doesn't exist!");
                }
            }

            //S2
            if (s2chkb.Checked == true)
            {
                if (File.Exists(open_file3_path))
                {
                    s2fileexistflag = 1;
                }
                else if (open_file3_path == "")
                {
                    s2fileexistflag = 2;
                }
                else
                {
                    s2fileexistflag = 2;
                    MessageBox.Show(textBox11.Text + " : The File doesn't exist!");
                }
            }

            //S3
            if (s3chkb.Checked == true)
            {
                if (File.Exists(open_file4_path))
                {
                    s3fileexistflag = 1;
                }
                else if (open_file4_path == "")
                {
                    s3fileexistflag = 2;
                }
                else
                {
                    s3fileexistflag = 2;
                    MessageBox.Show(textBox12.Text + " : The File doesn't exist!");
                }
            }


            if (s0fileexistflag == 0 && s1fileexistflag == 0 && s2fileexistflag == 0 && s3fileexistflag == 0)
            {
                MessageBox.Show("Please Choice File");
            }
            /*
             * Check Read File Exist
             */

            /*
             * To do LOCUS RAW DATA
             */
            /**
             *  S0 TXT
             */
            if (s0chkb.Checked == true & s0fileexistflag == 1)
            {
                richTextBox1.Clear();
                richTextBox2.Clear();
                richTextBox7.Clear();
                textBox4.Clear();
                this.tabPage1.Text = textBox9.Text;

                //Initial T1~T8 Font color
                for (int initial_color = 0; initial_color < 1000; initial_color++)
                {
                    s0_mode_font_color[initial_color] = 0;
                }

                foreach (String line in File.ReadLines(open_file1_path))
                {
                    FoundMXCM10033 = line.IndexOf("$MXCM10033,2,");
                    FoundGPS_PRN = line.IndexOf("GPS_PRN:");
                    FoundGPS_SNR = line.IndexOf("GPS_SNR:");
                    FoundGLO_PRN = line.IndexOf("GLO_PRN:");
                    FoundGLO_SNR = line.IndexOf("GLO_SNR:");
                    FoundGAL_PRN = line.IndexOf("GAL_PRN:");
                    FoundGAL_SNR = line.IndexOf("GAL_SNR:");
                    FoundBEI_PRN = line.IndexOf("BEI_PRN:");
                    FoundBEI_SNR = line.IndexOf("BEI_SNR:");
                    FoundQZS_PRN = line.IndexOf("QZS_PRN:");
                    FoundQZS_SNR = line.IndexOf("QZS_SNR:");


                    if (FoundMXCM10033 != -1)
                    {
                        if (convert_count0 < 10)
                        {
                            FoundComma = line.Split(',');
                            //Fix = line.Substring(FoundMXCM10033 + 33, 2);
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox2.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s0_mode_font_color[convert_count0] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox2.SelectionColor = Color.Blue;                           //BLUE
                                s0_mode_font_color[convert_count0] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox2.SelectionColor = Color.Orange;                         //Orange
                                s0_mode_font_color[convert_count0] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox2.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s0_mode_font_color[convert_count0] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                s0_fix[convert_count0] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                s0_fix[convert_count0] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 64);
                            ITEM = FoundComma[2];
                            S0_ITEM[convert_count0] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 15, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 24, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time0_store[convert_count0 - 1] = UTC_TIME_;
                            if (convert_count0 > 1)
                            {
                                s0_time_subtract = time0_store[convert_count0 - 1].Subtract(time0_store[convert_count0 - 2]);
                                int32_s0_time = Int32.Parse((s0_time_subtract.TotalSeconds).ToString());
                                textBox4.AppendText(time0_store[convert_count0 - 1].ToString("HH:mm:ss") + "(Item" + convert_count0 + ")" + "  -  " + time0_store[convert_count0 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count0 - 1) + ")" + Environment.NewLine);
                                textBox4.AppendText(Environment.NewLine);
                                textBox4.AppendText((s0_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                                textBox4.AppendText(Environment.NewLine);
                                s0_interval[convert_count0] = s0_time_subtract.TotalSeconds.ToString();       //excel title interval
                            }

                            richTextBox2.AppendText(MXCM10033 + s0_fix[convert_count0] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox1.SelectionFont, richTextBox1.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox1.SelectionFont = New_Font;
                            richTextBox1.AppendText(S0_ITEM[convert_count0] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s0_analyze_utc_time_flag == 0)
                            {
                                s0_analyze_utc_time_flag = 1;
                                s0_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s0_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S0_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S0_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S0_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s0_Instruction_code_cmd[convert_count0] = FoundComma[0];
                            s0_Instruction_code_cmd_two[convert_count0] = FoundComma[1];
                            s0_Item[convert_count0] = FoundComma[2];
                            s0_ymd[convert_count0] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s0_hms[convert_count0] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s0_ramdom_first[convert_count0] = FoundComma[6];
                            s0_ramdom_second[convert_count0] = FoundComma[7];
                            s0_ramdom_third[convert_count0] = FoundComma[8];
                            s0_ramdom_forth[convert_count0] = FoundComma[9];
                            s0_ramdom_fiveth[convert_count0] = FoundComma[10];
                            s0_sat[convert_count0] = FoundComma[11];
                            s0_mode[convert_count0] = FoundComma[12];

                            convert_count0++;
                        }
                        else if (convert_count0 < 100)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox2.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s0_mode_font_color[convert_count0] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox2.SelectionColor = Color.Blue;                           //BLUE
                                s0_mode_font_color[convert_count0] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox2.SelectionColor = Color.Orange;                         //Orange
                                s0_mode_font_color[convert_count0] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox2.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s0_mode_font_color[convert_count0] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                s0_fix[convert_count0] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                s0_fix[convert_count0] = "○";       //excel title fix
                            }


                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 65);
                            ITEM = FoundComma[2];
                            S0_ITEM[convert_count0] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 16, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 25, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time0_store[convert_count0 - 1] = UTC_TIME_;
                            s0_time_subtract = time0_store[convert_count0 - 1].Subtract(time0_store[convert_count0 - 2]);
                            textBox4.AppendText(time0_store[convert_count0 - 1].ToString("HH:mm:ss") + "(Item" + convert_count0 + ")" + "  -  " + time0_store[convert_count0 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count0 - 1) + ")" + Environment.NewLine);
                            textBox4.AppendText(Environment.NewLine);
                            textBox4.AppendText((s0_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                            textBox4.AppendText(Environment.NewLine);
                            s0_interval[convert_count0] = s0_time_subtract.TotalSeconds.ToString();       //excel title interval
                            richTextBox2.AppendText(MXCM10033 + s0_fix[convert_count0] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox1.SelectionFont, richTextBox1.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox1.SelectionFont = New_Font;
                            richTextBox1.AppendText(S0_ITEM[convert_count0] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s0_analyze_utc_time_flag == 0)
                            {
                                s0_analyze_utc_time_flag = 1;
                                s0_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s0_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S0_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S0_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S0_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s0_Instruction_code_cmd[convert_count0] = FoundComma[0];
                            s0_Instruction_code_cmd_two[convert_count0] = FoundComma[1];
                            s0_Item[convert_count0] = FoundComma[2];
                            s0_ymd[convert_count0] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s0_hms[convert_count0] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s0_ramdom_first[convert_count0] = FoundComma[6];
                            s0_ramdom_second[convert_count0] = FoundComma[7];
                            s0_ramdom_third[convert_count0] = FoundComma[8];
                            s0_ramdom_forth[convert_count0] = FoundComma[9];
                            s0_ramdom_fiveth[convert_count0] = FoundComma[10];
                            s0_sat[convert_count0] = FoundComma[11];
                            s0_mode[convert_count0] = FoundComma[12];

                            convert_count0++;
                        }
                        else if (convert_count0 < 1000)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox2.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s0_mode_font_color[convert_count0] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox2.SelectionColor = Color.Blue;                           //BLUE
                                s0_mode_font_color[convert_count0] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox2.SelectionColor = Color.Orange;                         //Orange
                                s0_mode_font_color[convert_count0] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox2.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s0_mode_font_color[convert_count0] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                s0_fix[convert_count0] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                s0_fix[convert_count0] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 66);
                            ITEM = FoundComma[2];
                            S0_ITEM[convert_count0] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 17, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 26, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time0_store[convert_count0 - 1] = UTC_TIME_;
                            s0_time_subtract = time0_store[convert_count0 - 1].Subtract(time0_store[convert_count0 - 2]);
                            textBox4.AppendText(time0_store[convert_count0 - 1].ToString("HH:mm:ss") + "(Item" + convert_count0 + ")" + "  -  " + time0_store[convert_count0 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count0 - 1) + ")" + Environment.NewLine);
                            textBox4.AppendText(Environment.NewLine);
                            textBox4.AppendText((s0_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                            textBox4.AppendText(Environment.NewLine);
                            s0_interval[convert_count0] = s0_time_subtract.TotalSeconds.ToString();       //excel title interval
                            richTextBox2.AppendText(MXCM10033 + s0_fix[convert_count0] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox1.SelectionFont, richTextBox1.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox1.SelectionFont = New_Font;
                            richTextBox1.AppendText(S0_ITEM[convert_count0] + Environment.NewLine);


                            if (Analyze_UTC_time == "2024" && s0_analyze_utc_time_flag == 0)
                            {
                                s0_analyze_utc_time_flag = 1;
                                s0_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s0_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S0_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S0_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S0_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s0_Instruction_code_cmd[convert_count0] = FoundComma[0];
                            s0_Instruction_code_cmd_two[convert_count0] = FoundComma[1];
                            s0_Item[convert_count0] = FoundComma[2];
                            s0_ymd[convert_count0] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s0_hms[convert_count0] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s0_ramdom_first[convert_count0] = FoundComma[6];
                            s0_ramdom_second[convert_count0] = FoundComma[7];
                            s0_ramdom_third[convert_count0] = FoundComma[8];
                            s0_ramdom_forth[convert_count0] = FoundComma[9];
                            s0_ramdom_fiveth[convert_count0] = FoundComma[10];
                            s0_sat[convert_count0] = FoundComma[11];
                            s0_mode[convert_count0] = FoundComma[12];

                            convert_count0++;
                        }

                    }


                    if (FoundGPS_PRN != -1)
                    {
                        //GPS_PRN = line.Substring(FoundGPS_PRN, 63);
                        S0_GPS_PRN[convert_count0 - 1] = line;
                        S0_GPS_SAT[convert_count0] = line.Substring(FoundGPS_PRN + 61);          //save GPS sat
                        richTextBox1.AppendText(S0_GPS_PRN[convert_count0 - 1] + Environment.NewLine);
                    }

                    if (FoundGPS_SNR != -1)
                    {
                        //GPS_SNR = line.Substring(FoundGPS_SNR, 65);
                        S0_GPS_SNR[convert_count0 - 1] = line;
                        S0_GPS_CN[convert_count0] = line.Substring(FoundGPS_SNR + 61);
                        richTextBox1.AppendText(S0_GPS_SNR[convert_count0 - 1] + Environment.NewLine);
                    }

                    if (FoundGLO_PRN != -1)
                    {
                        //GLO_PRN = line.Substring(FoundGLO_PRN, 63);
                        S0_GLO_PRN[convert_count0 - 1] = line;
                        S0_GLO_SAT[convert_count0] = line.Substring(FoundGLO_PRN + 61);
                        richTextBox1.AppendText(S0_GLO_PRN[convert_count0 - 1] + Environment.NewLine);
                    }

                    if (FoundGLO_SNR != -1)
                    {
                        //GLO_SNR = line.Substring(FoundGLO_SNR, 65);
                        S0_GLO_SNR[convert_count0 - 1] = line;
                        S0_GLO_CN[convert_count0] = line.Substring(FoundGLO_SNR + 61);
                        richTextBox1.AppendText(S0_GLO_SNR[convert_count0 - 1] + Environment.NewLine);
                    }

                    if (FoundGAL_PRN != -1)
                    {
                        //GAL_PRN = line;
                        S0_GAL_PRN[convert_count0 - 1] = line;
                        S0_GAL_SAT[convert_count0] = line.Substring(FoundGAL_PRN + 61);
                        richTextBox1.AppendText(S0_GAL_PRN[convert_count0 - 1] + Environment.NewLine);
                    }

                    if (FoundGAL_SNR != -1)
                    {
                        //GAL_SNR = line;
                        S0_GAL_SNR[convert_count0 - 1] = line;
                        S0_GAL_CN[convert_count0] = line.Substring(FoundGAL_SNR + 61);
                        richTextBox1.AppendText(S0_GAL_SNR[convert_count0 - 1] + Environment.NewLine);
                    }

                    if (FoundBEI_PRN != -1)
                    {
                        //BEI_PRN = line;
                        S0_BEI_PRN[convert_count0 - 1] = line;
                        S0_BEI_SAT[convert_count0] = line.Substring(FoundBEI_PRN + 61);
                        richTextBox1.AppendText(S0_BEI_PRN[convert_count0 - 1] + Environment.NewLine);
                    }

                    if (FoundBEI_SNR != -1)
                    {
                        //BEI_SNR = line;
                        S0_BEI_SNR[convert_count0 - 1] = line;
                        S0_BEI_CN[convert_count0] = line.Substring(FoundBEI_SNR + 61);
                        richTextBox1.AppendText(S0_BEI_SNR[convert_count0 - 1] + Environment.NewLine);
                    }

                    if (FoundQZS_PRN != -1)
                    {
                        //QZS_PRN = line;
                        S0_QZS_PRN[convert_count0 - 1] = line;
                        richTextBox1.AppendText(S0_QZS_PRN[convert_count0 - 1] + Environment.NewLine);
                    }

                    if (FoundQZS_SNR != -1)
                    {
                        //QZS_SNR = line;
                        S0_QZS_SNR[convert_count0 - 1] = line;
                        richTextBox1.AppendText(S0_QZS_SNR[convert_count0 - 1] + Environment.NewLine);
                    }

                    /*
                     * S0 MDA Fix ITEM && SAT、CN AVG(Area1、2)
                     */
                    if (fix_equal == true && s0_first_fix_flag == 0)
                    {
                        s0_first_fix_flag = 1;
                        s0_first_fix_item = (Int32.Parse(ITEM) + 1).ToString();

                        S0_T1_T2_item_fix_time = T1_T2_item_count;
                        S0_T3_T4_item_fix_time = T3_T4_item_count;
                        S0_T5_T6_item_fix_time = T5_T6_item_count;
                        S0_T7_T8_item_fix_time = T7_T8_item_count;

                        s0_TTFF_item = "TTFF Item = [" + ITEM + "]";           //first fix item(已完成)
                        s0_first_fix_previous_item = Int32.Parse(ITEM);           //fix 前一個item

                    }
                    /*
                     * S0 MDA Fix ITEM && SAT、CN AVG(Area1、2)
                     */

                }
                /*
                 * S0 MDA Fix ITEM && SAT、CN AVG(Area3、4)
                 */


                try
                {
                    //initial A1~A4 avg
                    S0_A1_GPS_SAT_Accumulate = 0;
                    S0_A1_GPS_CN_Accumulate = 0;
                    S0_A1_GLO_SAT_Accumulate = 0;
                    S0_A1_GLO_CN_Accumulate = 0;
                    S0_A1_GAL_SAT_Accumulate = 0;
                    S0_A1_GAL_CN_Accumulate = 0;
                    S0_A1_BEI_SAT_Accumulate = 0;
                    S0_A1_BEI_CN_Accumulate = 0;

                    S0_A1_GPS_SAT_AVG = 0;
                    S0_A1_GPS_CN_AVG = 0;
                    S0_A1_GLO_SAT_AVG = 0;
                    S0_A1_GLO_CN_AVG = 0;
                    S0_A1_GAL_SAT_AVG = 0;
                    S0_A1_GAL_CN_AVG = 0;
                    S0_A1_BEI_SAT_AVG = 0;
                    S0_A1_BEI_CN_AVG = 0;

                    S0_A2_GPS_SAT_Accumulate = 0;
                    S0_A2_GPS_CN_Accumulate = 0;
                    S0_A2_GLO_SAT_Accumulate = 0;
                    S0_A2_GLO_CN_Accumulate = 0;
                    S0_A2_GAL_SAT_Accumulate = 0;
                    S0_A2_GAL_CN_Accumulate = 0;
                    S0_A2_BEI_SAT_Accumulate = 0;
                    S0_A2_BEI_CN_Accumulate = 0;

                    S0_A2_GPS_SAT_AVG = 0;
                    S0_A2_GPS_CN_AVG = 0;
                    S0_A2_GLO_SAT_AVG = 0;
                    S0_A2_GLO_CN_AVG = 0;
                    S0_A2_GAL_SAT_AVG = 0;
                    S0_A2_GAL_CN_AVG = 0;
                    S0_A2_BEI_SAT_AVG = 0;
                    S0_A2_BEI_CN_AVG = 0;

                    S0_A3_GPS_SAT_Accumulate = 0;
                    S0_A3_GPS_CN_Accumulate = 0;
                    S0_A3_GLO_SAT_Accumulate = 0;
                    S0_A3_GLO_CN_Accumulate = 0;
                    S0_A3_GAL_SAT_Accumulate = 0;
                    S0_A3_GAL_CN_Accumulate = 0;
                    S0_A3_BEI_SAT_Accumulate = 0;
                    S0_A3_BEI_CN_Accumulate = 0;

                    S0_A3_GPS_SAT_AVG = 0;
                    S0_A3_GPS_CN_AVG = 0;
                    S0_A3_GLO_SAT_AVG = 0;
                    S0_A3_GLO_CN_AVG = 0;
                    S0_A3_GAL_SAT_AVG = 0;
                    S0_A3_GAL_CN_AVG = 0;
                    S0_A3_BEI_SAT_AVG = 0;
                    S0_A3_BEI_CN_AVG = 0;

                    S0_A4_GPS_SAT_Accumulate = 0;
                    S0_A4_GPS_CN_Accumulate = 0;
                    S0_A4_GLO_SAT_Accumulate = 0;
                    S0_A4_GLO_CN_Accumulate = 0;
                    S0_A4_GAL_SAT_Accumulate = 0;
                    S0_A4_GAL_CN_Accumulate = 0;
                    S0_A4_BEI_SAT_Accumulate = 0;
                    S0_A4_BEI_CN_Accumulate = 0;

                    S0_A4_GPS_SAT_AVG = 0;
                    S0_A4_GPS_CN_AVG = 0;
                    S0_A4_GLO_SAT_AVG = 0;
                    S0_A4_GLO_CN_AVG = 0;
                    S0_A4_GAL_SAT_AVG = 0;
                    S0_A4_GAL_CN_AVG = 0;
                    S0_A4_BEI_SAT_AVG = 0;
                    S0_A4_BEI_CN_AVG = 0;

                    //Area1(first to fix previous)
                    S0_Area1_stopitem = "StopItem = [" + (s0_first_fix_previous_item - 1).ToString() + "]";
                    S0_Area1_totalitem = "TotalItem = [" + (s0_first_fix_previous_item - 1).ToString() + "]";
                    for (int avg_count = 3; avg_count <= (s0_first_fix_previous_item + 1); avg_count++)
                    {
                        S0_A1_GPS_SAT_Accumulate += float.Parse(S0_GPS_SAT[avg_count]);
                        S0_A1_GPS_CN_Accumulate += float.Parse(S0_GPS_CN[avg_count]);
                        S0_A1_GLO_SAT_Accumulate += float.Parse(S0_GLO_SAT[avg_count]);
                        S0_A1_GLO_CN_Accumulate += float.Parse(S0_GLO_CN[avg_count]);
                        S0_A1_GAL_SAT_Accumulate += float.Parse(S0_GAL_SAT[avg_count]);
                        S0_A1_GAL_CN_Accumulate += float.Parse(S0_GAL_CN[avg_count]);
                        S0_A1_BEI_SAT_Accumulate += float.Parse(S0_BEI_SAT[avg_count]);
                        S0_A1_BEI_CN_Accumulate += float.Parse(S0_BEI_CN[avg_count]);
                    }
                    S0_A1_GPS_SAT_AVG = S0_A1_GPS_SAT_Accumulate / (s0_first_fix_previous_item - 1);
                    S0_A1_GPS_CN_AVG = S0_A1_GPS_CN_Accumulate / (s0_first_fix_previous_item - 1);
                    S0_A1_GLO_SAT_AVG = S0_A1_GLO_SAT_Accumulate / (s0_first_fix_previous_item - 1);
                    S0_A1_GLO_CN_AVG = S0_A1_GLO_CN_Accumulate / (s0_first_fix_previous_item - 1);
                    S0_A1_GAL_SAT_AVG = S0_A1_GAL_SAT_Accumulate / (s0_first_fix_previous_item - 1);
                    S0_A1_GAL_CN_AVG = S0_A1_GAL_CN_Accumulate / (s0_first_fix_previous_item - 1);
                    S0_A1_BEI_SAT_AVG = S0_A1_BEI_SAT_Accumulate / (s0_first_fix_previous_item - 1);
                    S0_A1_BEI_CN_AVG = S0_A1_BEI_CN_Accumulate / (s0_first_fix_previous_item - 1);
                    //Area2(first to fix)
                    S0_Area2_stopitem = "StopItem = [" + (Int32.Parse(s0_first_fix_item) - 1).ToString() + "]";
                    S0_Area2_totalitem = "TotalItem = [" + (Int32.Parse(s0_first_fix_item) - 1).ToString() + "]";
                    for (int avg_count = 3; avg_count <= (Int32.Parse(s0_first_fix_item) + 1); avg_count++)
                    {
                        S0_A2_GPS_SAT_Accumulate += float.Parse(S0_GPS_SAT[avg_count]);
                        S0_A2_GPS_CN_Accumulate += float.Parse(S0_GPS_CN[avg_count]);
                        S0_A2_GLO_SAT_Accumulate += float.Parse(S0_GLO_SAT[avg_count]);
                        S0_A2_GLO_CN_Accumulate += float.Parse(S0_GLO_CN[avg_count]);
                        S0_A2_GAL_SAT_Accumulate += float.Parse(S0_GAL_SAT[avg_count]);
                        S0_A2_GAL_CN_Accumulate += float.Parse(S0_GAL_CN[avg_count]);
                        S0_A2_BEI_SAT_Accumulate += float.Parse(S0_BEI_SAT[avg_count]);
                        S0_A2_BEI_CN_Accumulate += float.Parse(S0_BEI_CN[avg_count]);
                    }

                    S0_A2_GPS_SAT_AVG = S0_A2_GPS_SAT_Accumulate / (Int32.Parse(s0_first_fix_item) - 1);
                    S0_A2_GPS_CN_AVG = S0_A2_GPS_CN_Accumulate / (Int32.Parse(s0_first_fix_item) - 1);
                    S0_A2_GLO_SAT_AVG = S0_A2_GLO_SAT_Accumulate / (Int32.Parse(s0_first_fix_item) - 1);
                    S0_A2_GLO_CN_AVG = S0_A2_GLO_CN_Accumulate / (Int32.Parse(s0_first_fix_item) - 1);
                    S0_A2_GAL_SAT_AVG = S0_A2_GAL_SAT_Accumulate / (Int32.Parse(s0_first_fix_item) - 1);
                    S0_A2_GAL_CN_AVG = S0_A2_GAL_CN_Accumulate / (Int32.Parse(s0_first_fix_item) - 1);
                    S0_A2_BEI_SAT_AVG = S0_A2_BEI_SAT_Accumulate / (Int32.Parse(s0_first_fix_item) - 1);
                    S0_A2_BEI_CN_AVG = S0_A2_BEI_CN_Accumulate / (Int32.Parse(s0_first_fix_item) - 1);


                    //Area3(fix to last)
                    S0_Area3_startitem = "StartItem = [" + (Int32.Parse(s0_first_fix_item) - 1).ToString() + "]";
                    S0_Area3_stopitem = "StopItem = [" + (convert_count0 - 1).ToString() + "]";
                    S0_Area3_totalitem = "TotalItem = [" + (convert_count0 - Int32.Parse(s0_first_fix_item) + 1).ToString() + "]";
                    for (int avg_count = (Int32.Parse(s0_first_fix_item) + 1); avg_count <= convert_count0; avg_count++)
                    {
                        S0_A3_GPS_SAT_Accumulate += float.Parse(S0_GPS_SAT[avg_count]);
                        S0_A3_GPS_CN_Accumulate += float.Parse(S0_GPS_CN[avg_count]);
                        S0_A3_GLO_SAT_Accumulate += float.Parse(S0_GLO_SAT[avg_count]);
                        S0_A3_GLO_CN_Accumulate += float.Parse(S0_GLO_CN[avg_count]);
                        S0_A3_GAL_SAT_Accumulate += float.Parse(S0_GAL_SAT[avg_count]);
                        S0_A3_GAL_CN_Accumulate += float.Parse(S0_GAL_CN[avg_count]);
                        S0_A3_BEI_SAT_Accumulate += float.Parse(S0_BEI_SAT[avg_count]);
                        S0_A3_BEI_CN_Accumulate += float.Parse(S0_BEI_CN[avg_count]);
                    }
                    S0_A3_GPS_SAT_AVG = S0_A3_GPS_SAT_Accumulate / (convert_count0 - Int32.Parse(s0_first_fix_item) + 1);
                    S0_A3_GPS_CN_AVG = S0_A3_GPS_CN_Accumulate / (convert_count0 - Int32.Parse(s0_first_fix_item) + 1);
                    S0_A3_GLO_SAT_AVG = S0_A3_GLO_SAT_Accumulate / (convert_count0 - Int32.Parse(s0_first_fix_item) + 1);
                    S0_A3_GLO_CN_AVG = S0_A3_GLO_CN_Accumulate / (convert_count0 - Int32.Parse(s0_first_fix_item) + 1);
                    S0_A3_GAL_SAT_AVG = S0_A3_GAL_SAT_Accumulate / (convert_count0 - Int32.Parse(s0_first_fix_item) + 1);
                    S0_A3_GAL_CN_AVG = S0_A3_GAL_CN_Accumulate / (convert_count0 - Int32.Parse(s0_first_fix_item) + 1);
                    S0_A3_BEI_SAT_AVG = S0_A3_BEI_SAT_Accumulate / (convert_count0 - Int32.Parse(s0_first_fix_item) + 1);
                    S0_A3_BEI_CN_AVG = S0_A3_BEI_CN_Accumulate / (convert_count0 - Int32.Parse(s0_first_fix_item) + 1);

                    //Area4(first to last)
                    S0_Area4_stopitem = "StopItem = [" + (convert_count0 - 1).ToString() + "]";
                    S0_Area4_totalitem = "TotalItem = [" + (convert_count0 - 1).ToString() + "]";
                    for (int avg_count = 2; avg_count <= convert_count0; avg_count++)
                    {
                        S0_A4_GPS_SAT_Accumulate += float.Parse(S0_GPS_SAT[avg_count]);
                        S0_A4_GPS_CN_Accumulate += float.Parse(S0_GPS_CN[avg_count]);
                        S0_A4_GLO_SAT_Accumulate += float.Parse(S0_GLO_SAT[avg_count]);
                        S0_A4_GLO_CN_Accumulate += float.Parse(S0_GLO_CN[avg_count]);
                        S0_A4_GAL_SAT_Accumulate += float.Parse(S0_GAL_SAT[avg_count]);
                        S0_A4_GAL_CN_Accumulate += float.Parse(S0_GAL_CN[avg_count]);
                        S0_A4_BEI_SAT_Accumulate += float.Parse(S0_BEI_SAT[avg_count]);
                        S0_A4_BEI_CN_Accumulate += float.Parse(S0_BEI_CN[avg_count]);
                    }

                    S0_A4_GPS_SAT_AVG = S0_A4_GPS_SAT_Accumulate / (convert_count0 - 1);
                    S0_A4_GPS_CN_AVG = S0_A4_GPS_CN_Accumulate / (convert_count0 - 1);
                    S0_A4_GLO_SAT_AVG = S0_A4_GLO_SAT_Accumulate / (convert_count0 - 1);
                    S0_A4_GLO_CN_AVG = S0_A4_GLO_CN_Accumulate / (convert_count0 - 1);
                    S0_A4_GAL_SAT_AVG = S0_A4_GAL_SAT_Accumulate / (convert_count0 - 1);
                    S0_A4_GAL_CN_AVG = S0_A4_GAL_CN_Accumulate / (convert_count0 - 1);
                    S0_A4_BEI_SAT_AVG = S0_A4_BEI_SAT_Accumulate / (convert_count0 - 1);
                    S0_A4_BEI_CN_AVG = S0_A4_BEI_CN_Accumulate / (convert_count0 - 1);
                }
                catch
                {
                    MessageBox.Show("Can't save MDA csv,Data format is incomplete, Please delay dump time");
                }

                for (int avg_count = 2; avg_count <= convert_count0; avg_count++)
                {
                    S0_GPS_SAT[avg_count] = "0";
                    S0_GPS_CN[avg_count] = "0";
                    S0_GLO_SAT[avg_count] = "0";
                    S0_GLO_CN[avg_count] = "0";
                    S0_GAL_SAT[avg_count] = "0";
                    S0_GAL_CN[avg_count] = "0";
                    S0_BEI_SAT[avg_count] = "0";
                    S0_BEI_CN[avg_count] = "0";
                }

                fix_equal = false;

                T1_T2_item_count = 0;
                T3_T4_item_count = 0;
                T5_T6_item_count = 0;
                T7_T8_item_count = 0;
                /*
                 * S0 MDA Fix ITEM && SAT、CN AVG(Area3、4)
                 */

            }


            /**
             *  S1 TXT
             */
            if (s1chkb.Checked == true & s1fileexistflag == 1)
            {
                richTextBox3.Clear();
                richTextBox4.Clear();
                richTextBox8.Clear();
                textBox6.Clear();
                this.tabPage2.Text = textBox10.Text;

                //Initial T1~T8 Font color
                for (int initial_color = 0; initial_color < 1000; initial_color++)
                {
                    s1_mode_font_color[initial_color] = 0;
                }

                foreach (String line in File.ReadLines(open_file2_path))
                {
                    FoundMXCM10033 = line.IndexOf("$MXCM10033,2,");
                    FoundGPS_PRN = line.IndexOf("GPS_PRN:");
                    FoundGPS_SNR = line.IndexOf("GPS_SNR:");
                    FoundGLO_PRN = line.IndexOf("GLO_PRN:");
                    FoundGLO_SNR = line.IndexOf("GLO_SNR:");
                    FoundGAL_PRN = line.IndexOf("GAL_PRN:");
                    FoundGAL_SNR = line.IndexOf("GAL_SNR:");
                    FoundBEI_PRN = line.IndexOf("BEI_PRN:");
                    FoundBEI_SNR = line.IndexOf("BEI_SNR:");
                    FoundQZS_PRN = line.IndexOf("QZS_PRN:");
                    FoundQZS_SNR = line.IndexOf("QZS_SNR:");


                    if (FoundMXCM10033 != -1)
                    {
                        if (convert_count1 < 10)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox4.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s1_mode_font_color[convert_count1] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox4.SelectionColor = Color.Blue;                           //BLUE
                                s1_mode_font_color[convert_count1] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox4.SelectionColor = Color.Orange;                         //Orange
                                s1_mode_font_color[convert_count1] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox4.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s1_mode_font_color[convert_count1] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                //FixString = "●";
                                s1_fix[convert_count1] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                //FixString = "○";
                                s1_fix[convert_count1] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 64);
                            ITEM = FoundComma[2];
                            S1_ITEM[convert_count1] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 15, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 24, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time1_store[convert_count1 - 1] = UTC_TIME_;
                            if (convert_count1 > 1)
                            {
                                s1_time_subtract = time1_store[convert_count1 - 1].Subtract(time1_store[convert_count1 - 2]);
                                textBox6.AppendText(time1_store[convert_count1 - 1].ToString("HH:mm:ss") + "(Item" + convert_count1 + ")" + "  -  " + time1_store[convert_count1 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count1 - 1) + ")" + Environment.NewLine);
                                textBox6.AppendText(Environment.NewLine);
                                textBox6.AppendText((s1_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                                textBox6.AppendText(Environment.NewLine);
                                s1_interval[convert_count1] = s1_time_subtract.TotalSeconds.ToString();       //excel title interval
                            }

                            richTextBox4.AppendText(MXCM10033 + s1_fix[convert_count1] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox3.SelectionFont, richTextBox3.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox3.SelectionFont = New_Font;
                            richTextBox3.AppendText(S1_ITEM[convert_count1] + Environment.NewLine);


                            if (Analyze_UTC_time == "2024" && s1_analyze_utc_time_flag == 0)
                            {
                                s1_analyze_utc_time_flag = 1;
                                s1_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s1_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S1_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S1_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S1_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s1_Instruction_code_cmd[convert_count1] = FoundComma[0];
                            s1_Instruction_code_cmd_two[convert_count1] = FoundComma[1];
                            s1_Item[convert_count1] = FoundComma[2];
                            s1_ymd[convert_count1] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s1_hms[convert_count1] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s1_ramdom_first[convert_count1] = FoundComma[6];
                            s1_ramdom_second[convert_count1] = FoundComma[7];
                            s1_ramdom_third[convert_count1] = FoundComma[8];
                            s1_ramdom_forth[convert_count1] = FoundComma[9];
                            s1_ramdom_fiveth[convert_count1] = FoundComma[10];
                            s1_sat[convert_count1] = FoundComma[11];
                            s1_mode[convert_count1] = FoundComma[12];

                            convert_count1++;
                        }
                        else if (convert_count1 < 100)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox4.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s1_mode_font_color[convert_count1] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox4.SelectionColor = Color.Blue;                           //BLUE
                                s1_mode_font_color[convert_count1] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox4.SelectionColor = Color.Orange;                         //Orange
                                s1_mode_font_color[convert_count1] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox4.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s1_mode_font_color[convert_count1] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                //FixString = "●";
                                s1_fix[convert_count1] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                //FixString = "○";
                                s1_fix[convert_count1] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 65);
                            ITEM = FoundComma[2];
                            S1_ITEM[convert_count1] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 16, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 25, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time1_store[convert_count1 - 1] = UTC_TIME_;
                            s1_time_subtract = time1_store[convert_count1 - 1].Subtract(time1_store[convert_count1 - 2]);
                            textBox6.AppendText(time1_store[convert_count1 - 1].ToString("HH:mm:ss") + "(Item" + convert_count1 + ")" + "  -  " + time1_store[convert_count1 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count1 - 1) + ")" + Environment.NewLine);
                            textBox6.AppendText(Environment.NewLine);
                            textBox6.AppendText((s1_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                            textBox6.AppendText(Environment.NewLine);
                            s1_interval[convert_count1] = s1_time_subtract.TotalSeconds.ToString();       //excel title interval
                            richTextBox4.AppendText(MXCM10033 + s1_fix[convert_count1] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox3.SelectionFont, richTextBox3.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox3.SelectionFont = New_Font;
                            richTextBox3.AppendText(S1_ITEM[convert_count1] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s1_analyze_utc_time_flag == 0)
                            {
                                s1_analyze_utc_time_flag = 1;
                                s1_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s1_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S1_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S1_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S1_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s1_Instruction_code_cmd[convert_count1] = FoundComma[0];
                            s1_Instruction_code_cmd_two[convert_count1] = FoundComma[1];
                            s1_Item[convert_count1] = FoundComma[2];
                            s1_ymd[convert_count1] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s1_hms[convert_count1] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s1_ramdom_first[convert_count1] = FoundComma[6];
                            s1_ramdom_second[convert_count1] = FoundComma[7];
                            s1_ramdom_third[convert_count1] = FoundComma[8];
                            s1_ramdom_forth[convert_count1] = FoundComma[9];
                            s1_ramdom_fiveth[convert_count1] = FoundComma[10];
                            s1_sat[convert_count1] = FoundComma[11];
                            s1_mode[convert_count1] = FoundComma[12];

                            convert_count1++;
                        }
                        else if (convert_count1 < 1000)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox4.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s1_mode_font_color[convert_count1] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox4.SelectionColor = Color.Blue;                           //BLUE
                                s1_mode_font_color[convert_count1] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox4.SelectionColor = Color.Orange;                         //Orange
                                s1_mode_font_color[convert_count1] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox4.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s1_mode_font_color[convert_count1] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                //FixString = "●";
                                s1_fix[convert_count1] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                //FixString = "○";
                                s1_fix[convert_count1] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 66);
                            ITEM = FoundComma[2];
                            S1_ITEM[convert_count1] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 17, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 26, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time1_store[convert_count1 - 1] = UTC_TIME_;
                            s1_time_subtract = time1_store[convert_count1 - 1].Subtract(time1_store[convert_count1 - 2]);
                            textBox6.AppendText(time1_store[convert_count1 - 1].ToString("HH:mm:ss") + "(Item" + convert_count1 + ")" + "  -  " + time1_store[convert_count1 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count1 - 1) + ")" + Environment.NewLine);
                            textBox6.AppendText(Environment.NewLine);
                            textBox6.AppendText((s1_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                            textBox6.AppendText(Environment.NewLine);
                            s1_interval[convert_count1] = s1_time_subtract.TotalSeconds.ToString();       //excel title interval
                            richTextBox4.AppendText(MXCM10033 + s1_fix[convert_count1] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox3.SelectionFont, richTextBox3.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox3.SelectionFont = New_Font;
                            richTextBox3.AppendText(S1_ITEM[convert_count1] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s1_analyze_utc_time_flag == 0)
                            {
                                s1_analyze_utc_time_flag = 1;
                                s1_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s1_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S1_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S1_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S1_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s1_Instruction_code_cmd[convert_count1] = FoundComma[0];
                            s1_Instruction_code_cmd_two[convert_count1] = FoundComma[1];
                            s1_Item[convert_count1] = FoundComma[2];
                            s1_ymd[convert_count1] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s1_hms[convert_count1] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s1_ramdom_first[convert_count1] = FoundComma[6];
                            s1_ramdom_second[convert_count1] = FoundComma[7];
                            s1_ramdom_third[convert_count1] = FoundComma[8];
                            s1_ramdom_forth[convert_count1] = FoundComma[9];
                            s1_ramdom_fiveth[convert_count1] = FoundComma[10];
                            s1_sat[convert_count1] = FoundComma[11];
                            s1_mode[convert_count1] = FoundComma[12];

                            convert_count1++;
                        }

                    }

                    if (FoundGPS_PRN != -1)
                    {
                        //GPS_PRN = line;
                        S1_GPS_PRN[convert_count1 - 1] = line;
                        S1_GPS_SAT[convert_count1] = line.Substring(FoundGPS_PRN + 61);          //save GPS sat
                        richTextBox3.AppendText(S1_GPS_PRN[convert_count1 - 1] + Environment.NewLine);
                    }

                    if (FoundGPS_SNR != -1)
                    {
                        //GPS_SNR = line;
                        S1_GPS_SNR[convert_count1 - 1] = line;
                        S1_GPS_CN[convert_count1] = line.Substring(FoundGPS_SNR + 61);
                        richTextBox3.AppendText(S1_GPS_SNR[convert_count1 - 1] + Environment.NewLine);
                    }

                    if (FoundGLO_PRN != -1)
                    {
                        //GLO_PRN = line;
                        S1_GLO_PRN[convert_count1 - 1] = line;
                        S1_GLO_SAT[convert_count1] = line.Substring(FoundGLO_PRN + 61);
                        richTextBox3.AppendText(S1_GLO_PRN[convert_count1 - 1] + Environment.NewLine);
                    }

                    if (FoundGLO_SNR != -1)
                    {
                        //GLO_SNR = line;
                        S1_GLO_SNR[convert_count1 - 1] = line;
                        S1_GLO_CN[convert_count1] = line.Substring(FoundGLO_SNR + 61);
                        richTextBox3.AppendText(S1_GLO_SNR[convert_count1 - 1] + Environment.NewLine);
                    }

                    if (FoundGAL_PRN != -1)
                    {
                        //GAL_PRN = line;
                        S1_GAL_PRN[convert_count1 - 1] = line;
                        S1_GAL_SAT[convert_count1] = line.Substring(FoundGAL_PRN + 61);
                        richTextBox3.AppendText(S1_GAL_PRN[convert_count1 - 1] + Environment.NewLine);
                    }

                    if (FoundGAL_SNR != -1)
                    {
                        //GAL_SNR = line;
                        S1_GAL_SNR[convert_count1 - 1] = line;
                        S1_GAL_CN[convert_count1] = line.Substring(FoundGAL_SNR + 61);
                        richTextBox3.AppendText(S1_GAL_SNR[convert_count1 - 1] + Environment.NewLine);
                    }

                    if (FoundBEI_PRN != -1)
                    {
                        //BEI_PRN = line;
                        S1_BEI_PRN[convert_count1 - 1] = line;
                        S1_BEI_SAT[convert_count1] = line.Substring(FoundBEI_PRN + 61);
                        richTextBox3.AppendText(S1_BEI_PRN[convert_count1 - 1] + Environment.NewLine);
                    }

                    if (FoundBEI_SNR != -1)
                    {
                        //BEI_SNR = line;
                        S1_BEI_SNR[convert_count1 - 1] = line;
                        S1_BEI_CN[convert_count1] = line.Substring(FoundBEI_SNR + 61);
                        richTextBox3.AppendText(S1_BEI_SNR[convert_count1 - 1] + Environment.NewLine);
                    }

                    if (FoundQZS_PRN != -1)
                    {
                        //QZS_PRN = line;
                        S1_QZS_PRN[convert_count1 - 1] = line;
                        richTextBox3.AppendText(S1_QZS_PRN[convert_count1 - 1] + Environment.NewLine);
                    }

                    if (FoundQZS_SNR != -1)
                    {
                        //QZS_SNR = line;
                        S1_QZS_SNR[convert_count1 - 1] = line;
                        richTextBox3.AppendText(S1_QZS_SNR[convert_count1 - 1] + Environment.NewLine);
                    }


                    /*
                     * S1 MDA Fix ITEM && SAT、CN AVG(Area1、2)
                     */
                    if (fix_equal == true && s1_first_fix_flag == 0)
                    {

                        s1_first_fix_flag = 1;
                        s1_first_fix_item = (Int32.Parse(ITEM) + 1).ToString();

                        S1_T1_T2_item_fix_time = T1_T2_item_count;
                        S1_T3_T4_item_fix_time = T3_T4_item_count;
                        S1_T5_T6_item_fix_time = T5_T6_item_count;
                        S1_T7_T8_item_fix_time = T7_T8_item_count;

                        s1_TTFF_item = "TTFF Item = [" + ITEM + "]";           //first fix item(已完成)
                        s1_first_fix_previous_item = Int32.Parse(ITEM);           //fix 前一個item

                    }
                    /*
                     * S1 MDA Fix ITEM && SAT、CN AVG(Area1、2)
                     */
                }

                /*
                 * S1 MDA Fix ITEM && SAT、CN AVG(Area3、4)
                 */
                try
                {
                    //initial A1~A4 avg
                    S1_A1_GPS_SAT_Accumulate = 0;
                    S1_A1_GPS_CN_Accumulate = 0;
                    S1_A1_GLO_SAT_Accumulate = 0;
                    S1_A1_GLO_CN_Accumulate = 0;
                    S1_A1_GAL_SAT_Accumulate = 0;
                    S1_A1_GAL_CN_Accumulate = 0;
                    S1_A1_BEI_SAT_Accumulate = 0;
                    S1_A1_BEI_CN_Accumulate = 0;

                    S1_A1_GPS_SAT_AVG = 0;
                    S1_A1_GPS_CN_AVG = 0;
                    S1_A1_GLO_SAT_AVG = 0;
                    S1_A1_GLO_CN_AVG = 0;
                    S1_A1_GAL_SAT_AVG = 0;
                    S1_A1_GAL_CN_AVG = 0;
                    S1_A1_BEI_SAT_AVG = 0;
                    S1_A1_BEI_CN_AVG = 0;

                    S1_A2_GPS_SAT_Accumulate = 0;
                    S1_A2_GPS_CN_Accumulate = 0;
                    S1_A2_GLO_SAT_Accumulate = 0;
                    S1_A2_GLO_CN_Accumulate = 0;
                    S1_A2_GAL_SAT_Accumulate = 0;
                    S1_A2_GAL_CN_Accumulate = 0;
                    S1_A2_BEI_SAT_Accumulate = 0;
                    S1_A2_BEI_CN_Accumulate = 0;

                    S1_A2_GPS_SAT_AVG = 0;
                    S1_A2_GPS_CN_AVG = 0;
                    S1_A2_GLO_SAT_AVG = 0;
                    S1_A2_GLO_CN_AVG = 0;
                    S1_A2_GAL_SAT_AVG = 0;
                    S1_A2_GAL_CN_AVG = 0;
                    S1_A2_BEI_SAT_AVG = 0;
                    S1_A2_BEI_CN_AVG = 0;

                    S1_A3_GPS_SAT_Accumulate = 0;
                    S1_A3_GPS_CN_Accumulate = 0;
                    S1_A3_GLO_SAT_Accumulate = 0;
                    S1_A3_GLO_CN_Accumulate = 0;
                    S1_A3_GAL_SAT_Accumulate = 0;
                    S1_A3_GAL_CN_Accumulate = 0;
                    S1_A3_BEI_SAT_Accumulate = 0;
                    S1_A3_BEI_CN_Accumulate = 0;

                    S1_A3_GPS_SAT_AVG = 0;
                    S1_A3_GPS_CN_AVG = 0;
                    S1_A3_GLO_SAT_AVG = 0;
                    S1_A3_GLO_CN_AVG = 0;
                    S1_A3_GAL_SAT_AVG = 0;
                    S1_A3_GAL_CN_AVG = 0;
                    S1_A3_BEI_SAT_AVG = 0;
                    S1_A3_BEI_CN_AVG = 0;

                    S1_A4_GPS_SAT_Accumulate = 0;
                    S1_A4_GPS_CN_Accumulate = 0;
                    S1_A4_GLO_SAT_Accumulate = 0;
                    S1_A4_GLO_CN_Accumulate = 0;
                    S1_A4_GAL_SAT_Accumulate = 0;
                    S1_A4_GAL_CN_Accumulate = 0;
                    S1_A4_BEI_SAT_Accumulate = 0;
                    S1_A4_BEI_CN_Accumulate = 0;

                    S1_A4_GPS_SAT_AVG = 0;
                    S1_A4_GPS_CN_AVG = 0;
                    S1_A4_GLO_SAT_AVG = 0;
                    S1_A4_GLO_CN_AVG = 0;
                    S1_A4_GAL_SAT_AVG = 0;
                    S1_A4_GAL_CN_AVG = 0;
                    S1_A4_BEI_SAT_AVG = 0;
                    S1_A4_BEI_CN_AVG = 0;

                    //Area1(first to fix previous)
                    S1_Area1_stopitem = "StopItem = [" + (s1_first_fix_previous_item - 1).ToString() + "]";
                    S1_Area1_totalitem = "TotalItem = [" + (s1_first_fix_previous_item - 1).ToString() + "]";
                    for (int avg_count = 3; avg_count <= (s1_first_fix_previous_item + 1); avg_count++)
                    {
                        S1_A1_GPS_SAT_Accumulate += float.Parse(S1_GPS_SAT[avg_count]);
                        S1_A1_GPS_CN_Accumulate += float.Parse(S1_GPS_CN[avg_count]);
                        S1_A1_GLO_SAT_Accumulate += float.Parse(S1_GLO_SAT[avg_count]);
                        S1_A1_GLO_CN_Accumulate += float.Parse(S1_GLO_CN[avg_count]);
                        S1_A1_GAL_SAT_Accumulate += float.Parse(S1_GAL_SAT[avg_count]);
                        S1_A1_GAL_CN_Accumulate += float.Parse(S1_GAL_CN[avg_count]);
                        S1_A1_BEI_SAT_Accumulate += float.Parse(S1_BEI_SAT[avg_count]);
                        S1_A1_BEI_CN_Accumulate += float.Parse(S1_BEI_CN[avg_count]);
                    }

                    S1_A1_GPS_SAT_AVG = S1_A1_GPS_SAT_Accumulate / (s1_first_fix_previous_item - 1);
                    S1_A1_GPS_CN_AVG = S1_A1_GPS_CN_Accumulate / (s1_first_fix_previous_item - 1);
                    S1_A1_GLO_SAT_AVG = S1_A1_GLO_SAT_Accumulate / (s1_first_fix_previous_item - 1);
                    S1_A1_GLO_CN_AVG = S1_A1_GLO_CN_Accumulate / (s1_first_fix_previous_item - 1);
                    S1_A1_GAL_SAT_AVG = S1_A1_GAL_SAT_Accumulate / (s1_first_fix_previous_item - 1);
                    S1_A1_GAL_CN_AVG = S1_A1_GAL_CN_Accumulate / (s1_first_fix_previous_item - 1);
                    S1_A1_BEI_SAT_AVG = S1_A1_BEI_SAT_Accumulate / (s1_first_fix_previous_item - 1);
                    S1_A1_BEI_CN_AVG = S1_A1_BEI_CN_Accumulate / (s1_first_fix_previous_item - 1);


                    //Area2(first to fix)
                    S1_Area2_stopitem = "StopItem = [" + (Int32.Parse(s1_first_fix_item) - 1).ToString() + "]";
                    S1_Area2_totalitem = "TotalItem = [" + (Int32.Parse(s1_first_fix_item) - 1).ToString() + "]";
                    for (int avg_count = 3; avg_count <= (Int32.Parse(s1_first_fix_item) + 1); avg_count++)
                    {
                        S1_A2_GPS_SAT_Accumulate += float.Parse(S1_GPS_SAT[avg_count]);
                        S1_A2_GPS_CN_Accumulate += float.Parse(S1_GPS_CN[avg_count]);
                        S1_A2_GLO_SAT_Accumulate += float.Parse(S1_GLO_SAT[avg_count]);
                        S1_A2_GLO_CN_Accumulate += float.Parse(S1_GLO_CN[avg_count]);
                        S1_A2_GAL_SAT_Accumulate += float.Parse(S1_GAL_SAT[avg_count]);
                        S1_A2_GAL_CN_Accumulate += float.Parse(S1_GAL_CN[avg_count]);
                        S1_A2_BEI_SAT_Accumulate += float.Parse(S1_BEI_SAT[avg_count]);
                        S1_A2_BEI_CN_Accumulate += float.Parse(S1_BEI_CN[avg_count]);
                    }

                    S1_A2_GPS_SAT_AVG = S1_A2_GPS_SAT_Accumulate / (Int32.Parse(s1_first_fix_item) - 1);
                    S1_A2_GPS_CN_AVG = S1_A2_GPS_CN_Accumulate / (Int32.Parse(s1_first_fix_item) - 1);
                    S1_A2_GLO_SAT_AVG = S1_A2_GLO_SAT_Accumulate / (Int32.Parse(s1_first_fix_item) - 1);
                    S1_A2_GLO_CN_AVG = S1_A2_GLO_CN_Accumulate / (Int32.Parse(s1_first_fix_item) - 1);
                    S1_A2_GAL_SAT_AVG = S1_A2_GAL_SAT_Accumulate / (Int32.Parse(s1_first_fix_item) - 1);
                    S1_A2_GAL_CN_AVG = S1_A2_GAL_CN_Accumulate / (Int32.Parse(s1_first_fix_item) - 1);
                    S1_A2_BEI_SAT_AVG = S1_A2_BEI_SAT_Accumulate / (Int32.Parse(s1_first_fix_item) - 1);
                    S1_A2_BEI_CN_AVG = S1_A2_BEI_CN_Accumulate / (Int32.Parse(s1_first_fix_item) - 1);

                    //Area3(fix to last)
                    S1_Area3_startitem = "StartItem = [" + (Int32.Parse(s1_first_fix_item) - 1) + "]";
                    S1_Area3_stopitem = "StopItem = [" + (convert_count1 - 1).ToString() + "]";
                    S1_Area3_totalitem = "TotalItem = [" + (convert_count1 - Int32.Parse(s1_first_fix_item) + 1).ToString() + "]";
                    for (int avg_count = (Int32.Parse(s1_first_fix_item) + 1); avg_count <= convert_count1; avg_count++)
                    {
                        S1_A3_GPS_SAT_Accumulate += float.Parse(S1_GPS_SAT[avg_count]);
                        S1_A3_GPS_CN_Accumulate += float.Parse(S1_GPS_CN[avg_count]);
                        S1_A3_GLO_SAT_Accumulate += float.Parse(S1_GLO_SAT[avg_count]);
                        S1_A3_GLO_CN_Accumulate += float.Parse(S1_GLO_CN[avg_count]);
                        S1_A3_GAL_SAT_Accumulate += float.Parse(S1_GAL_SAT[avg_count]);
                        S1_A3_GAL_CN_Accumulate += float.Parse(S1_GAL_CN[avg_count]);
                        S1_A3_BEI_SAT_Accumulate += float.Parse(S1_BEI_SAT[avg_count]);
                        S1_A3_BEI_CN_Accumulate += float.Parse(S1_BEI_CN[avg_count]);
                    }

                    S1_A3_GPS_SAT_AVG = S1_A3_GPS_SAT_Accumulate / (convert_count1 - Int32.Parse(s1_first_fix_item) + 1);
                    S1_A3_GPS_CN_AVG = S1_A3_GPS_CN_Accumulate / (convert_count1 - Int32.Parse(s1_first_fix_item) + 1);
                    S1_A3_GLO_SAT_AVG = S1_A3_GLO_SAT_Accumulate / (convert_count1 - Int32.Parse(s1_first_fix_item) + 1);
                    S1_A3_GLO_CN_AVG = S1_A3_GLO_CN_Accumulate / (convert_count1 - Int32.Parse(s1_first_fix_item) + 1);
                    S1_A3_GAL_SAT_AVG = S1_A3_GAL_SAT_Accumulate / (convert_count1 - Int32.Parse(s1_first_fix_item) + 1);
                    S1_A3_GAL_CN_AVG = S1_A3_GAL_CN_Accumulate / (convert_count1 - Int32.Parse(s1_first_fix_item) + 1);
                    S1_A3_BEI_SAT_AVG = S1_A3_BEI_SAT_Accumulate / (convert_count1 - Int32.Parse(s1_first_fix_item) + 1);
                    S1_A3_BEI_CN_AVG = S1_A3_BEI_CN_Accumulate / (convert_count1 - Int32.Parse(s1_first_fix_item) + 1);

                    //Area4(first to last)
                    S1_Area4_stopitem = "StopItem = [" + (convert_count1 - 1).ToString() + "]";
                    S1_Area4_totalitem = "TotalItem = [" + (convert_count1 - 1).ToString() + "]";
                    for (int avg_count = 2; avg_count <= convert_count1; avg_count++)
                    {
                        S1_A4_GPS_SAT_Accumulate += float.Parse(S1_GPS_SAT[avg_count]);
                        S1_A4_GPS_CN_Accumulate += float.Parse(S1_GPS_CN[avg_count]);
                        S1_A4_GLO_SAT_Accumulate += float.Parse(S1_GLO_SAT[avg_count]);
                        S1_A4_GLO_CN_Accumulate += float.Parse(S1_GLO_CN[avg_count]);
                        S1_A4_GAL_SAT_Accumulate += float.Parse(S1_GAL_SAT[avg_count]);
                        S1_A4_GAL_CN_Accumulate += float.Parse(S1_GAL_CN[avg_count]);
                        S1_A4_BEI_SAT_Accumulate += float.Parse(S1_BEI_SAT[avg_count]);
                        S1_A4_BEI_CN_Accumulate += float.Parse(S1_BEI_CN[avg_count]);
                    }

                    S1_A4_GPS_SAT_AVG = S1_A4_GPS_SAT_Accumulate / (convert_count1 - 1);
                    S1_A4_GPS_CN_AVG = S1_A4_GPS_CN_Accumulate / (convert_count1 - 1);
                    S1_A4_GLO_SAT_AVG = S1_A4_GLO_SAT_Accumulate / (convert_count1 - 1);
                    S1_A4_GLO_CN_AVG = S1_A4_GLO_CN_Accumulate / (convert_count1 - 1);
                    S1_A4_GAL_SAT_AVG = S1_A4_GAL_SAT_Accumulate / (convert_count1 - 1);
                    S1_A4_GAL_CN_AVG = S1_A4_GAL_CN_Accumulate / (convert_count1 - 1);
                    S1_A4_BEI_SAT_AVG = S1_A4_BEI_SAT_Accumulate / (convert_count1 - 1);
                    S1_A4_BEI_CN_AVG = S1_A4_BEI_CN_Accumulate / (convert_count1 - 1);
                }
                catch
                {
                    MessageBox.Show("Can't save MDA csv,Data format is incomplete, Please delay dump time");
                }

                for (int avg_count = 2; avg_count <= convert_count1; avg_count++)
                {
                    S1_GPS_SAT[avg_count] = "0";
                    S1_GPS_CN[avg_count] = "0";
                    S1_GLO_SAT[avg_count] = "0";
                    S1_GLO_CN[avg_count] = "0";
                    S1_GAL_SAT[avg_count] = "0";
                    S1_GAL_CN[avg_count] = "0";
                    S1_BEI_SAT[avg_count] = "0";
                    S1_BEI_CN[avg_count] = "0";
                }

                fix_equal = false;

                T1_T2_item_count = 0;
                T3_T4_item_count = 0;
                T5_T6_item_count = 0;
                T7_T8_item_count = 0;
                /*
                 * S1 MDA Fix ITEM && SAT、CN AVG(Area3、4)
                 */
            }


            /**
             *  S2 TXT
             */
            if (s2chkb.Checked == true & s2fileexistflag == 1)
            {
                richTextBox5.Clear();
                richTextBox6.Clear();
                richTextBox11.Clear();
                textBox7.Clear();
                this.tabPage3.Text = textBox11.Text;

                //Initial T1~T8 Font color
                for (int initial_color = 0; initial_color < 1000; initial_color++)
                {
                    s2_mode_font_color[initial_color] = 0;
                }

                foreach (String line in File.ReadLines(open_file3_path))
                {
                    FoundMXCM10033 = line.IndexOf("$MXCM10033,2,");
                    FoundGPS_PRN = line.IndexOf("GPS_PRN:");
                    FoundGPS_SNR = line.IndexOf("GPS_SNR:");
                    FoundGLO_PRN = line.IndexOf("GLO_PRN:");
                    FoundGLO_SNR = line.IndexOf("GLO_SNR:");
                    FoundGAL_PRN = line.IndexOf("GAL_PRN:");
                    FoundGAL_SNR = line.IndexOf("GAL_SNR:");
                    FoundBEI_PRN = line.IndexOf("BEI_PRN:");
                    FoundBEI_SNR = line.IndexOf("BEI_SNR:");
                    FoundQZS_PRN = line.IndexOf("QZS_PRN:");
                    FoundQZS_SNR = line.IndexOf("QZS_SNR:");

                    //FoundF10 = line.IndexOf(",F1");
                    //FoundF20 = line.IndexOf(",F2");
                    //FoundF40 = line.IndexOf(",F4");
                    //FoundF50 = line.IndexOf(",F5");

                    //Found810 = line.IndexOf(",81");
                    //Found820 = line.IndexOf(",82");
                    //Found840 = line.IndexOf(",84");
                    //Found850 = line.IndexOf(",85");

                    //FoundC10 = line.IndexOf(",C1");
                    //FoundC20 = line.IndexOf(",C2");
                    //FoundC40 = line.IndexOf(",C4");
                    //FoundC50 = line.IndexOf(",C5");

                    //FoundA10 = line.IndexOf(",A1");
                    //FoundA20 = line.IndexOf(",A2");
                    //FoundA40 = line.IndexOf(",A4");
                    //FoundA50 = line.IndexOf(",A5");

                    //Found910 = line.IndexOf(",91");
                    //Found920 = line.IndexOf(",92");
                    //Found940 = line.IndexOf(",94");
                    //Found950 = line.IndexOf(",95");

                    //if (FoundF10 != -1 || Found810 != -1 || FoundC10 != -1 || FoundA10 != -1 || Found910 != -1)                                                     //T1, T2
                    //{
                    //    richTextBox6.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                    //    s2_mode_font_color[convert_count2] = 1;
                    //    T1_T2_item_count++;
                    //}

                    //if (FoundF20 != -1 || Found820 != -1 || FoundC20 != -1 || FoundA20 != -1 || Found920 != -1)                                                     //T3, T4
                    //{
                    //    richTextBox6.SelectionColor = Color.Blue;                           //BLUE
                    //    s2_mode_font_color[convert_count2] = 2;
                    //    T3_T4_item_count++;
                    //}

                    //if (FoundF40 != -1 || Found840 != -1 || FoundC40 != -1 || FoundA40 != -1 || Found940 != -1)                                                     //Dynamic
                    //{
                    //    richTextBox6.SelectionColor = Color.Orange;                         //Orange
                    //    s2_mode_font_color[convert_count2] = 3;
                    //    T5_T6_item_count++;
                    //}

                    //if (FoundF50 != -1 || Found850 != -1 || FoundC50 != -1 || FoundA50 != -1 || Found950 != -1)                                                     //Geofencing
                    //{
                    //    richTextBox6.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                    //    s2_mode_font_color[convert_count2] = 4;
                    //    T7_T8_item_count++;
                    //}

                    if (FoundMXCM10033 != -1)
                    {

                        if (convert_count2 < 10)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox6.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s2_mode_font_color[convert_count2] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox6.SelectionColor = Color.Blue;                           //BLUE
                                s2_mode_font_color[convert_count2] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox6.SelectionColor = Color.Orange;                         //Orange
                                s2_mode_font_color[convert_count2] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox6.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s2_mode_font_color[convert_count2] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                //FixString = "●";
                                s2_fix[convert_count2] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                //FixString = "○";
                                s2_fix[convert_count2] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 64);
                            ITEM = FoundComma[2];
                            S2_ITEM[convert_count2] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 15, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 24, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time2_store[convert_count2 - 1] = UTC_TIME_;
                            if (convert_count2 > 1)
                            {
                                s2_time_subtract = time2_store[convert_count2 - 1].Subtract(time2_store[convert_count2 - 2]);
                                textBox7.AppendText(time2_store[convert_count2 - 1].ToString("HH:mm:ss") + "(Item" + convert_count2 + ")" + "  -  " + time2_store[convert_count2 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count2 - 1) + ")" + Environment.NewLine);
                                textBox7.AppendText(Environment.NewLine);
                                textBox7.AppendText((s2_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                                textBox7.AppendText(Environment.NewLine);
                                s2_interval[convert_count2] = s2_time_subtract.TotalSeconds.ToString();       //excel title interval
                            }

                            richTextBox6.AppendText(MXCM10033 + s2_fix[convert_count2] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox5.SelectionFont, richTextBox5.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox5.SelectionFont = New_Font;
                            richTextBox5.AppendText(S2_ITEM[convert_count2] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s2_analyze_utc_time_flag == 0)
                            {
                                s2_analyze_utc_time_flag = 1;
                                s2_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s2_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S2_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S2_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S2_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s2_Instruction_code_cmd[convert_count2] = FoundComma[0];
                            s2_Instruction_code_cmd_two[convert_count2] = FoundComma[1];
                            s2_Item[convert_count2] = FoundComma[2];
                            s2_ymd[convert_count2] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s2_hms[convert_count2] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s2_ramdom_first[convert_count2] = FoundComma[6];
                            s2_ramdom_second[convert_count2] = FoundComma[7];
                            s2_ramdom_third[convert_count2] = FoundComma[8];
                            s2_ramdom_forth[convert_count2] = FoundComma[9];
                            s2_ramdom_fiveth[convert_count2] = FoundComma[10];
                            s2_sat[convert_count2] = FoundComma[11];
                            s2_mode[convert_count2] = FoundComma[12];

                            convert_count2++;
                        }
                        else if (convert_count2 < 100)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox6.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s2_mode_font_color[convert_count2] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox6.SelectionColor = Color.Blue;                           //BLUE
                                s2_mode_font_color[convert_count2] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox6.SelectionColor = Color.Orange;                         //Orange
                                s2_mode_font_color[convert_count2] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox6.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s2_mode_font_color[convert_count2] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                //FixString = "●";
                                s2_fix[convert_count2] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                //FixString = "○";
                                s2_fix[convert_count2] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 65);
                            ITEM = FoundComma[2];
                            S2_ITEM[convert_count2] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 16, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 25, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time2_store[convert_count2 - 1] = UTC_TIME_;
                            s2_time_subtract = time2_store[convert_count2 - 1].Subtract(time2_store[convert_count2 - 2]);
                            textBox7.AppendText(time2_store[convert_count2 - 1].ToString("HH:mm:ss") + "(Item" + convert_count2 + ")" + "  -  " + time2_store[convert_count2 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count2 - 1) + ")" + Environment.NewLine);
                            textBox7.AppendText(Environment.NewLine);
                            textBox7.AppendText((s2_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                            textBox7.AppendText(Environment.NewLine);
                            s2_interval[convert_count2] = s2_time_subtract.TotalSeconds.ToString();       //excel title interval
                            richTextBox6.AppendText(MXCM10033 + s2_fix[convert_count2] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox5.SelectionFont, richTextBox5.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox5.SelectionFont = New_Font;
                            richTextBox5.AppendText(S2_ITEM[convert_count2] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s2_analyze_utc_time_flag == 0)
                            {
                                s2_analyze_utc_time_flag = 1;
                                s2_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s2_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S2_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S2_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S2_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s2_Instruction_code_cmd[convert_count2] = FoundComma[0];
                            s2_Instruction_code_cmd_two[convert_count2] = FoundComma[1];
                            s2_Item[convert_count2] = FoundComma[2];
                            s2_ymd[convert_count2] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s2_hms[convert_count2] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s2_ramdom_first[convert_count2] = FoundComma[6];
                            s2_ramdom_second[convert_count2] = FoundComma[7];
                            s2_ramdom_third[convert_count2] = FoundComma[8];
                            s2_ramdom_forth[convert_count2] = FoundComma[9];
                            s2_ramdom_fiveth[convert_count2] = FoundComma[10];
                            s2_sat[convert_count2] = FoundComma[11];
                            s2_mode[convert_count2] = FoundComma[12];

                            convert_count2++;
                        }
                        else if (convert_count2 < 1000)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox6.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s2_mode_font_color[convert_count2] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox6.SelectionColor = Color.Blue;                           //BLUE
                                s2_mode_font_color[convert_count2] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox6.SelectionColor = Color.Orange;                         //Orange
                                s2_mode_font_color[convert_count2] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox6.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s2_mode_font_color[convert_count2] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                //FixString = "●";
                                s2_fix[convert_count2] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                //FixString = "○";
                                s2_fix[convert_count2] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 66);
                            ITEM = FoundComma[2];
                            S2_ITEM[convert_count2] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 17, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 26, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time2_store[convert_count2 - 1] = UTC_TIME_;
                            s2_time_subtract = time2_store[convert_count2 - 1].Subtract(time2_store[convert_count2 - 2]);
                            textBox7.AppendText(time2_store[convert_count2 - 1].ToString("HH:mm:ss") + "(Item" + convert_count2 + ")" + "  -  " + time2_store[convert_count2 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count2 - 1) + ")" + Environment.NewLine);
                            textBox7.AppendText(Environment.NewLine);
                            textBox7.AppendText((s2_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                            textBox7.AppendText(Environment.NewLine);
                            s2_interval[convert_count2] = s2_time_subtract.TotalSeconds.ToString();       //excel title interval
                            richTextBox6.AppendText(MXCM10033 + s2_fix[convert_count2] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox5.SelectionFont, richTextBox5.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox5.SelectionFont = New_Font;
                            richTextBox5.AppendText(S2_ITEM[convert_count2] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s2_analyze_utc_time_flag == 0)
                            {
                                s2_analyze_utc_time_flag = 1;
                                s2_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s2_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S2_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S2_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S2_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s2_Instruction_code_cmd[convert_count2] = FoundComma[0];
                            s2_Instruction_code_cmd_two[convert_count2] = FoundComma[1];
                            s2_Item[convert_count2] = FoundComma[2];
                            s2_ymd[convert_count2] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s2_hms[convert_count2] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s2_ramdom_first[convert_count2] = FoundComma[6];
                            s2_ramdom_second[convert_count2] = FoundComma[7];
                            s2_ramdom_third[convert_count2] = FoundComma[8];
                            s2_ramdom_forth[convert_count2] = FoundComma[9];
                            s2_ramdom_fiveth[convert_count2] = FoundComma[10];
                            s2_sat[convert_count2] = FoundComma[11];
                            s2_mode[convert_count2] = FoundComma[12];

                            convert_count2++;
                        }

                    }

                    if (FoundGPS_PRN != -1)
                    {
                        //GPS_PRN = line;
                        S2_GPS_PRN[convert_count2 - 1] = line;
                        S2_GPS_SAT[convert_count2] = line.Substring(FoundGPS_PRN + 61);          //save GPS sat
                        richTextBox5.AppendText(S2_GPS_PRN[convert_count2 - 1] + Environment.NewLine);
                    }

                    if (FoundGPS_SNR != -1)
                    {
                        //GPS_SNR = line;
                        S2_GPS_SNR[convert_count2 - 1] = line;
                        S2_GPS_CN[convert_count2] = line.Substring(FoundGPS_SNR + 61);
                        richTextBox5.AppendText(S2_GPS_SNR[convert_count2 - 1] + Environment.NewLine);
                    }

                    if (FoundGLO_PRN != -1)
                    {
                        //GLO_PRN = line;
                        S2_GLO_PRN[convert_count2 - 1] = line;
                        S2_GLO_SAT[convert_count2] = line.Substring(FoundGLO_PRN + 61);
                        richTextBox5.AppendText(S2_GLO_PRN[convert_count2 - 1] + Environment.NewLine);
                    }

                    if (FoundGLO_SNR != -1)
                    {
                        //GLO_SNR = line;
                        S2_GLO_SNR[convert_count2 - 1] = line;
                        S2_GLO_CN[convert_count2] = line.Substring(FoundGLO_SNR + 61);
                        richTextBox5.AppendText(S2_GLO_SNR[convert_count2 - 1] + Environment.NewLine);
                    }

                    if (FoundGAL_PRN != -1)
                    {
                        //GAL_PRN = line;
                        S2_GAL_PRN[convert_count2 - 1] = line;
                        S2_GAL_SAT[convert_count2] = line.Substring(FoundGAL_PRN + 61);
                        richTextBox5.AppendText(S2_GAL_PRN[convert_count2 - 1] + Environment.NewLine);
                    }

                    if (FoundGAL_SNR != -1)
                    {
                        //GAL_SNR = line;
                        S2_GAL_SNR[convert_count2 - 1] = line;
                        S2_GAL_CN[convert_count2] = line.Substring(FoundGAL_SNR + 61);
                        richTextBox5.AppendText(S2_GAL_SNR[convert_count2 - 1] + Environment.NewLine);
                    }

                    if (FoundBEI_PRN != -1)
                    {
                        //BEI_PRN = line;
                        S2_BEI_PRN[convert_count2 - 1] = line;
                        S2_BEI_SAT[convert_count2] = line.Substring(FoundBEI_PRN + 61);
                        richTextBox5.AppendText(S2_BEI_PRN[convert_count2 - 1] + Environment.NewLine);
                    }

                    if (FoundBEI_SNR != -1)
                    {
                        //BEI_SNR = line;
                        S2_BEI_SNR[convert_count2 - 1] = line;
                        S2_BEI_CN[convert_count2] = line.Substring(FoundBEI_SNR + 61);
                        richTextBox5.AppendText(S2_BEI_SNR[convert_count2 - 1] + Environment.NewLine);
                    }

                    if (FoundQZS_PRN != -1)
                    {
                        //QZS_PRN = line;
                        S2_QZS_PRN[convert_count2 - 1] = line;
                        richTextBox5.AppendText(S2_QZS_PRN[convert_count2 - 1] + Environment.NewLine);
                    }

                    if (FoundQZS_SNR != -1)
                    {
                        //QZS_SNR = line;
                        S2_QZS_SNR[convert_count2 - 1] = line;
                        richTextBox5.AppendText(S2_QZS_SNR[convert_count2 - 1] + Environment.NewLine);
                    }

                    /*
                     * S2 MDA Fix ITEM && SAT、CN AVG(Area1、2)
                     */
                    if (fix_equal == true && s2_first_fix_flag == 0)
                    {
                        s2_first_fix_flag = 1;
                        s2_first_fix_item = (Int32.Parse(ITEM) + 1).ToString();

                        S2_T1_T2_item_fix_time = T1_T2_item_count;
                        S2_T3_T4_item_fix_time = T3_T4_item_count;
                        S2_T5_T6_item_fix_time = T5_T6_item_count;
                        S2_T7_T8_item_fix_time = T7_T8_item_count;

                        s2_TTFF_item = "TTFF Item = [" + ITEM + "]";           //first fix item(已完成)
                        s2_first_fix_previous_item = Int32.Parse(ITEM);           //fix 前一個item
                    }
                    /*
                     * S2 MDA Fix ITEM && SAT、CN AVG(Area1、2)
                     */
                }

                /*
                 * S2 MDA Fix ITEM && SAT、CN AVG(Area3、4)
                 */
                try
                {
                    //initial A1~A4 avg
                    S2_A1_GPS_SAT_Accumulate = 0;
                    S2_A1_GPS_CN_Accumulate = 0;
                    S2_A1_GLO_SAT_Accumulate = 0;
                    S2_A1_GLO_CN_Accumulate = 0;
                    S2_A1_GAL_SAT_Accumulate = 0;
                    S2_A1_GAL_CN_Accumulate = 0;
                    S2_A1_BEI_SAT_Accumulate = 0;
                    S2_A1_BEI_CN_Accumulate = 0;

                    S2_A1_GPS_SAT_AVG = 0;
                    S2_A1_GPS_CN_AVG = 0;
                    S2_A1_GLO_SAT_AVG = 0;
                    S2_A1_GLO_CN_AVG = 0;
                    S2_A1_GAL_SAT_AVG = 0;
                    S2_A1_GAL_CN_AVG = 0;
                    S2_A1_BEI_SAT_AVG = 0;
                    S2_A1_BEI_CN_AVG = 0;

                    S2_A2_GPS_SAT_Accumulate = 0;
                    S2_A2_GPS_CN_Accumulate = 0;
                    S2_A2_GLO_SAT_Accumulate = 0;
                    S2_A2_GLO_CN_Accumulate = 0;
                    S2_A2_GAL_SAT_Accumulate = 0;
                    S2_A2_GAL_CN_Accumulate = 0;
                    S2_A2_BEI_SAT_Accumulate = 0;
                    S2_A2_BEI_CN_Accumulate = 0;

                    S2_A2_GPS_SAT_AVG = 0;
                    S2_A2_GPS_CN_AVG = 0;
                    S2_A2_GLO_SAT_AVG = 0;
                    S2_A2_GLO_CN_AVG = 0;
                    S2_A2_GAL_SAT_AVG = 0;
                    S2_A2_GAL_CN_AVG = 0;
                    S2_A2_BEI_SAT_AVG = 0;
                    S2_A2_BEI_CN_AVG = 0;

                    S2_A3_GPS_SAT_Accumulate = 0;
                    S2_A3_GPS_CN_Accumulate = 0;
                    S2_A3_GLO_SAT_Accumulate = 0;
                    S2_A3_GLO_CN_Accumulate = 0;
                    S2_A3_GAL_SAT_Accumulate = 0;
                    S2_A3_GAL_CN_Accumulate = 0;
                    S2_A3_BEI_SAT_Accumulate = 0;
                    S2_A3_BEI_CN_Accumulate = 0;

                    S2_A3_GPS_SAT_AVG = 0;
                    S2_A3_GPS_CN_AVG = 0;
                    S2_A3_GLO_SAT_AVG = 0;
                    S2_A3_GLO_CN_AVG = 0;
                    S2_A3_GAL_SAT_AVG = 0;
                    S2_A3_GAL_CN_AVG = 0;
                    S2_A3_BEI_SAT_AVG = 0;
                    S2_A3_BEI_CN_AVG = 0;

                    S2_A4_GPS_SAT_Accumulate = 0;
                    S2_A4_GPS_CN_Accumulate = 0;
                    S2_A4_GLO_SAT_Accumulate = 0;
                    S2_A4_GLO_CN_Accumulate = 0;
                    S2_A4_GAL_SAT_Accumulate = 0;
                    S2_A4_GAL_CN_Accumulate = 0;
                    S2_A4_BEI_SAT_Accumulate = 0;
                    S2_A4_BEI_CN_Accumulate = 0;

                    S2_A4_GPS_SAT_AVG = 0;
                    S2_A4_GPS_CN_AVG = 0;
                    S2_A4_GLO_SAT_AVG = 0;
                    S2_A4_GLO_CN_AVG = 0;
                    S2_A4_GAL_SAT_AVG = 0;
                    S2_A4_GAL_CN_AVG = 0;
                    S2_A4_BEI_SAT_AVG = 0;
                    S2_A4_BEI_CN_AVG = 0;

                    //Area1(first to fix previous)
                    S2_Area1_stopitem = "StopItem = [" + (s2_first_fix_previous_item - 1).ToString() + "]";
                    S2_Area1_totalitem = "TotalItem = [" + (s2_first_fix_previous_item - 1).ToString() + "]";
                    for (int avg_count = 3; avg_count <= (s2_first_fix_previous_item + 1); avg_count++)
                    {
                        S2_A1_GPS_SAT_Accumulate += float.Parse(S2_GPS_SAT[avg_count]);
                        S2_A1_GPS_CN_Accumulate += float.Parse(S2_GPS_CN[avg_count]);
                        S2_A1_GLO_SAT_Accumulate += float.Parse(S2_GLO_SAT[avg_count]);
                        S2_A1_GLO_CN_Accumulate += float.Parse(S2_GLO_CN[avg_count]);
                        S2_A1_GAL_SAT_Accumulate += float.Parse(S2_GAL_SAT[avg_count]);
                        S2_A1_GAL_CN_Accumulate += float.Parse(S2_GAL_CN[avg_count]);
                        S2_A1_BEI_SAT_Accumulate += float.Parse(S2_BEI_SAT[avg_count]);
                        S2_A1_BEI_CN_Accumulate += float.Parse(S2_BEI_CN[avg_count]);
                    }

                    S2_A1_GPS_SAT_AVG = S2_A1_GPS_SAT_Accumulate / (s2_first_fix_previous_item - 1);
                    S2_A1_GPS_CN_AVG = S2_A1_GPS_CN_Accumulate / (s2_first_fix_previous_item - 1);
                    S2_A1_GLO_SAT_AVG = S2_A1_GLO_SAT_Accumulate / (s2_first_fix_previous_item - 1);
                    S2_A1_GLO_CN_AVG = S2_A1_GLO_CN_Accumulate / (s2_first_fix_previous_item - 1);
                    S2_A1_GAL_SAT_AVG = S2_A1_GAL_SAT_Accumulate / (s2_first_fix_previous_item - 1);
                    S2_A1_GAL_CN_AVG = S2_A1_GAL_CN_Accumulate / (s2_first_fix_previous_item - 1);
                    S2_A1_BEI_SAT_AVG = S2_A1_BEI_SAT_Accumulate / (s2_first_fix_previous_item - 1);
                    S2_A1_BEI_CN_AVG = S2_A1_BEI_CN_Accumulate / (s2_first_fix_previous_item - 1);

                    //Area2(first to fix)
                    S2_Area2_stopitem = "StopItem = [" + (Int32.Parse(s2_first_fix_item) - 1).ToString() + "]";
                    S2_Area2_totalitem = "TotalItem = [" + (Int32.Parse(s2_first_fix_item) - 1).ToString() + "]";
                    for (int avg_count = 3; avg_count <= (Int32.Parse(s2_first_fix_item) + 1); avg_count++)
                    {
                        S2_A2_GPS_SAT_Accumulate += float.Parse(S2_GPS_SAT[avg_count]);
                        S2_A2_GPS_CN_Accumulate += float.Parse(S2_GPS_CN[avg_count]);
                        S2_A2_GLO_SAT_Accumulate += float.Parse(S2_GLO_SAT[avg_count]);
                        S2_A2_GLO_CN_Accumulate += float.Parse(S2_GLO_CN[avg_count]);
                        S2_A2_GAL_SAT_Accumulate += float.Parse(S2_GAL_SAT[avg_count]);
                        S2_A2_GAL_CN_Accumulate += float.Parse(S2_GAL_CN[avg_count]);
                        S2_A2_BEI_SAT_Accumulate += float.Parse(S2_BEI_SAT[avg_count]);
                        S2_A2_BEI_CN_Accumulate += float.Parse(S2_BEI_CN[avg_count]);
                    }

                    S2_A2_GPS_SAT_AVG = S2_A2_GPS_SAT_Accumulate / (Int32.Parse(s2_first_fix_item) - 1);
                    S2_A2_GPS_CN_AVG = S2_A2_GPS_CN_Accumulate / (Int32.Parse(s2_first_fix_item) - 1);
                    S2_A2_GLO_SAT_AVG = S2_A2_GLO_SAT_Accumulate / (Int32.Parse(s2_first_fix_item) - 1);
                    S2_A2_GLO_CN_AVG = S2_A2_GLO_CN_Accumulate / (Int32.Parse(s2_first_fix_item) - 1);
                    S2_A2_GAL_SAT_AVG = S2_A2_GAL_SAT_Accumulate / (Int32.Parse(s2_first_fix_item) - 1);
                    S2_A2_GAL_CN_AVG = S2_A2_GAL_CN_Accumulate / (Int32.Parse(s2_first_fix_item) - 1);
                    S2_A2_BEI_SAT_AVG = S2_A2_BEI_SAT_Accumulate / (Int32.Parse(s2_first_fix_item) - 1);
                    S2_A2_BEI_CN_AVG = S2_A2_BEI_CN_Accumulate / (Int32.Parse(s2_first_fix_item) - 1);

                    //Area3(fix to last)
                    S2_Area3_startitem = "StartItem = [" + (Int32.Parse(s2_first_fix_item) - 1).ToString() + "]";
                    S2_Area3_stopitem = "StopItem = [" + (convert_count2 - 1).ToString() + "]";
                    S2_Area3_totalitem = "TotalItem = [" + (convert_count2 - Int32.Parse(s2_first_fix_item) + 1).ToString() + "]";
                    for (int avg_count = (Int32.Parse(s2_first_fix_item) + 1); avg_count <= convert_count2; avg_count++)
                    {
                        S2_A3_GPS_SAT_Accumulate += float.Parse(S2_GPS_SAT[avg_count]);
                        S2_A3_GPS_CN_Accumulate += float.Parse(S2_GPS_CN[avg_count]);
                        S2_A3_GLO_SAT_Accumulate += float.Parse(S2_GLO_SAT[avg_count]);
                        S2_A3_GLO_CN_Accumulate += float.Parse(S2_GLO_CN[avg_count]);
                        S2_A3_GAL_SAT_Accumulate += float.Parse(S2_GAL_SAT[avg_count]);
                        S2_A3_GAL_CN_Accumulate += float.Parse(S2_GAL_CN[avg_count]);
                        S2_A3_BEI_SAT_Accumulate += float.Parse(S2_BEI_SAT[avg_count]);
                        S2_A3_BEI_CN_Accumulate += float.Parse(S2_BEI_CN[avg_count]);
                    }

                    S2_A3_GPS_SAT_AVG = S2_A3_GPS_SAT_Accumulate / (convert_count2 - Int32.Parse(s2_first_fix_item) + 1);
                    S2_A3_GPS_CN_AVG = S2_A3_GPS_CN_Accumulate / (convert_count2 - Int32.Parse(s2_first_fix_item) + 1);
                    S2_A3_GLO_SAT_AVG = S2_A3_GLO_SAT_Accumulate / (convert_count2 - Int32.Parse(s2_first_fix_item) + 1);
                    S2_A3_GLO_CN_AVG = S2_A3_GLO_CN_Accumulate / (convert_count2 - Int32.Parse(s2_first_fix_item) + 1);
                    S2_A3_GAL_SAT_AVG = S2_A3_GAL_SAT_Accumulate / (convert_count2 - Int32.Parse(s2_first_fix_item) + 1);
                    S2_A3_GAL_CN_AVG = S2_A3_GAL_CN_Accumulate / (convert_count2 - Int32.Parse(s2_first_fix_item) + 1);
                    S2_A3_BEI_SAT_AVG = S2_A3_BEI_SAT_Accumulate / (convert_count2 - Int32.Parse(s2_first_fix_item) + 1);
                    S2_A3_BEI_CN_AVG = S2_A3_BEI_CN_Accumulate / (convert_count2 - Int32.Parse(s2_first_fix_item) + 1);

                    //Area4(first to last)
                    S2_Area4_stopitem = "StopItem = [" + (convert_count2 - 1).ToString() + "]";
                    S2_Area4_totalitem = "TotalItem = [" + (convert_count2 - 1).ToString() + "]";
                    for (int avg_count = 2; avg_count <= convert_count2; avg_count++)
                    {
                        S2_A4_GPS_SAT_Accumulate += float.Parse(S2_GPS_SAT[avg_count]);
                        S2_A4_GPS_CN_Accumulate += float.Parse(S2_GPS_CN[avg_count]);
                        S2_A4_GLO_SAT_Accumulate += float.Parse(S2_GLO_SAT[avg_count]);
                        S2_A4_GLO_CN_Accumulate += float.Parse(S2_GLO_CN[avg_count]);
                        S2_A4_GAL_SAT_Accumulate += float.Parse(S2_GAL_SAT[avg_count]);
                        S2_A4_GAL_CN_Accumulate += float.Parse(S2_GAL_CN[avg_count]);
                        S2_A4_BEI_SAT_Accumulate += float.Parse(S2_BEI_SAT[avg_count]);
                        S2_A4_BEI_CN_Accumulate += float.Parse(S2_BEI_CN[avg_count]);
                    }

                    S2_A4_GPS_SAT_AVG = S2_A4_GPS_SAT_Accumulate / (convert_count2 - 1);
                    S2_A4_GPS_CN_AVG = S2_A4_GPS_CN_Accumulate / (convert_count2 - 1);
                    S2_A4_GLO_SAT_AVG = S2_A4_GLO_SAT_Accumulate / (convert_count2 - 1);
                    S2_A4_GLO_CN_AVG = S2_A4_GLO_CN_Accumulate / (convert_count2 - 1);
                    S2_A4_GAL_SAT_AVG = S2_A4_GAL_SAT_Accumulate / (convert_count2 - 1);
                    S2_A4_GAL_CN_AVG = S2_A4_GAL_CN_Accumulate / (convert_count2 - 1);
                    S2_A4_BEI_SAT_AVG = S2_A4_BEI_SAT_Accumulate / (convert_count2 - 1);
                    S2_A4_BEI_CN_AVG = S2_A4_BEI_CN_Accumulate / (convert_count2 - 1);
                }
                catch
                {
                    MessageBox.Show("Can't save MDA csv,Data format is incomplete, Please delay dump time");
                }

                for (int avg_count = 2; avg_count <= convert_count2; avg_count++)
                {
                    S2_GPS_SAT[avg_count] = "0";
                    S2_GPS_CN[avg_count] = "0";
                    S2_GLO_SAT[avg_count] = "0";
                    S2_GLO_CN[avg_count] = "0";
                    S2_GAL_SAT[avg_count] = "0";
                    S2_GAL_CN[avg_count] = "0";
                    S2_BEI_SAT[avg_count] = "0";
                    S2_BEI_CN[avg_count] = "0";
                }

                fix_equal = false;

                T1_T2_item_count = 0;
                T3_T4_item_count = 0;
                T5_T6_item_count = 0;
                T7_T8_item_count = 0;
                /*
                 * S2 MDA Fix ITEM && SAT、CN AVG(Area3、4)
                 */

            }


            /**
             *  S3 TXT
             */
            if (s3chkb.Checked == true & s3fileexistflag == 1)
            {
                richTextBox9.Clear();
                richTextBox10.Clear();
                richTextBox12.Clear();
                textBox8.Clear();
                this.tabPage4.Text = textBox12.Text;

                //Initial T1~T8 Font color
                for (int initial_color = 0; initial_color < 1000; initial_color++)
                {
                    s3_mode_font_color[initial_color] = 0;
                }

                foreach (String line in File.ReadLines(open_file4_path))
                {
                    FoundMXCM10033 = line.IndexOf("$MXCM10033,2,");
                    FoundGPS_PRN = line.IndexOf("GPS_PRN:");
                    FoundGPS_SNR = line.IndexOf("GPS_SNR:");
                    FoundGLO_PRN = line.IndexOf("GLO_PRN:");
                    FoundGLO_SNR = line.IndexOf("GLO_SNR:");
                    FoundGAL_PRN = line.IndexOf("GAL_PRN:");
                    FoundGAL_SNR = line.IndexOf("GAL_SNR:");
                    FoundBEI_PRN = line.IndexOf("BEI_PRN:");
                    FoundBEI_SNR = line.IndexOf("BEI_SNR:");
                    FoundQZS_PRN = line.IndexOf("QZS_PRN:");
                    FoundQZS_SNR = line.IndexOf("QZS_SNR:");

                    //FoundF10 = line.IndexOf(",F1");
                    //FoundF20 = line.IndexOf(",F2");
                    //FoundF40 = line.IndexOf(",F4");
                    //FoundF50 = line.IndexOf(",F5");

                    //Found810 = line.IndexOf(",81");
                    //Found820 = line.IndexOf(",82");
                    //Found840 = line.IndexOf(",84");
                    //Found850 = line.IndexOf(",85");

                    //FoundC10 = line.IndexOf(",C1");
                    //FoundC20 = line.IndexOf(",C2");
                    //FoundC40 = line.IndexOf(",C4");
                    //FoundC50 = line.IndexOf(",C5");

                    //FoundA10 = line.IndexOf(",A1");
                    //FoundA20 = line.IndexOf(",A2");
                    //FoundA40 = line.IndexOf(",A4");
                    //FoundA50 = line.IndexOf(",A5");

                    //Found910 = line.IndexOf(",91");
                    //Found920 = line.IndexOf(",92");
                    //Found940 = line.IndexOf(",94");
                    //Found950 = line.IndexOf(",95");

                    //if (FoundF10 != -1 || Found810 != -1 || FoundC10 != -1 || FoundA10 != -1 || Found910 != -1)                                                     //T1, T2
                    //{
                    //    richTextBox10.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                    //    s3_mode_font_color[convert_count3] = 1;
                    //    T1_T2_item_count++;
                    //}

                    //if (FoundF20 != -1 || Found820 != -1 || FoundC20 != -1 || FoundA20 != -1 || Found920 != -1)                                                     //T3, T4
                    //{
                    //    richTextBox10.SelectionColor = Color.Blue;                           //BLUE
                    //    s3_mode_font_color[convert_count3] = 2;
                    //    T3_T4_item_count++;
                    //}

                    //if (FoundF40 != -1 || Found840 != -1 || FoundC40 != -1 || FoundA40 != -1 || Found940 != -1)                                                     //Dynamic
                    //{
                    //    richTextBox10.SelectionColor = Color.Orange;                         //Orange
                    //    s3_mode_font_color[convert_count3] = 3;
                    //    T5_T6_item_count++;
                    //}

                    //if (FoundF50 != -1 || Found850 != -1 || FoundC50 != -1 || FoundA50 != -1 || Found950 != -1)                                                     //Geofencing
                    //{
                    //    richTextBox10.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                    //    s3_mode_font_color[convert_count3] = 4;
                    //    T7_T8_item_count++;
                    //}

                    if (FoundMXCM10033 != -1)
                    {

                        if (convert_count3 < 10)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox10.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s3_mode_font_color[convert_count3] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox10.SelectionColor = Color.Blue;                           //BLUE
                                s3_mode_font_color[convert_count3] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox10.SelectionColor = Color.Orange;                         //Orange
                                s3_mode_font_color[convert_count3] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox10.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s3_mode_font_color[convert_count3] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                //FixString = "●";
                                s3_fix[convert_count3] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                //FixString = "○";
                                s3_fix[convert_count3] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 64);
                            ITEM = FoundComma[2];
                            S3_ITEM[convert_count3] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 15, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 24, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time3_store[convert_count3 - 1] = UTC_TIME_;
                            if (convert_count3 > 1)
                            {
                                s3_time_subtract = time3_store[convert_count3 - 1].Subtract(time3_store[convert_count3 - 2]);
                                textBox8.AppendText(time3_store[convert_count3 - 1].ToString("HH:mm:ss") + "(Item" + convert_count3 + ")" + "  -  " + time3_store[convert_count3 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count3 - 1) + ")" + Environment.NewLine);
                                textBox8.AppendText(Environment.NewLine);
                                textBox8.AppendText((s3_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                                textBox8.AppendText(Environment.NewLine);
                                s3_interval[convert_count3] = s3_time_subtract.TotalSeconds.ToString();       //excel title interval
                            }

                            richTextBox10.AppendText(MXCM10033 + s3_fix[convert_count3] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox9.SelectionFont, richTextBox9.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox9.SelectionFont = New_Font;
                            richTextBox9.AppendText(S3_ITEM[convert_count3] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s3_analyze_utc_time_flag == 0)
                            {
                                s3_analyze_utc_time_flag = 1;
                                s3_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s3_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S3_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S3_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S3_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s3_Instruction_code_cmd[convert_count3] = FoundComma[0];
                            s3_Instruction_code_cmd_two[convert_count3] = FoundComma[1];
                            s3_Item[convert_count3] = FoundComma[2];
                            s3_ymd[convert_count3] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s3_hms[convert_count3] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s3_ramdom_first[convert_count3] = FoundComma[6];
                            s3_ramdom_second[convert_count3] = FoundComma[7];
                            s3_ramdom_third[convert_count3] = FoundComma[8];
                            s3_ramdom_forth[convert_count3] = FoundComma[9];
                            s3_ramdom_fiveth[convert_count3] = FoundComma[10];
                            s3_sat[convert_count3] = FoundComma[11];
                            s3_mode[convert_count3] = FoundComma[12];

                            convert_count3++;
                        }
                        else if (convert_count3 < 100)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox10.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s3_mode_font_color[convert_count3] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox10.SelectionColor = Color.Blue;                           //BLUE
                                s3_mode_font_color[convert_count3] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox10.SelectionColor = Color.Orange;                         //Orange
                                s3_mode_font_color[convert_count3] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox10.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s3_mode_font_color[convert_count3] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                //FixString = "●";
                                s3_fix[convert_count3] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                //FixString = "○";
                                s3_fix[convert_count3] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 65);
                            ITEM = FoundComma[2];
                            S3_ITEM[convert_count3] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 16, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 25, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time3_store[convert_count3 - 1] = UTC_TIME_;
                            s3_time_subtract = time3_store[convert_count3 - 1].Subtract(time3_store[convert_count3 - 2]);
                            textBox8.AppendText(time3_store[convert_count3 - 1].ToString("HH:mm:ss") + "(Item" + convert_count3 + ")" + "  -  " + time3_store[convert_count3 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count3 - 1) + ")" + Environment.NewLine);
                            textBox8.AppendText(Environment.NewLine);
                            textBox8.AppendText((s3_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                            textBox8.AppendText(Environment.NewLine);
                            s3_interval[convert_count3] = s3_time_subtract.TotalSeconds.ToString();       //excel title interval
                            richTextBox10.AppendText(MXCM10033 + s3_fix[convert_count3] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox9.SelectionFont, richTextBox9.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox9.SelectionFont = New_Font;
                            richTextBox9.AppendText(S3_ITEM[convert_count3] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s3_analyze_utc_time_flag == 0)
                            {
                                s3_analyze_utc_time_flag = 1;
                                s3_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s3_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S3_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S3_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S3_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s3_Instruction_code_cmd[convert_count3] = FoundComma[0];
                            s3_Instruction_code_cmd_two[convert_count3] = FoundComma[1];
                            s3_Item[convert_count3] = FoundComma[2];
                            s3_ymd[convert_count3] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s3_hms[convert_count3] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s3_ramdom_first[convert_count3] = FoundComma[6];
                            s3_ramdom_second[convert_count3] = FoundComma[7];
                            s3_ramdom_third[convert_count3] = FoundComma[8];
                            s3_ramdom_forth[convert_count3] = FoundComma[9];
                            s3_ramdom_fiveth[convert_count3] = FoundComma[10];
                            s3_sat[convert_count3] = FoundComma[11];
                            s3_mode[convert_count3] = FoundComma[12];

                            convert_count3++;
                        }
                        else if (convert_count3 < 1000)
                        {
                            FoundComma = line.Split(',');
                            fix_equal = FoundComma[5].Equals("12", StringComparison.OrdinalIgnoreCase);

                            //Set GNSS MODE Color
                            GNSS_MODE = FoundComma[12].Substring(0, 2);
                            if (GNSS_MODE.Equals("F1") || GNSS_MODE.Equals("81") || GNSS_MODE.Equals("C1") || GNSS_MODE.Equals("A1") || GNSS_MODE.Equals("91"))                     //T1, T2
                            {
                                richTextBox10.SelectionColor = Color.FromArgb(0, 191, 255);          //DeepSkyBlue
                                s3_mode_font_color[convert_count3] = 1;
                                T1_T2_item_count++;
                            }

                            if (GNSS_MODE.Equals("F2") || GNSS_MODE.Equals("82") || GNSS_MODE.Equals("C2") || GNSS_MODE.Equals("A2") || GNSS_MODE.Equals("92"))                     //T3, T4
                            {
                                richTextBox10.SelectionColor = Color.Blue;                           //BLUE
                                s3_mode_font_color[convert_count3] = 2;
                                T3_T4_item_count++;
                            }

                            if (GNSS_MODE.Equals("F4") || GNSS_MODE.Equals("84") || GNSS_MODE.Equals("C4") || GNSS_MODE.Equals("A4") || GNSS_MODE.Equals("94"))                     //Dynamic
                            {
                                richTextBox10.SelectionColor = Color.Orange;                         //Orange
                                s3_mode_font_color[convert_count3] = 3;
                                T5_T6_item_count++;
                            }

                            if (GNSS_MODE.Equals("F5") || GNSS_MODE.Equals("85") || GNSS_MODE.Equals("C5") || GNSS_MODE.Equals("A5") || GNSS_MODE.Equals("95"))                     //Geofencing
                            {
                                richTextBox10.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                s3_mode_font_color[convert_count3] = 4;
                                T7_T8_item_count++;
                            }
                            //Set GNSS MODE Color

                            if (fix_equal == true)
                            {
                                //FixString = "●";
                                s3_fix[convert_count3] = "●";       //excel title fix
                            }
                            else if (fix_equal == false)
                            {
                                //FixString = "○";
                                s3_fix[convert_count3] = "○";       //excel title fix
                            }

                            MXCM10033 = line.Substring(FoundMXCM10033 + 13, 66);
                            ITEM = FoundComma[2];
                            S3_ITEM[convert_count3] = "(ITEM" + ITEM + ")";
                            Analyze_UTC_time = line.Substring(FoundMXCM10033 + 17, 4);              //尋找授時成功的item

                            UTC_TIME_HMS = line.Substring(FoundMXCM10033 + 26, 6);
                            UTC_TIME_ = DateTime.ParseExact(UTC_TIME_HMS, "HHmmss", CultureInfo.InvariantCulture, DateTimeStyles.None);
                            time3_store[convert_count3 - 1] = UTC_TIME_;
                            s3_time_subtract = time3_store[convert_count3 - 1].Subtract(time3_store[convert_count3 - 2]);
                            textBox8.AppendText(time3_store[convert_count3 - 1].ToString("HH:mm:ss") + "(Item" + convert_count3 + ")" + "  -  " + time3_store[convert_count3 - 2].ToString("HH:mm:ss") + "(Item" + (convert_count3 - 1) + ")" + Environment.NewLine);
                            textBox8.AppendText(Environment.NewLine);
                            textBox8.AppendText((s3_time_subtract.TotalSeconds).ToString() + "s" + Environment.NewLine);
                            textBox8.AppendText(Environment.NewLine);
                            s3_interval[convert_count3] = s3_time_subtract.TotalSeconds.ToString();       //excel title interval
                            richTextBox10.AppendText(MXCM10033 + s3_fix[convert_count3] + Environment.NewLine);       //excel title fix
                            New_Font = new Font(richTextBox9.SelectionFont, richTextBox9.SelectionFont.Style ^ FontStyle.Bold);
                            richTextBox9.SelectionFont = New_Font;
                            richTextBox9.AppendText(S3_ITEM[convert_count3] + Environment.NewLine);

                            if (Analyze_UTC_time == "2024" && s3_analyze_utc_time_flag == 0)
                            {
                                s3_analyze_utc_time_flag = 1;
                                s3_analyze_utc_time_item = (Int32.Parse(ITEM) + 1).ToString();
                                s3_Analyze_UTC_item = "Analyze UTC Item = [" + ITEM + "]";
                                S3_T1_T2_item_analyze_utc_time = T1_T2_item_count;
                                S3_T3_T4_item_analyze_utc_time = T3_T4_item_count;
                                S3_T5_T6_item_analyze_utc_time = T5_T6_item_count;
                            }

                            //excel title_instruction_code_cmd
                            UTC_TIME_yyyy = FoundComma[3].Substring(0, 4);          //excel title_UTC +8
                            UTC_TIME_MM = FoundComma[3].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_dd = FoundComma[3].Substring(6, 2);            //excel title_UTC +8
                            UTC_TIME_HH = FoundComma[4].Substring(0, 2);            //excel title_UTC +8
                            UTC_TIME_mm = FoundComma[4].Substring(2, 2);            //excel title_UTC +8
                            UTC_TIME_ss = FoundComma[4].Substring(4, 2);            //excel title_UTC +8
                            UTC_TIME_YMDHMS = UTC_TIME_yyyy + "-" + UTC_TIME_MM + "-" + UTC_TIME_dd + " " + UTC_TIME_HH + ":" + UTC_TIME_mm + ":" + UTC_TIME_ss;    //excel title_UTC +8
                            UTC_TIME_ALL = DateTime.Parse(UTC_TIME_YMDHMS);                  //excel title_UTC +8
                            localDateTime = UTC_TIME_ALL.ToLocalTime();                      //excel title_UTC +8

                            s3_Instruction_code_cmd[convert_count3] = FoundComma[0];
                            s3_Instruction_code_cmd_two[convert_count3] = FoundComma[1];
                            s3_Item[convert_count3] = FoundComma[2];
                            s3_ymd[convert_count3] = localDateTime.ToString("yyyyMMdd");     //excel title_UTC +8
                            s3_hms[convert_count3] = localDateTime.ToString("HHmmss");       //excel title_UTC +8
                            s3_ramdom_first[convert_count3] = FoundComma[6];
                            s3_ramdom_second[convert_count3] = FoundComma[7];
                            s3_ramdom_third[convert_count3] = FoundComma[8];
                            s3_ramdom_forth[convert_count3] = FoundComma[9];
                            s3_ramdom_fiveth[convert_count3] = FoundComma[10];
                            s3_sat[convert_count3] = FoundComma[11];
                            s3_mode[convert_count3] = FoundComma[12];

                            convert_count3++;
                        }

                    }

                    if (FoundGPS_PRN != -1)
                    {
                        //GPS_PRN = line;
                        S3_GPS_PRN[convert_count3 - 1] = line;
                        S3_GPS_SAT[convert_count3] = line.Substring(FoundGPS_PRN + 61);          //save GPS sat
                        richTextBox9.AppendText(S3_GPS_PRN[convert_count3 - 1] + Environment.NewLine);
                    }

                    if (FoundGPS_SNR != -1)
                    {
                        //GPS_SNR = line;
                        S3_GPS_SNR[convert_count3 - 1] = line;
                        S3_GPS_CN[convert_count3] = line.Substring(FoundGPS_SNR + 61);
                        richTextBox9.AppendText(S3_GPS_SNR[convert_count3 - 1] + Environment.NewLine);
                    }

                    if (FoundGLO_PRN != -1)
                    {
                        //GLO_PRN = line;
                        S3_GLO_PRN[convert_count3 - 1] = line;
                        S3_GLO_SAT[convert_count3] = line.Substring(FoundGLO_PRN + 61);
                        richTextBox9.AppendText(S3_GLO_PRN[convert_count3 - 1] + Environment.NewLine);
                    }

                    if (FoundGLO_SNR != -1)
                    {
                        //GLO_SNR = line;
                        S3_GLO_SNR[convert_count3 - 1] = line;
                        S3_GLO_CN[convert_count3] = line.Substring(FoundGLO_SNR + 61);
                        richTextBox9.AppendText(S3_GLO_SNR[convert_count3 - 1] + Environment.NewLine);
                    }

                    if (FoundGAL_PRN != -1)
                    {
                        //GAL_PRN = line;
                        S3_GAL_PRN[convert_count3 - 1] = line;
                        S3_GAL_SAT[convert_count3] = line.Substring(FoundGAL_PRN + 61);
                        richTextBox9.AppendText(S3_GAL_PRN[convert_count3 - 1] + Environment.NewLine);
                    }

                    if (FoundGAL_SNR != -1)
                    {
                        //GAL_SNR = line;
                        S3_GAL_SNR[convert_count3 - 1] = line;
                        S3_GAL_CN[convert_count3] = line.Substring(FoundGAL_SNR + 61);
                        richTextBox9.AppendText(S3_GAL_SNR[convert_count3 - 1] + Environment.NewLine);
                    }

                    if (FoundBEI_PRN != -1)
                    {
                        //BEI_PRN = line;
                        S3_BEI_PRN[convert_count3 - 1] = line;
                        S3_BEI_SAT[convert_count3] = line.Substring(FoundBEI_PRN + 61);
                        richTextBox9.AppendText(S3_BEI_PRN[convert_count3 - 1] + Environment.NewLine);
                    }

                    if (FoundBEI_SNR != -1)
                    {
                        //BEI_SNR = line;
                        S3_BEI_SNR[convert_count3 - 1] = line;
                        S3_BEI_CN[convert_count3] = line.Substring(FoundBEI_SNR + 61);
                        richTextBox9.AppendText(S3_BEI_SNR[convert_count3 - 1] + Environment.NewLine);
                    }

                    if (FoundQZS_PRN != -1)
                    {
                        //QZS_PRN = line;
                        S3_QZS_PRN[convert_count3 - 1] = line;
                        richTextBox9.AppendText(S3_QZS_PRN[convert_count3 - 1] + Environment.NewLine);
                    }

                    if (FoundQZS_SNR != -1)
                    {
                        //QZS_SNR = line;
                        S3_QZS_SNR[convert_count3 - 1] = line;
                        richTextBox9.AppendText(S3_QZS_SNR[convert_count3 - 1] + Environment.NewLine);
                    }

                    /*
                     * S3 MDA Fix ITEM && SAT、CN AVG(Area1、2)
                     */
                    if (fix_equal == true && s3_first_fix_flag == 0)
                    {
                        s3_first_fix_flag = 1;
                        s3_first_fix_item = (Int32.Parse(ITEM) + 1).ToString();

                        S3_T1_T2_item_fix_time = T1_T2_item_count;
                        S3_T3_T4_item_fix_time = T3_T4_item_count;
                        S3_T5_T6_item_fix_time = T5_T6_item_count;
                        S3_T7_T8_item_fix_time = T7_T8_item_count;

                        s3_TTFF_item = "TTFF Item = [" + ITEM + "]";           //first fix item(已完成)
                        s3_first_fix_previous_item = Int32.Parse(ITEM);           //fix 前一個item

                    }
                    /*
                     * S3 MDA Fix ITEM && SAT、CN AVG(Area1、2)
                     */
                }

                /*
                 * S3 MDA Fix ITEM && SAT、CN AVG(Area3、4)
                 */
                try
                {
                    //initial A1~A4 avg
                    S3_A1_GPS_SAT_Accumulate = 0;
                    S3_A1_GPS_CN_Accumulate = 0;
                    S3_A1_GLO_SAT_Accumulate = 0;
                    S3_A1_GLO_CN_Accumulate = 0;
                    S3_A1_GAL_SAT_Accumulate = 0;
                    S3_A1_GAL_CN_Accumulate = 0;
                    S3_A1_BEI_SAT_Accumulate = 0;
                    S3_A1_BEI_CN_Accumulate = 0;

                    S3_A1_GPS_SAT_AVG = 0;
                    S3_A1_GPS_CN_AVG = 0;
                    S3_A1_GLO_SAT_AVG = 0;
                    S3_A1_GLO_CN_AVG = 0;
                    S3_A1_GAL_SAT_AVG = 0;
                    S3_A1_GAL_CN_AVG = 0;
                    S3_A1_BEI_SAT_AVG = 0;
                    S3_A1_BEI_CN_AVG = 0;

                    S3_A2_GPS_SAT_Accumulate = 0;
                    S3_A2_GPS_CN_Accumulate = 0;
                    S3_A2_GLO_SAT_Accumulate = 0;
                    S3_A2_GLO_CN_Accumulate = 0;
                    S3_A2_GAL_SAT_Accumulate = 0;
                    S3_A2_GAL_CN_Accumulate = 0;
                    S3_A2_BEI_SAT_Accumulate = 0;
                    S3_A2_BEI_CN_Accumulate = 0;

                    S3_A2_GPS_SAT_AVG = 0;
                    S3_A2_GPS_CN_AVG = 0;
                    S3_A2_GLO_SAT_AVG = 0;
                    S3_A2_GLO_CN_AVG = 0;
                    S3_A2_GAL_SAT_AVG = 0;
                    S3_A2_GAL_CN_AVG = 0;
                    S3_A2_BEI_SAT_AVG = 0;
                    S3_A2_BEI_CN_AVG = 0;

                    S3_A3_GPS_SAT_Accumulate = 0;
                    S3_A3_GPS_CN_Accumulate = 0;
                    S3_A3_GLO_SAT_Accumulate = 0;
                    S3_A3_GLO_CN_Accumulate = 0;
                    S3_A3_GAL_SAT_Accumulate = 0;
                    S3_A3_GAL_CN_Accumulate = 0;
                    S3_A3_BEI_SAT_Accumulate = 0;
                    S3_A3_BEI_CN_Accumulate = 0;

                    S3_A3_GPS_SAT_AVG = 0;
                    S3_A3_GPS_CN_AVG = 0;
                    S3_A3_GLO_SAT_AVG = 0;
                    S3_A3_GLO_CN_AVG = 0;
                    S3_A3_GAL_SAT_AVG = 0;
                    S3_A3_GAL_CN_AVG = 0;
                    S3_A3_BEI_SAT_AVG = 0;
                    S3_A3_BEI_CN_AVG = 0;

                    S3_A4_GPS_SAT_Accumulate = 0;
                    S3_A4_GPS_CN_Accumulate = 0;
                    S3_A4_GLO_SAT_Accumulate = 0;
                    S3_A4_GLO_CN_Accumulate = 0;
                    S3_A4_GAL_SAT_Accumulate = 0;
                    S3_A4_GAL_CN_Accumulate = 0;
                    S3_A4_BEI_SAT_Accumulate = 0;
                    S3_A4_BEI_CN_Accumulate = 0;

                    S3_A4_GPS_SAT_AVG = 0;
                    S3_A4_GPS_CN_AVG = 0;
                    S3_A4_GLO_SAT_AVG = 0;
                    S3_A4_GLO_CN_AVG = 0;
                    S3_A4_GAL_SAT_AVG = 0;
                    S3_A4_GAL_CN_AVG = 0;
                    S3_A4_BEI_SAT_AVG = 0;
                    S3_A4_BEI_CN_AVG = 0;

                    //Area1(first to fix previous)
                    S3_Area1_stopitem = "StopItem = [" + (s3_first_fix_previous_item - 1).ToString() + "]";
                    S3_Area1_totalitem = "TotalItem = [" + (s3_first_fix_previous_item - 1).ToString() + "]";
                    for (int avg_count = 3; avg_count <= (s3_first_fix_previous_item + 1); avg_count++)
                    {
                        S3_A1_GPS_SAT_Accumulate += float.Parse(S3_GPS_SAT[avg_count]);
                        S3_A1_GPS_CN_Accumulate += float.Parse(S3_GPS_CN[avg_count]);
                        S3_A1_GLO_SAT_Accumulate += float.Parse(S3_GLO_SAT[avg_count]);
                        S3_A1_GLO_CN_Accumulate += float.Parse(S3_GLO_CN[avg_count]);
                        S3_A1_GAL_SAT_Accumulate += float.Parse(S3_GAL_SAT[avg_count]);
                        S3_A1_GAL_CN_Accumulate += float.Parse(S3_GAL_CN[avg_count]);
                        S3_A1_BEI_SAT_Accumulate += float.Parse(S3_BEI_SAT[avg_count]);
                        S3_A1_BEI_CN_Accumulate += float.Parse(S3_BEI_CN[avg_count]);
                    }

                    S3_A1_GPS_SAT_AVG = S3_A1_GPS_SAT_Accumulate / (s3_first_fix_previous_item - 1);
                    S3_A1_GPS_CN_AVG = S3_A1_GPS_CN_Accumulate / (s3_first_fix_previous_item - 1);
                    S3_A1_GLO_SAT_AVG = S3_A1_GLO_SAT_Accumulate / (s3_first_fix_previous_item - 1);
                    S3_A1_GLO_CN_AVG = S3_A1_GLO_CN_Accumulate / (s3_first_fix_previous_item - 1);
                    S3_A1_GAL_SAT_AVG = S3_A1_GAL_SAT_Accumulate / (s3_first_fix_previous_item - 1);
                    S3_A1_GAL_CN_AVG = S3_A1_GAL_CN_Accumulate / (s3_first_fix_previous_item - 1);
                    S3_A1_BEI_SAT_AVG = S3_A1_BEI_SAT_Accumulate / (s3_first_fix_previous_item - 1);
                    S3_A1_BEI_CN_AVG = S3_A1_BEI_CN_Accumulate / (s3_first_fix_previous_item - 1);

                    //Area2(first to fix)
                    S3_Area2_stopitem = "StopItem = [" + (Int32.Parse(s3_first_fix_item) - 1).ToString() + "]";
                    S3_Area2_totalitem = "TotalItem = [" + (Int32.Parse(s3_first_fix_item) - 1).ToString() + "]";
                    for (int avg_count = 3; avg_count <= (Int32.Parse(s3_first_fix_item) + 1); avg_count++)
                    {
                        S3_A2_GPS_SAT_Accumulate += float.Parse(S3_GPS_SAT[avg_count]);
                        S3_A2_GPS_CN_Accumulate += float.Parse(S3_GPS_CN[avg_count]);
                        S3_A2_GLO_SAT_Accumulate += float.Parse(S3_GLO_SAT[avg_count]);
                        S3_A2_GLO_CN_Accumulate += float.Parse(S3_GLO_CN[avg_count]);
                        S3_A2_GAL_SAT_Accumulate += float.Parse(S3_GAL_SAT[avg_count]);
                        S3_A2_GAL_CN_Accumulate += float.Parse(S3_GAL_CN[avg_count]);
                        S3_A2_BEI_SAT_Accumulate += float.Parse(S3_BEI_SAT[avg_count]);
                        S3_A2_BEI_CN_Accumulate += float.Parse(S3_BEI_CN[avg_count]);
                    }

                    S3_A2_GPS_SAT_AVG = S3_A2_GPS_SAT_Accumulate / (Int32.Parse(s3_first_fix_item) - 1);
                    S3_A2_GPS_CN_AVG = S3_A2_GPS_CN_Accumulate / (Int32.Parse(s3_first_fix_item) - 1);
                    S3_A2_GLO_SAT_AVG = S3_A2_GLO_SAT_Accumulate / (Int32.Parse(s3_first_fix_item) - 1);
                    S3_A2_GLO_CN_AVG = S3_A2_GLO_CN_Accumulate / (Int32.Parse(s3_first_fix_item) - 1);
                    S3_A2_GAL_SAT_AVG = S3_A2_GAL_SAT_Accumulate / (Int32.Parse(s3_first_fix_item) - 1);
                    S3_A2_GAL_CN_AVG = S3_A2_GAL_CN_Accumulate / (Int32.Parse(s3_first_fix_item) - 1);
                    S3_A2_BEI_SAT_AVG = S3_A2_BEI_SAT_Accumulate / (Int32.Parse(s3_first_fix_item) - 1);
                    S3_A2_BEI_CN_AVG = S3_A2_BEI_CN_Accumulate / (Int32.Parse(s3_first_fix_item) - 1);

                    //Area3(fix to last)
                    S3_Area3_startitem = "StartItem = [" + (Int32.Parse(s3_first_fix_item) - 1).ToString() + "]";
                    S3_Area3_stopitem = "StopItem = [" + (convert_count3 - 1).ToString() + "]";
                    S3_Area3_totalitem = "TotalItem = [" + (convert_count3 - Int32.Parse(s3_first_fix_item) + 1).ToString() + "]";
                    for (int avg_count = (Int32.Parse(s3_first_fix_item) + 1); avg_count <= convert_count3; avg_count++)
                    {
                        S3_A3_GPS_SAT_Accumulate += float.Parse(S3_GPS_SAT[avg_count]);
                        S3_A3_GPS_CN_Accumulate += float.Parse(S3_GPS_CN[avg_count]);
                        S3_A3_GLO_SAT_Accumulate += float.Parse(S3_GLO_SAT[avg_count]);
                        S3_A3_GLO_CN_Accumulate += float.Parse(S3_GLO_CN[avg_count]);
                        S3_A3_GAL_SAT_Accumulate += float.Parse(S3_GAL_SAT[avg_count]);
                        S3_A3_GAL_CN_Accumulate += float.Parse(S3_GAL_CN[avg_count]);
                        S3_A3_BEI_SAT_Accumulate += float.Parse(S3_BEI_SAT[avg_count]);
                        S3_A3_BEI_CN_Accumulate += float.Parse(S3_BEI_CN[avg_count]);
                    }

                    S3_A3_GPS_SAT_AVG = S3_A3_GPS_SAT_Accumulate / (convert_count3 - Int32.Parse(s3_first_fix_item) + 1);
                    S3_A3_GPS_CN_AVG = S3_A3_GPS_CN_Accumulate / (convert_count3 - Int32.Parse(s3_first_fix_item) + 1);
                    S3_A3_GLO_SAT_AVG = S3_A3_GLO_SAT_Accumulate / (convert_count3 - Int32.Parse(s3_first_fix_item) + 1);
                    S3_A3_GLO_CN_AVG = S3_A3_GLO_CN_Accumulate / (convert_count3 - Int32.Parse(s3_first_fix_item) + 1);
                    S3_A3_GAL_SAT_AVG = S3_A3_GAL_SAT_Accumulate / (convert_count3 - Int32.Parse(s3_first_fix_item) + 1);
                    S3_A3_GAL_CN_AVG = S3_A3_GAL_CN_Accumulate / (convert_count3 - Int32.Parse(s3_first_fix_item) + 1);
                    S3_A3_BEI_SAT_AVG = S3_A3_BEI_SAT_Accumulate / (convert_count3 - Int32.Parse(s3_first_fix_item) + 1);
                    S3_A3_BEI_CN_AVG = S3_A3_BEI_CN_Accumulate / (convert_count3 - Int32.Parse(s3_first_fix_item) + 1);

                    //Area4(first to last)
                    S3_Area4_stopitem = "StopItem = [" + (convert_count3 - 1).ToString() + "]";
                    S3_Area4_totalitem = "TotalItem = [" + (convert_count3 - 1).ToString() + "]";
                    for (int avg_count = 2; avg_count <= convert_count3; avg_count++)
                    {
                        S3_A4_GPS_SAT_Accumulate += float.Parse(S3_GPS_SAT[avg_count]);
                        S3_A4_GPS_CN_Accumulate += float.Parse(S3_GPS_CN[avg_count]);
                        S3_A4_GLO_SAT_Accumulate += float.Parse(S3_GLO_SAT[avg_count]);
                        S3_A4_GLO_CN_Accumulate += float.Parse(S3_GLO_CN[avg_count]);
                        S3_A4_GAL_SAT_Accumulate += float.Parse(S3_GAL_SAT[avg_count]);
                        S3_A4_GAL_CN_Accumulate += float.Parse(S3_GAL_CN[avg_count]);
                        S3_A4_BEI_SAT_Accumulate += float.Parse(S3_BEI_SAT[avg_count]);
                        S3_A4_BEI_CN_Accumulate += float.Parse(S3_BEI_CN[avg_count]);
                    }

                    S3_A4_GPS_SAT_AVG = S3_A4_GPS_SAT_Accumulate / (convert_count3 - 1);
                    S3_A4_GPS_CN_AVG = S3_A4_GPS_CN_Accumulate / (convert_count3 - 1);
                    S3_A4_GLO_SAT_AVG = S3_A4_GLO_SAT_Accumulate / (convert_count3 - 1);
                    S3_A4_GLO_CN_AVG = S3_A4_GLO_CN_Accumulate / (convert_count3 - 1);
                    S3_A4_GAL_SAT_AVG = S3_A4_GAL_SAT_Accumulate / (convert_count3 - 1);
                    S3_A4_GAL_CN_AVG = S3_A4_GAL_CN_Accumulate / (convert_count3 - 1);
                    S3_A4_BEI_SAT_AVG = S3_A4_BEI_SAT_Accumulate / (convert_count3 - 1);
                    S3_A4_BEI_CN_AVG = S3_A4_BEI_CN_Accumulate / (convert_count3 - 1);
                }
                catch
                {
                    MessageBox.Show("Can't save MDA csv,Data format is incomplete, Please delay dump time");
                }

                for (int avg_count = 2; avg_count <= convert_count3; avg_count++)
                {
                    S3_GPS_SAT[avg_count] = "0";
                    S3_GPS_CN[avg_count] = "0";
                    S3_GLO_SAT[avg_count] = "0";
                    S3_GLO_CN[avg_count] = "0";
                    S3_GAL_SAT[avg_count] = "0";
                    S3_GAL_CN[avg_count] = "0";
                    S3_BEI_SAT[avg_count] = "0";
                    S3_BEI_CN[avg_count] = "0";
                }

                fix_equal = false;

                T1_T2_item_count = 0;
                T3_T4_item_count = 0;
                T5_T6_item_count = 0;
                T7_T8_item_count = 0;
                /*
                 * S3 MDA Fix ITEM && SAT、CN AVG(Area3、4)
                 */

            }
            /*
             * To do LOCUS RAW DATA
             */

            //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            //-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

            /*
             * To do Read Setting Mode
             */
            /**
             *  S0 Read Setting Mode
             */
            if (s0chkb.Checked == true & s0fileexistflag == 1)
            {
                richTextBox7.Clear();
                this.tabPage1.Text = textBox9.Text;
                foreach (String line in File.ReadLines(open_file1_path))
                {
                    FoundPeriodicCycle = line.IndexOf("PeriodicCycle:");
                    FoundT0 = line.IndexOf("T0:");
                    FoundT1 = line.IndexOf("T1:");
                    FoundT2 = line.IndexOf("T2:");
                    FoundT3 = line.IndexOf("T3:");
                    FoundT4 = line.IndexOf("T4:");
                    FoundT5 = line.IndexOf("T5:");
                    FoundT6 = line.IndexOf("T6:");
                    FoundT7 = line.IndexOf("T7:");
                    FoundT8 = line.IndexOf("T8:");
                    FoundCOM = line.IndexOf("COMPort:");
                    FoundSN = line.IndexOf("SerialNumber:");
                    FoundFV = line.IndexOf("FirmwareVersion:");
                    FoundEnable = line.IndexOf("Enable:");
                    FoundWorkMode = line.IndexOf("WorkMode:");
                    FoundStage = line.IndexOf("Stage:");
                    FoundFirstFixStage = line.IndexOf("FirstFixStage:");
                    FoundTraceFixStage = line.IndexOf("TraceFixStage:");
                    FoundPrecisionChk = line.IndexOf("PrecisionChk:");
                    FoundDistanceThreshold = line.IndexOf("DistanceThreshold:");
                    FoundDestinationLongitude = line.IndexOf("DestinationLongitude:");
                    FoundDestinationLatitude = line.IndexOf("DestinationLatitude:");
                    FoundDestinationAltitude = line.IndexOf("DestinationAltitude:");
                    FoundMotionDetection = line.IndexOf("[MotionDetection]");
                    FoundAngle = line.IndexOf("Angle");
                    FoundDataRate = line.IndexOf("DataRate");
                    FoundSampleFrequency = line.IndexOf("SampleFrequency");

                    FoundGPS_EPO = line.IndexOf("[GPS_EPO]");
                    FoundGLO_EPO = line.IndexOf("[GLO_EPO]");
                    FoundGAL_EPO = line.IndexOf("[GAL_EPO]");
                    FoundBEI_EPO = line.IndexOf("[BEI_EPO]");
                    FoundEpoDataNumber = line.IndexOf("EpoDataNumber");

                    FoundFWN = line.IndexOf("FWN");
                    FoundFTOW = line.IndexOf("FTOW");
                    FoundLWN = line.IndexOf("LWN");
                    FoundLTOW = line.IndexOf("LTOW");


                    if (FoundWorkMode != -1)
                    {
                        WorkMode = line;
                    }

                    if (FoundFirstFixStage != -1)
                    {
                        FirstFixStage = line;
                    }

                    if (FoundTraceFixStage != -1)
                    {
                        TraceFixStage = line;
                    }

                    if (FoundPrecisionChk != -1)
                    {
                        PrecisionChk = line.Substring(FoundPrecisionChk + 13, 1);

                        if (Int16.Parse(PrecisionChk) == 1)
                        {
                            PrecisionChk = "PrecisionChk: True";
                        }
                        else if (Int16.Parse(PrecisionChk) == 0)
                        {
                            PrecisionChk = "PrecisionChk: False";
                        }
                    }

                    if (FoundEnable != -1)
                    {
                        enable_count++;
                        Enable_all = line;
                        Enable = line.Substring(FoundEnable + 7, 1);
                        chk_enable_count = Int16.Parse(Enable);
                    }

                    if (first_stage_flag == 0 && FoundStage != -1)
                    {
                        first_stage_flag = 1;
                        Stage = line;
                    }

                    if (FoundCOM != -1)
                    {
                        COM = line.Substring(FoundCOM + 8);
                        label26.Text = COM;
                    }

                    if (FoundSN != -1)
                    {
                        SN = line.Substring(FoundSN + 13);
                        label27.Text = SN;
                    }

                    if (FoundFV != -1)
                    {
                        FV = line.Substring(FoundFV + 16);
                        label28.Text = FV;
                    }

                    if (FoundPeriodicCycle != -1)
                    {
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(FirstFixStage + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(TraceFixStage + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT0 != -1)
                    {
                        T0 = line.Substring(FoundT0 + 3);
                        s0_t0 = Int32.Parse(T0);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText("[Periodic]" + Environment.NewLine);
                        if (enable_count == 1)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(Stage + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(WorkMode + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT1 != -1)
                    {
                        T1 = line.Substring(FoundT1 + 3);
                        s0_t1 = Int32.Parse(T1);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT2 != -1)
                    {
                        T2 = line.Substring(FoundT2 + 3);
                        s0_t2 = Int32.Parse(T2);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT3 != -1)
                    {
                        T3 = line.Substring(FoundT3 + 3);
                        s0_t3 = Int32.Parse(T3);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT4 != -1)
                    {
                        T4 = line.Substring(FoundT4 + 3);
                        s0_t4 = Int32.Parse(T4);
                        richTextBox7.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT5 != -1)
                    {
                        T5 = line.Substring(FoundT5 + 3);
                        s0_t5 = Int32.Parse(T5);
                        richTextBox7.SelectionColor = Color.Orange;          //Orange
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText("[Dynamic]" + Environment.NewLine);
                        if (enable_count == 2)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox7.SelectionColor = Color.Orange;          //Orange
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox7.SelectionColor = Color.Orange;          //Orange
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox7.SelectionColor = Color.Orange;          //Orange
                        richTextBox7.AppendText(PrecisionChk + Environment.NewLine);
                        richTextBox7.SelectionColor = Color.Orange;          //Orange
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT6 != -1)
                    {
                        T6 = line.Substring(FoundT6 + 3);
                        s0_t6 = Int32.Parse(T6);
                        richTextBox7.SelectionColor = Color.Orange;          //Orange
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT7 != -1)
                    {
                        T7 = line.Substring(FoundT7 + 3);
                        s0_t7 = Int32.Parse(T7);
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText("[Geofencing]" + Environment.NewLine);
                        if (enable_count == 3)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT8 != -1)
                    {
                        T8 = line.Substring(FoundT8 + 3);
                        s0_t8 = Int32.Parse(T8);
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDistanceThreshold != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLongitude != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLatitude != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationAltitude != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundMotionDetection != -1)
                    {
                        MotionDetection = line;
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox7.AppendText(MotionDetection + Environment.NewLine);
                    }

                    if (FoundAngle != -1)
                    {
                        if (enable_count == 4)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox7.AppendText(Enable_all + Environment.NewLine);
                                richTextBox7.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDataRate != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundSampleFrequency != -1)
                    {
                        richTextBox7.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    /**
                     * MDA GNSS EPO ENABLE
                     */
                    if (FoundGPS_EPO != -1)
                    {
                        gnss_flag = 0;
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundGLO_EPO != -1)
                    {
                        gnss_flag = 1;
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundGAL_EPO != -1)
                    {
                        gnss_flag = 2;
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundBEI_EPO != -1)
                    {
                        gnss_flag = 3;
                        New_Font = new Font(richTextBox7.SelectionFont, richTextBox7.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox7.SelectionFont = New_Font;
                        richTextBox7.AppendText(line + Environment.NewLine);
                    }

                    if (FoundEpoDataNumber != -1)
                    {
                        EpoDataNumber[gnss_flag] = line;
                        EpoDataNumberEnable[gnss_flag] = line.Substring(FoundEpoDataNumber + 14);
                        if (Int32.Parse(EpoDataNumberEnable[gnss_flag]) == 12)
                        {
                            switch (gnss_flag)
                            {
                                case 0:
                                    S0_GNSS_EPO[gnss_flag] = "GPS EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 1:
                                    S0_GNSS_EPO[gnss_flag] = "GLO EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 2:
                                    S0_GNSS_EPO[gnss_flag] = "GAL EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 3:
                                    S0_GNSS_EPO[gnss_flag] = "BEI EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                            }
                        }
                        else
                        {
                            switch (gnss_flag)
                            {
                                case 0:
                                    S0_GNSS_EPO[gnss_flag] = "GPS EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 1:
                                    S0_GNSS_EPO[gnss_flag] = "GLO EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 2:
                                    S0_GNSS_EPO[gnss_flag] = "GAL EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 3:
                                    S0_GNSS_EPO[gnss_flag] = "BEI EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                            }
                        }
                    }

                    /**
                     * MDA GNSS EPO ENABLE
                     */

                    /**
                     * SETTING MODE GNSS EPO
                     */
                    if (FoundFWN != -1)
                    {
                        FWN[gnss_flag] = line;
                    }

                    if (FoundFTOW != -1)
                    {
                        FTOW[gnss_flag] = line;
                    }

                    if (FoundLWN != -1)
                    {
                        LWN[gnss_flag] = line;
                    }

                    if (FoundLTOW != -1)
                    {
                        LTOW[gnss_flag] = line;
                        richTextBox7.AppendText(EpoDataNumber[gnss_flag] + Environment.NewLine);
                        richTextBox7.AppendText(FWN[gnss_flag] + Environment.NewLine);
                        richTextBox7.AppendText(FTOW[gnss_flag] + Environment.NewLine);
                        richTextBox7.AppendText(LWN[gnss_flag] + Environment.NewLine);
                        richTextBox7.AppendText(LTOW[gnss_flag] + Environment.NewLine);
                    }
                    /**
                     * SETTING MODE GNSS EPO
                     */

                }

                /**
                 *  S0 Usage Time
                 */
                s0_TTFF_time_int = 0;
                s0_Analyze_UTC_time_int = 0;

                s0_free_run_time = s0_t1 / s0_t0;
                s0_t3_t4_time = s0_t3 / s0_t0;
                s0_dynamic_time = s0_t5 / s0_t0;
                s0_geofencing_time = s0_t7 / s0_t0;

                //TTFF Usage Time
                if (s0_first_fix_flag == 1)
                {
                    TimeSpan TTFF_ts;           //轉換時分秒

                    if (S0_T1_T2_item_fix_time <= s0_free_run_time && S0_T3_T4_item_fix_time == 0 && S0_T5_T6_item_fix_time == 0 && S0_T7_T8_item_fix_time == 0)                           //fix on T1~T2 range
                    {
                        s0_TTFF_time_int = S0_T1_T2_item_fix_time * s0_t0;
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s0_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                        //s0_TTFF_time = "TTFF Usage Time = [" + s0_TTFF_time_int.ToString() + "s]";
                    }
                    else if (S0_T1_T2_item_fix_time >= s0_free_run_time && S0_T3_T4_item_fix_time > 0 && S0_T5_T6_item_fix_time == 0 && S0_T7_T8_item_fix_time == 0)                       //fix on T1~T4 range
                    {
                        S0_T3_remainder_T0 = s0_t3 / s0_t0;  //T3~T4打點次數

                        S0_T3_T4_cycle = S0_T3_T4_item_fix_time / S0_T3_remainder_T0;      //打點cycle

                        if (S0_T3_T4_cycle != 0)                                       //有cycle
                        {
                            S0_T3_T4_remainder = S0_T3_T4_item_fix_time % S0_T3_remainder_T0;
                            s0_TTFF_time_int = (S0_T1_T2_item_fix_time * s0_t0) + (S0_T3_T4_cycle * (s0_t3 + s0_t4)) + (S0_T3_T4_remainder * s0_t0);
                        }
                        else if (S0_T3_T4_cycle == 0)                                  //沒有cycle 
                        {
                            S0_T3_T4_remainder = S0_T3_T4_item_fix_time % S0_T3_remainder_T0;
                            s0_TTFF_time_int = (S0_T1_T2_item_fix_time * s0_t0) + (S0_T3_T4_remainder * s0_t0);
                        }

                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s0_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                        //s0_TTFF_time = "TTFF Usage Time = [" + s0_TTFF_time_int.ToString() + "s]";
                    }
                    else if (S0_T1_T2_item_fix_time >= s0_free_run_time && S0_T3_T4_item_fix_time > 0 && S0_T5_T6_item_fix_time > 0 && S0_T7_T8_item_fix_time == 0)                        //fix on T1~T6 range
                    {
                        S0_T3_remainder_T0 = s0_t3 / s0_t0;  //T3~T4打點次數
                        S0_T5_remainder_T0 = s0_t5 / s0_t0;  //T5~T6打點次數

                        S0_T3_T4_cycle = S0_T3_T4_item_fix_time / S0_T3_remainder_T0;      //打點cycle
                        S0_T5_T6_cycle = S0_T5_T6_item_fix_time / S0_T5_remainder_T0;      //打點cycle

                        S0_T3_T4_remainder = S0_T3_T4_item_fix_time % S0_T3_remainder_T0;

                        if (S0_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S0_T5_T6_remainder = S0_T5_T6_item_fix_time % S0_T5_remainder_T0;
                            s0_TTFF_time_int = (S0_T1_T2_item_fix_time * s0_t0) + (S0_T3_T4_cycle * (s0_t3 + s0_t4)) + (S0_T3_T4_remainder * s0_t0) + (S0_T5_T6_cycle * (s0_t5 + s0_t6)) + (S0_T5_T6_remainder * s0_t0);
                        }
                        else if (S0_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S0_T5_T6_remainder = S0_T5_T6_item_fix_time % S0_T5_remainder_T0;
                            s0_TTFF_time_int = (S0_T1_T2_item_fix_time * s0_t0) + (S0_T3_T4_cycle * (s0_t3 + s0_t4)) + (S0_T3_T4_remainder * s0_t0) + (S0_T5_T6_remainder * s0_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s0_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                        //s0_TTFF_time = "TTFF Usage Time = [" + s0_TTFF_time_int.ToString() + "s]";
                    }
                    else if (S0_T1_T2_item_fix_time >= s0_free_run_time && S0_T3_T4_item_fix_time == 0 && S0_T5_T6_item_fix_time > 0 && S0_T7_T8_item_fix_time > 0)                       //fix on T1~T2 T5~T8
                    {
                        S0_T5_remainder_T0 = s0_t5 / s0_t0;  //T5~T6打點次數
                        S0_T7_remainder_T0 = s0_t7 / s0_t0;  //T7~T8打點次數

                        S0_T5_T6_cycle = S0_T5_T6_item_fix_time / S0_T5_remainder_T0;      //打點cycle
                        S0_T7_T8_cycle = S0_T7_T8_item_fix_time / S0_T7_remainder_T0;      //打點cycle

                        S0_T5_T6_remainder = S0_T5_T6_item_fix_time % S0_T5_remainder_T0;

                        if (S0_T7_T8_cycle != 0)                                       //有cycle
                        {
                            S0_T7_T8_remainder = S0_T7_T8_item_fix_time % S0_T7_remainder_T0;
                            s0_TTFF_time_int = (S0_T1_T2_item_fix_time * s0_t0) + (S0_T5_T6_cycle * (s0_t5 + s0_t6)) + (S0_T5_T6_remainder * s0_t0) + (S0_T7_T8_cycle * (s0_t7 + s0_t8)) + (S0_T7_T8_remainder * s0_t0);
                        }
                        else if (S0_T7_T8_cycle == 0)                                  //沒有cycle 
                        {
                            S0_T7_T8_remainder = S0_T7_T8_item_fix_time % S0_T7_remainder_T0;
                            s0_TTFF_time_int = (S0_T1_T2_item_fix_time * s0_t0) + (S0_T5_T6_cycle * (s0_t5 + s0_t6)) + (S0_T5_T6_remainder * s0_t0) + (S0_T7_T8_remainder * s0_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s0_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                        //s0_TTFF_time = "TTFF Usage Time = [" + s0_TTFF_time_int.ToString() + "s]";
                    }
                    else if (S0_T1_T2_item_fix_time >= s0_free_run_time && S0_T3_T4_item_fix_time > 0 && S0_T5_T6_item_fix_time > 0 && S0_T7_T8_item_fix_time > 0)                       //fix on ALL
                    {
                        S0_T3_remainder_T0 = s0_t3 / s0_t0;  //T3~T4打點次數
                        S0_T5_remainder_T0 = s0_t5 / s0_t0;  //T5~T6打點次數
                        S0_T7_remainder_T0 = s0_t7 / s0_t0;  //T7~T8打點次數

                        S0_T3_T4_cycle = S0_T3_T4_item_fix_time / S0_T3_remainder_T0;      //打點cycle
                        S0_T5_T6_cycle = S0_T5_T6_item_fix_time / S0_T5_remainder_T0;      //打點cycle
                        S0_T7_T8_cycle = S0_T7_T8_item_fix_time / S0_T7_remainder_T0;      //打點cycle

                        S0_T5_T6_remainder = S0_T5_T6_item_fix_time % S0_T5_remainder_T0;

                        if (S0_T7_T8_cycle != 0)                                       //有cycle
                        {
                            S0_T7_T8_remainder = S0_T7_T8_item_fix_time % S0_T7_remainder_T0;
                            s0_TTFF_time_int = (S0_T1_T2_item_fix_time * s0_t0) + (S0_T3_T4_cycle * (s0_t3 + s0_t4)) + (S0_T3_T4_remainder * s0_t0) + (S0_T5_T6_cycle * (s0_t5 + s0_t6)) + (S0_T5_T6_remainder * s0_t0) + (S0_T7_T8_cycle * (s0_t7 + s0_t8)) + (S0_T7_T8_remainder * s0_t0);
                        }
                        else if (S0_T7_T8_cycle == 0)                                  //沒有cycle 
                        {
                            S0_T7_T8_remainder = S0_T7_T8_item_fix_time % S0_T7_remainder_T0;
                            s0_TTFF_time_int = (S0_T1_T2_item_fix_time * s0_t0) + (S0_T3_T4_cycle * (s0_t3 + s0_t4)) + (S0_T3_T4_remainder * s0_t0) + (S0_T5_T6_cycle * (s0_t5 + s0_t6)) + (S0_T5_T6_remainder * s0_t0) + (S0_T7_T8_remainder * s0_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s0_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s0_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                        //s0_TTFF_time = "TTFF Usage Time = [" + s0_TTFF_time_int.ToString() + "s]";
                    }

                }
                else if (s0_first_fix_flag == 0)
                {
                    s0_TTFF_time = "TTFF Usage Time = [N/A]";
                }

                //Analyze UTC Usage
                if (s0_analyze_utc_time_flag == 1)
                {
                    TimeSpan Analyze_UTC_ts;           //轉換時分秒

                    if (S0_T1_T2_item_analyze_utc_time <= s0_free_run_time && S0_T3_T4_item_analyze_utc_time == 0 && S0_T5_T6_item_analyze_utc_time == 0)                           //Analyze_UTC on T1~T2 range
                    {
                        s0_Analyze_UTC_time_int = S0_T1_T2_item_analyze_utc_time * s0_t0;
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s0_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                        //s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + s0_Analyze_UTC_time_int.ToString() + "s]";
                    }
                    else if (S0_T1_T2_item_analyze_utc_time >= s0_free_run_time && S0_T3_T4_item_analyze_utc_time > 0 && S0_T5_T6_item_analyze_utc_time == 0)                       //Analyze_UTC on T1~T4 range
                    {
                        S0_T3_remainder_T0 = s0_t3 / s0_t0;  //T3~T4打點次數

                        S0_T3_T4_cycle = S0_T3_T4_item_analyze_utc_time / S0_T3_remainder_T0;      //打點cycle

                        if (S0_T3_T4_cycle != 0)                                       //有cycle
                        {
                            S0_T3_T4_remainder = S0_T3_T4_item_analyze_utc_time % S0_T3_remainder_T0;
                            s0_Analyze_UTC_time_int = (S0_T1_T2_item_analyze_utc_time * s0_t0) + (S0_T3_T4_cycle * (s0_t3 + s0_t4)) + (S0_T3_T4_remainder * s0_t0);
                        }
                        else if (S0_T3_T4_cycle == 0)                                  //沒有cycle 
                        {
                            S0_T3_T4_remainder = S0_T3_T4_item_analyze_utc_time % S0_T3_remainder_T0;
                            s0_Analyze_UTC_time_int = (S0_T1_T2_item_analyze_utc_time * s0_t0) + (S0_T3_T4_remainder * s0_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s0_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                        //s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + s0_Analyze_UTC_time_int.ToString() + "s]";
                    }
                    else if (S0_T1_T2_item_analyze_utc_time >= s0_free_run_time && S0_T3_T4_item_analyze_utc_time > 0 && S0_T5_T6_item_analyze_utc_time > 0)                        //Analyze_UTC on T1~T6 range
                    {
                        S0_T3_remainder_T0 = s0_t3 / s0_t0;  //T3~T4打點次數
                        S0_T5_remainder_T0 = s0_t5 / s0_t0;  //T5~T6打點次數

                        S0_T3_T4_cycle = S0_T3_T4_item_analyze_utc_time / S0_T3_remainder_T0;      //打點cycle
                        S0_T5_T6_cycle = S0_T5_T6_item_analyze_utc_time / S0_T5_remainder_T0;      //打點cycle

                        S0_T3_T4_remainder = S0_T3_T4_item_analyze_utc_time % S0_T3_remainder_T0;

                        if (S0_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S0_T5_T6_remainder = S0_T5_T6_item_analyze_utc_time % S0_T5_remainder_T0;
                            s0_Analyze_UTC_time_int = (S0_T1_T2_item_analyze_utc_time * s0_t0) + (S0_T3_T4_cycle * (s0_t3 + s0_t4)) + (S0_T3_T4_remainder * s0_t0) + (S0_T5_T6_cycle * (s0_t5 + s0_t6)) + (S0_T5_T6_remainder * s0_t0);
                        }
                        else if (S0_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S0_T5_T6_remainder = S0_T5_T6_item_analyze_utc_time % S0_T5_remainder_T0;
                            s0_Analyze_UTC_time_int = (S0_T1_T2_item_analyze_utc_time * s0_t0) + (S0_T3_T4_cycle * (s0_t3 + s0_t4)) + (S0_T3_T4_remainder * s0_t0) + (S0_T5_T6_remainder * s0_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s0_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                        //s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + s0_Analyze_UTC_time_int.ToString() + "s]";
                    }
                    else if (S0_T1_T2_item_analyze_utc_time >= s0_free_run_time && S0_T3_T4_item_analyze_utc_time == 0 && S0_T5_T6_item_analyze_utc_time > 0)                          //Analyze_UTC on T1~T2 T5~T6 range
                    {
                        S0_T5_remainder_T0 = s0_t5 / s0_t0;  //T3~T4打點次數

                        S0_T5_T6_cycle = S0_T5_T6_item_analyze_utc_time / S0_T5_remainder_T0;      //打點cycle

                        if (S0_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S0_T5_T6_remainder = S0_T5_T6_item_analyze_utc_time % S0_T5_remainder_T0;
                            s0_Analyze_UTC_time_int = (S0_T1_T2_item_analyze_utc_time * s0_t0) + (S0_T5_T6_cycle * (s0_t5 + s0_t6)) + (S0_T5_T6_remainder * s0_t0);
                        }
                        else if (S0_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S0_T5_T6_remainder = S0_T5_T6_item_analyze_utc_time % S0_T5_remainder_T0;
                            s0_Analyze_UTC_time_int = (S0_T1_T2_item_analyze_utc_time * s0_t0) + (S0_T5_T6_remainder * s0_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s0_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                        //s0_Analyze_UTC_time = "Analyze UTC Usage Time = [" + s0_Analyze_UTC_time_int.ToString() + "s]";
                    }

                }
                else if (s0_analyze_utc_time_flag == 0)
                {
                    s0_Analyze_UTC_time = "Analyze UTC Usage Time = [N/A]";
                }

                S0_T1_T2_item_fix_time = 0;
                S0_T3_T4_item_fix_time = 0;
                S0_T5_T6_item_fix_time = 0;
                S0_T7_T8_item_fix_time = 0;

                S0_T1_T2_item_analyze_utc_time = 0;
                S0_T3_T4_item_analyze_utc_time = 0;
                S0_T5_T6_item_analyze_utc_time = 0;

                S0_T3_remainder_T0 = 0;
                S0_T3_T4_cycle = 0;
                S0_T3_T4_remainder = 0;

                S0_T5_remainder_T0 = 0;
                S0_T5_T6_cycle = 0;
                S0_T5_T6_remainder = 0;

                S0_T7_remainder_T0 = 0;
                S0_T7_T8_cycle = 0;
                S0_T7_T8_remainder = 0;
                s0_first_fix_previous_item = 0;

                /**
                 *  S0 Usage Time
                 */

                first_stage_flag = 0;
                enable_count = 0;
                chk_enable_count = 0;
            }

            /**
             *  S1 Read Setting Mode
             */
            if (s1chkb.Checked == true & s1fileexistflag == 1)
            {
                richTextBox8.Clear();
                this.tabPage2.Text = textBox10.Text;
                foreach (String line in File.ReadLines(open_file2_path))
                {
                    FoundPeriodicCycle = line.IndexOf("PeriodicCycle:");
                    FoundT0 = line.IndexOf("T0:");
                    FoundT1 = line.IndexOf("T1:");
                    FoundT2 = line.IndexOf("T2:");
                    FoundT3 = line.IndexOf("T3:");
                    FoundT4 = line.IndexOf("T4:");
                    FoundT5 = line.IndexOf("T5:");
                    FoundT6 = line.IndexOf("T6:");
                    FoundT7 = line.IndexOf("T7:");
                    FoundT8 = line.IndexOf("T8:");
                    FoundCOM = line.IndexOf("COMPort:");
                    FoundSN = line.IndexOf("SerialNumber:");
                    FoundFV = line.IndexOf("FirmwareVersion:");
                    FoundEnable = line.IndexOf("Enable:");
                    FoundWorkMode = line.IndexOf("WorkMode:");
                    FoundStage = line.IndexOf("Stage:");
                    FoundFirstFixStage = line.IndexOf("FirstFixStage:");
                    FoundTraceFixStage = line.IndexOf("TraceFixStage:");
                    FoundPrecisionChk = line.IndexOf("PrecisionChk:");
                    FoundDistanceThreshold = line.IndexOf("DistanceThreshold:");
                    FoundDestinationLongitude = line.IndexOf("DestinationLongitude:");
                    FoundDestinationLatitude = line.IndexOf("DestinationLatitude:");
                    FoundDestinationAltitude = line.IndexOf("DestinationAltitude:");
                    FoundMotionDetection = line.IndexOf("[MotionDetection]");
                    FoundAngle = line.IndexOf("Angle");
                    FoundDataRate = line.IndexOf("DataRate");
                    FoundSampleFrequency = line.IndexOf("SampleFrequency");

                    FoundGPS_EPO = line.IndexOf("[GPS_EPO]");
                    FoundGLO_EPO = line.IndexOf("[GLO_EPO]");
                    FoundGAL_EPO = line.IndexOf("[GAL_EPO]");
                    FoundBEI_EPO = line.IndexOf("[BEI_EPO]");
                    FoundEpoDataNumber = line.IndexOf("EpoDataNumber");

                    FoundFWN = line.IndexOf("FWN");
                    FoundFTOW = line.IndexOf("FTOW");
                    FoundLWN = line.IndexOf("LWN");
                    FoundLTOW = line.IndexOf("LTOW");

                    if (FoundWorkMode != -1)
                    {
                        WorkMode = line;
                    }

                    if (FoundFirstFixStage != -1)
                    {
                        FirstFixStage = line;
                    }

                    if (FoundTraceFixStage != -1)
                    {
                        TraceFixStage = line;
                    }

                    if (FoundPrecisionChk != -1)
                    {
                        PrecisionChk = line.Substring(FoundPrecisionChk + 13, 1);

                        if (Int16.Parse(PrecisionChk) == 1)
                        {
                            PrecisionChk = "PrecisionChk: True";
                        }
                        else if (Int16.Parse(PrecisionChk) == 0)
                        {
                            PrecisionChk = "PrecisionChk: False";
                        }
                    }

                    if (FoundEnable != -1)
                    {
                        enable_count++;
                        Enable_all = line;
                        Enable = line.Substring(FoundEnable + 7, 1);
                        chk_enable_count = Int16.Parse(Enable);
                    }

                    if (first_stage_flag == 0 && FoundStage != -1)
                    {
                        first_stage_flag = 1;
                        Stage = line;
                    }

                    if (FoundCOM != -1)
                    {
                        COM = line.Substring(FoundCOM + 8);
                        label31.Text = COM;
                    }

                    if (FoundSN != -1)
                    {
                        SN = line.Substring(FoundSN + 13);
                        label30.Text = SN;
                    }

                    if (FoundFV != -1)
                    {
                        FV = line.Substring(FoundFV + 16);
                        label29.Text = FV;
                    }

                    if (FoundPeriodicCycle != -1)
                    {
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(FirstFixStage + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(TraceFixStage + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT0 != -1)
                    {
                        T0 = line.Substring(FoundT0 + 3);
                        s1_t0 = Int32.Parse(T0);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText("[Periodic]" + Environment.NewLine);
                        if (enable_count == 1)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(Stage + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(WorkMode + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT1 != -1)
                    {
                        T1 = line.Substring(FoundT1 + 3);
                        s1_t1 = Int32.Parse(T1);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT2 != -1)
                    {
                        T2 = line.Substring(FoundT2 + 3);
                        s1_t2 = Int32.Parse(T2);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT3 != -1)
                    {
                        T3 = line.Substring(FoundT3 + 3);
                        s1_t3 = Int32.Parse(T3);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT4 != -1)
                    {
                        T4 = line.Substring(FoundT4 + 3);
                        s1_t4 = Int32.Parse(T4);
                        richTextBox8.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT5 != -1)
                    {
                        T5 = line.Substring(FoundT5 + 3);
                        s1_t5 = Int32.Parse(T5);
                        richTextBox8.SelectionColor = Color.Orange;          //Orange
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText("[Dynamic]" + Environment.NewLine);
                        if (enable_count == 2)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox8.SelectionColor = Color.Orange;          //Orange
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox8.SelectionColor = Color.Orange;          //Orange
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox8.SelectionColor = Color.Orange;          //Orange
                        richTextBox8.AppendText(PrecisionChk + Environment.NewLine);
                        richTextBox8.SelectionColor = Color.Orange;          //Orange
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT6 != -1)
                    {
                        T6 = line.Substring(FoundT6 + 3);
                        s1_t6 = Int32.Parse(T6);
                        richTextBox8.SelectionColor = Color.Orange;          //Orange
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT7 != -1)
                    {
                        T7 = line.Substring(FoundT7 + 3);
                        s1_t7 = Int32.Parse(T7);
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText("[Geofencing]" + Environment.NewLine);
                        if (enable_count == 3)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                richTextBox8.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                richTextBox8.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT8 != -1)
                    {
                        T8 = line.Substring(FoundT8 + 3);
                        s1_t8 = Int32.Parse(T8);
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDistanceThreshold != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLongitude != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLatitude != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationAltitude != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundMotionDetection != -1)
                    {
                        MotionDetection = line;
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox8.AppendText(MotionDetection + Environment.NewLine);
                    }

                    if (FoundAngle != -1)
                    {
                        if (enable_count == 4)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox8.AppendText(Enable_all + Environment.NewLine);
                                richTextBox8.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDataRate != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundSampleFrequency != -1)
                    {
                        richTextBox8.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    /**
                     * MDA GNSS EPO ENABLE
                     */
                    if (FoundGPS_EPO != -1)
                    {
                        gnss_flag = 0;
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundGLO_EPO != -1)
                    {
                        gnss_flag = 1;
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundGAL_EPO != -1)
                    {
                        gnss_flag = 2;
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundBEI_EPO != -1)
                    {
                        gnss_flag = 3;
                        New_Font = new Font(richTextBox8.SelectionFont, richTextBox8.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox8.SelectionFont = New_Font;
                        richTextBox8.AppendText(line + Environment.NewLine);
                    }

                    if (FoundEpoDataNumber != -1)
                    {
                        EpoDataNumber[gnss_flag] = line;
                        EpoDataNumberEnable[gnss_flag] = line.Substring(FoundEpoDataNumber + 14);
                        if (Int32.Parse(EpoDataNumberEnable[gnss_flag]) == 12)
                        {
                            switch (gnss_flag)
                            {
                                case 0:
                                    S1_GNSS_EPO[gnss_flag] = "GPS EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 1:
                                    S1_GNSS_EPO[gnss_flag] = "GLO EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 2:
                                    S1_GNSS_EPO[gnss_flag] = "GAL EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 3:
                                    S1_GNSS_EPO[gnss_flag] = "BEI EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                            }
                        }
                        else
                        {
                            switch (gnss_flag)
                            {
                                case 0:
                                    S1_GNSS_EPO[gnss_flag] = "GPS EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 1:
                                    S1_GNSS_EPO[gnss_flag] = "GLO EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 2:
                                    S1_GNSS_EPO[gnss_flag] = "GAL EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 3:
                                    S1_GNSS_EPO[gnss_flag] = "BEI EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                            }
                        }
                    }

                    /**
                     * MDA GNSS EPO ENABLE
                     */

                    /**
                     * SETTING MODE GNSS EPO
                     */
                    if (FoundFWN != -1)
                    {
                        FWN[gnss_flag] = line;
                    }

                    if (FoundFTOW != -1)
                    {
                        FTOW[gnss_flag] = line;
                    }

                    if (FoundLWN != -1)
                    {
                        LWN[gnss_flag] = line;
                    }

                    if (FoundLTOW != -1)
                    {
                        LTOW[gnss_flag] = line;
                        richTextBox8.AppendText(EpoDataNumber[gnss_flag] + Environment.NewLine);
                        richTextBox8.AppendText(FWN[gnss_flag] + Environment.NewLine);
                        richTextBox8.AppendText(FTOW[gnss_flag] + Environment.NewLine);
                        richTextBox8.AppendText(LWN[gnss_flag] + Environment.NewLine);
                        richTextBox8.AppendText(LTOW[gnss_flag] + Environment.NewLine);
                    }
                    /**
                     * SETTING MODE GNSS EPO
                     */
                }

                /**
                 *  S1 Usage Time
                 */
                s1_TTFF_time_int = 0;
                s1_Analyze_UTC_time_int = 0;

                s1_free_run_time = s1_t1 / s1_t0;
                s1_t3_t4_time = s1_t3 / s1_t0;
                s1_dynamic_time = s1_t5 / s1_t0;
                s1_geofencing_time = s1_t7 / s1_t0;
                //TTFF Usage Time
                if (s1_first_fix_flag == 1)
                {
                    TimeSpan TTFF_ts;           //轉換時分秒

                    if (S1_T1_T2_item_fix_time <= s1_free_run_time && S1_T3_T4_item_fix_time == 0 && S1_T5_T6_item_fix_time == 0 && S1_T7_T8_item_fix_time == 0)                           //fix on T1~T2 range
                    {
                        s1_TTFF_time_int = S1_T1_T2_item_fix_time * s1_t0;
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s1_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S1_T1_T2_item_fix_time >= s1_free_run_time && S1_T3_T4_item_fix_time > 0 && S1_T5_T6_item_fix_time == 0 && S1_T7_T8_item_fix_time == 0)                       //fix on T1~T4 range
                    {
                        S1_T3_remainder_T0 = s1_t3 / s1_t0;  //T3~T4打點次數

                        S1_T3_T4_cycle = S1_T3_T4_item_fix_time / S1_T3_remainder_T0;      //打點cycle

                        if (S1_T3_T4_cycle != 0)                                       //有cycle
                        {
                            S1_T3_T4_remainder = S1_T3_T4_item_fix_time % S1_T3_remainder_T0;
                            s1_TTFF_time_int = (S1_T1_T2_item_fix_time * s1_t0) + (S1_T3_T4_cycle * (s1_t3 + s1_t4)) + (S1_T3_T4_remainder * s1_t0);
                        }
                        else if (S1_T3_T4_cycle == 0)                                  //沒有cycle 
                        {
                            S1_T3_T4_remainder = S1_T3_T4_item_fix_time % S1_T3_remainder_T0;
                            s1_TTFF_time_int = (S1_T1_T2_item_fix_time * s1_t0) + (S1_T3_T4_remainder * s1_t0);
                        }

                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s1_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S1_T1_T2_item_fix_time >= s1_free_run_time && S1_T3_T4_item_fix_time > 0 && S1_T5_T6_item_fix_time > 0 && S1_T7_T8_item_fix_time == 0)                        //fix on T1~T6 range
                    {
                        S1_T3_remainder_T0 = s1_t3 / s1_t0;  //T3~T4打點次數
                        S1_T5_remainder_T0 = s1_t5 / s1_t0;  //T5~T6打點次數

                        S1_T3_T4_cycle = S1_T3_T4_item_fix_time / S1_T3_remainder_T0;      //打點cycle
                        S1_T5_T6_cycle = S1_T5_T6_item_fix_time / S1_T5_remainder_T0;      //打點cycle

                        S1_T3_T4_remainder = S1_T3_T4_item_fix_time % S1_T3_remainder_T0;

                        if (S1_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S1_T5_T6_remainder = S1_T5_T6_item_fix_time % S1_T5_remainder_T0;
                            s1_TTFF_time_int = (S1_T1_T2_item_fix_time * s1_t0) + (S1_T3_T4_cycle * (s1_t3 + s1_t4)) + (S1_T3_T4_remainder * s1_t0) + (S1_T5_T6_cycle * (s1_t5 + s1_t6)) + (S1_T5_T6_remainder * s1_t0);
                        }
                        else if (S1_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S1_T5_T6_remainder = S1_T5_T6_item_fix_time % S1_T5_remainder_T0;
                            s1_TTFF_time_int = (S1_T1_T2_item_fix_time * s1_t0) + (S1_T3_T4_cycle * (s1_t3 + s1_t4)) + (S1_T3_T4_remainder * s1_t0) + (S1_T5_T6_remainder * s1_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s1_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S1_T1_T2_item_fix_time >= s1_free_run_time && S1_T3_T4_item_fix_time == 0 && S1_T5_T6_item_fix_time > 0 && S1_T7_T8_item_fix_time > 0)                       //fix on T1~T2 T5~T8
                    {
                        S1_T5_remainder_T0 = s1_t5 / s1_t0;  //T5~T6打點次數
                        S1_T7_remainder_T0 = s1_t7 / s1_t0;  //T7~T8打點次數

                        S1_T5_T6_cycle = S1_T5_T6_item_fix_time / S1_T5_remainder_T0;      //打點cycle
                        S1_T7_T8_cycle = S1_T7_T8_item_fix_time / S1_T7_remainder_T0;      //打點cycle

                        S1_T5_T6_remainder = S1_T5_T6_item_fix_time % S1_T5_remainder_T0;

                        if (S1_T7_T8_cycle != 0)                                       //有cycle
                        {
                            S1_T7_T8_remainder = S1_T7_T8_item_fix_time % S1_T7_remainder_T0;
                            s1_TTFF_time_int = (S1_T1_T2_item_fix_time * s1_t0) + (S1_T5_T6_cycle * (s1_t5 + s1_t6)) + (S1_T5_T6_remainder * s1_t0) + (S1_T7_T8_cycle * (s1_t7 + s1_t8)) + (S1_T7_T8_remainder * s1_t0);
                        }
                        else if (S1_T7_T8_cycle == 0)                                  //沒有cycle 
                        {
                            S1_T7_T8_remainder = S1_T7_T8_item_fix_time % S1_T7_remainder_T0;
                            s1_TTFF_time_int = (S1_T1_T2_item_fix_time * s1_t0) + (S1_T5_T6_cycle * (s1_t5 + s1_t6)) + (S1_T5_T6_remainder * s1_t0) + (S1_T7_T8_remainder * s1_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s1_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S1_T1_T2_item_fix_time >= s1_free_run_time && S1_T3_T4_item_fix_time > 0 && S1_T5_T6_item_fix_time > 0 && S1_T7_T8_item_fix_time > 0)                       //fix on ALL
                    {
                        S1_T3_remainder_T0 = s1_t3 / s1_t0;  //T3~T4打點次數
                        S1_T5_remainder_T0 = s1_t5 / s1_t0;  //T5~T6打點次數
                        S1_T7_remainder_T0 = s1_t7 / s1_t0;  //T7~T8打點次數

                        S1_T3_T4_cycle = S1_T3_T4_item_fix_time / S1_T3_remainder_T0;      //打點cycle
                        S1_T5_T6_cycle = S1_T5_T6_item_fix_time / S1_T5_remainder_T0;      //打點cycle
                        S1_T7_T8_cycle = S1_T7_T8_item_fix_time / S1_T7_remainder_T0;      //打點cycle

                        S1_T5_T6_remainder = S1_T5_T6_item_fix_time % S1_T5_remainder_T0;

                        if (S1_T7_T8_cycle != 0)                                       //有cycle
                        {
                            S1_T7_T8_remainder = S1_T7_T8_item_fix_time % S1_T7_remainder_T0;
                            s1_TTFF_time_int = (S1_T1_T2_item_fix_time * s1_t0) + (S1_T3_T4_cycle * (s1_t3 + s1_t4)) + (S1_T3_T4_remainder * s1_t0) + (S1_T5_T6_cycle * (s1_t5 + s1_t6)) + (S1_T5_T6_remainder * s1_t0) + (S1_T7_T8_cycle * (s1_t7 + s1_t8)) + (S1_T7_T8_remainder * s1_t0);
                        }
                        else if (S1_T7_T8_cycle == 0)                                  //沒有cycle 
                        {
                            S1_T7_T8_remainder = S1_T7_T8_item_fix_time % S1_T7_remainder_T0;
                            s1_TTFF_time_int = (S1_T1_T2_item_fix_time * s1_t0) + (S1_T3_T4_cycle * (s1_t3 + s1_t4)) + (S1_T3_T4_remainder * s1_t0) + (S1_T5_T6_cycle * (s1_t5 + s1_t6)) + (S1_T5_T6_remainder * s1_t0) + (S1_T7_T8_remainder * s1_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s1_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s1_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }

                }
                else if (s1_first_fix_flag == 0)
                {
                    s1_TTFF_time = "TTFF Usage Time = [N/A]";
                }

                //Analyze UTC Usage
                if (s1_analyze_utc_time_flag == 1)
                {
                    TimeSpan Analyze_UTC_ts;           //轉換時分秒

                    if (S1_T1_T2_item_analyze_utc_time <= s1_free_run_time && S1_T3_T4_item_analyze_utc_time == 0 && S1_T5_T6_item_analyze_utc_time == 0)                           //Analyze_UTC on T1~T2 range
                    {
                        s1_Analyze_UTC_time_int = S1_T1_T2_item_analyze_utc_time * s1_t0;
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s1_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S1_T1_T2_item_analyze_utc_time >= s1_free_run_time && S1_T3_T4_item_analyze_utc_time > 0 && S1_T5_T6_item_analyze_utc_time == 0)                       //Analyze_UTC on T1~T4 range
                    {
                        S1_T3_remainder_T0 = s1_t3 / s1_t0;  //T3~T4打點次數

                        S1_T3_T4_cycle = S1_T3_T4_item_analyze_utc_time / S1_T3_remainder_T0;      //打點cycle

                        if (S1_T3_T4_cycle != 0)                                       //有cycle
                        {
                            S1_T3_T4_remainder = S1_T3_T4_item_analyze_utc_time % S1_T3_remainder_T0;
                            s1_Analyze_UTC_time_int = (S1_T1_T2_item_analyze_utc_time * s1_t0) + (S1_T3_T4_cycle * (s1_t3 + s1_t4)) + (S1_T3_T4_remainder * s1_t0);
                        }
                        else if (S1_T3_T4_cycle == 0)                                  //沒有cycle 
                        {
                            S1_T3_T4_remainder = S1_T3_T4_item_analyze_utc_time % S1_T3_remainder_T0;
                            s1_Analyze_UTC_time_int = (S1_T1_T2_item_analyze_utc_time * s1_t0) + (S1_T3_T4_remainder * s1_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s1_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S1_T1_T2_item_analyze_utc_time >= s1_free_run_time && S1_T3_T4_item_analyze_utc_time > 0 && S1_T5_T6_item_analyze_utc_time > 0)                        //Analyze_UTC on T1~T6 range
                    {
                        S1_T3_remainder_T0 = s1_t3 / s1_t0;  //T3~T4打點次數
                        S1_T5_remainder_T0 = s1_t5 / s1_t0;  //T5~T6打點次數

                        S1_T3_T4_cycle = S1_T3_T4_item_analyze_utc_time / S1_T3_remainder_T0;      //打點cycle
                        S1_T5_T6_cycle = S1_T5_T6_item_analyze_utc_time / S1_T5_remainder_T0;      //打點cycle

                        S1_T3_T4_remainder = S1_T3_T4_item_analyze_utc_time % S1_T3_remainder_T0;

                        if (S1_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S1_T5_T6_remainder = S1_T5_T6_item_analyze_utc_time % S1_T5_remainder_T0;
                            s1_Analyze_UTC_time_int = (S1_T1_T2_item_analyze_utc_time * s1_t0) + (S1_T3_T4_cycle * (s1_t3 + s1_t4)) + (S1_T3_T4_remainder * s1_t0) + (S1_T5_T6_cycle * (s1_t5 + s1_t6)) + (S1_T5_T6_remainder * s1_t0);
                        }
                        else if (S1_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S1_T5_T6_remainder = S1_T5_T6_item_analyze_utc_time % S1_T5_remainder_T0;
                            s1_Analyze_UTC_time_int = (S1_T1_T2_item_analyze_utc_time * s1_t0) + (S1_T3_T4_cycle * (s1_t3 + s1_t4)) + (S1_T3_T4_remainder * s1_t0) + (S1_T5_T6_remainder * s1_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s1_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S1_T1_T2_item_analyze_utc_time >= s1_free_run_time && S1_T3_T4_item_analyze_utc_time == 0 && S1_T5_T6_item_analyze_utc_time > 0)                          //Analyze_UTC on T1~T2 T5~T6 range
                    {
                        S1_T5_remainder_T0 = s1_t5 / s1_t0;  //T3~T4打點次數

                        S1_T5_T6_cycle = S1_T5_T6_item_analyze_utc_time / S1_T5_remainder_T0;      //打點cycle

                        if (S1_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S1_T5_T6_remainder = S1_T5_T6_item_analyze_utc_time % S1_T5_remainder_T0;
                            s1_Analyze_UTC_time_int = (S1_T1_T2_item_analyze_utc_time * s1_t0) + (S1_T5_T6_cycle * (s1_t5 + s1_t6)) + (S1_T5_T6_remainder * s1_t0);
                        }
                        else if (S1_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S1_T5_T6_remainder = S1_T5_T6_item_analyze_utc_time % S1_T5_remainder_T0;
                            s1_Analyze_UTC_time_int = (S1_T1_T2_item_analyze_utc_time * s1_t0) + (S1_T5_T6_remainder * s1_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s1_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s1_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }

                }
                else if (s1_analyze_utc_time_flag == 0)
                {
                    s1_Analyze_UTC_time = "Analyze UTC Usage Time = [N/A]";
                }

                S1_T1_T2_item_fix_time = 0;
                S1_T3_T4_item_fix_time = 0;
                S1_T5_T6_item_fix_time = 0;
                S1_T7_T8_item_fix_time = 0;

                S1_T1_T2_item_analyze_utc_time = 0;
                S1_T3_T4_item_analyze_utc_time = 0;
                S1_T5_T6_item_analyze_utc_time = 0;

                S1_T3_remainder_T0 = 0;
                S1_T3_T4_cycle = 0;
                S1_T3_T4_remainder = 0;

                S1_T5_remainder_T0 = 0;
                S1_T5_T6_cycle = 0;
                S1_T5_T6_remainder = 0;

                S1_T7_remainder_T0 = 0;
                S1_T7_T8_cycle = 0;
                S1_T7_T8_remainder = 0;
                s1_first_fix_previous_item = 0;

                /**
                 *  S1 Usage Time
                 */

                first_stage_flag = 0;
                enable_count = 0;
                chk_enable_count = 0;
            }

            /**
             *  S2 Read Setting Mode
             */
            if (s2chkb.Checked == true & s2fileexistflag == 1)
            {
                richTextBox11.Clear();
                this.tabPage3.Text = textBox11.Text;
                foreach (String line in File.ReadLines(open_file3_path))
                {
                    FoundPeriodicCycle = line.IndexOf("PeriodicCycle:");
                    FoundT0 = line.IndexOf("T0:");
                    FoundT1 = line.IndexOf("T1:");
                    FoundT2 = line.IndexOf("T2:");
                    FoundT3 = line.IndexOf("T3:");
                    FoundT4 = line.IndexOf("T4:");
                    FoundT5 = line.IndexOf("T5:");
                    FoundT6 = line.IndexOf("T6:");
                    FoundT7 = line.IndexOf("T7:");
                    FoundT8 = line.IndexOf("T8:");
                    FoundCOM = line.IndexOf("COMPort:");
                    FoundSN = line.IndexOf("SerialNumber:");
                    FoundFV = line.IndexOf("FirmwareVersion:");
                    FoundEnable = line.IndexOf("Enable:");
                    FoundWorkMode = line.IndexOf("WorkMode:");
                    FoundStage = line.IndexOf("Stage:");
                    FoundFirstFixStage = line.IndexOf("FirstFixStage:");
                    FoundTraceFixStage = line.IndexOf("TraceFixStage:");
                    FoundPrecisionChk = line.IndexOf("PrecisionChk:");
                    FoundDistanceThreshold = line.IndexOf("DistanceThreshold:");
                    FoundDestinationLongitude = line.IndexOf("DestinationLongitude:");
                    FoundDestinationLatitude = line.IndexOf("DestinationLatitude:");
                    FoundDestinationAltitude = line.IndexOf("DestinationAltitude:");
                    FoundMotionDetection = line.IndexOf("[MotionDetection]");
                    FoundAngle = line.IndexOf("Angle");
                    FoundDataRate = line.IndexOf("DataRate");
                    FoundSampleFrequency = line.IndexOf("SampleFrequency");

                    FoundGPS_EPO = line.IndexOf("[GPS_EPO]");
                    FoundGLO_EPO = line.IndexOf("[GLO_EPO]");
                    FoundGAL_EPO = line.IndexOf("[GAL_EPO]");
                    FoundBEI_EPO = line.IndexOf("[BEI_EPO]");
                    FoundEpoDataNumber = line.IndexOf("EpoDataNumber");

                    FoundFWN = line.IndexOf("FWN");
                    FoundFTOW = line.IndexOf("FTOW");
                    FoundLWN = line.IndexOf("LWN");
                    FoundLTOW = line.IndexOf("LTOW");

                    if (FoundWorkMode != -1)
                    {
                        WorkMode = line;
                    }

                    if (FoundFirstFixStage != -1)
                    {
                        FirstFixStage = line;
                    }

                    if (FoundTraceFixStage != -1)
                    {
                        TraceFixStage = line;
                    }

                    if (FoundPrecisionChk != -1)
                    {
                        PrecisionChk = line.Substring(FoundPrecisionChk + 13, 1);

                        if (Int16.Parse(PrecisionChk) == 1)
                        {
                            PrecisionChk = "PrecisionChk: True";
                        }
                        else if (Int16.Parse(PrecisionChk) == 0)
                        {
                            PrecisionChk = "PrecisionChk: False";
                        }
                    }

                    if (FoundEnable != -1)
                    {
                        enable_count++;
                        Enable_all = line;
                        Enable = line.Substring(FoundEnable + 7, 1);
                        chk_enable_count = Int16.Parse(Enable);
                    }

                    if (first_stage_flag == 0 && FoundStage != -1)
                    {
                        first_stage_flag = 1;
                        Stage = line;
                    }

                    if (FoundCOM != -1)
                    {
                        COM = line.Substring(FoundCOM + 8);
                        label37.Text = COM;
                    }

                    if (FoundSN != -1)
                    {
                        SN = line.Substring(FoundSN + 13);
                        label36.Text = SN;
                    }

                    if (FoundFV != -1)
                    {
                        FV = line.Substring(FoundFV + 16);
                        label35.Text = FV;
                    }

                    if (FoundPeriodicCycle != -1)
                    {
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(FirstFixStage + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(TraceFixStage + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT0 != -1)
                    {
                        T0 = line.Substring(FoundT0 + 3);
                        s2_t0 = Int32.Parse(T0);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText("[Periodic]" + Environment.NewLine);
                        if (enable_count == 1)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(Stage + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(WorkMode + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT1 != -1)
                    {
                        T1 = line.Substring(FoundT1 + 3);
                        s2_t1 = Int32.Parse(T1);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT2 != -1)
                    {
                        T2 = line.Substring(FoundT2 + 3);
                        s2_t2 = Int32.Parse(T2);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT3 != -1)
                    {
                        T3 = line.Substring(FoundT3 + 3);
                        s2_t3 = Int32.Parse(T3);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT4 != -1)
                    {
                        T4 = line.Substring(FoundT4 + 3);
                        s2_t4 = Int32.Parse(T4);
                        richTextBox11.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT5 != -1)
                    {
                        T5 = line.Substring(FoundT5 + 3);
                        s2_t5 = Int32.Parse(T5);
                        richTextBox11.SelectionColor = Color.Orange;          //Orange
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText("[Dynamic]" + Environment.NewLine);
                        if (enable_count == 2)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox11.SelectionColor = Color.Orange;          //Orange
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox11.SelectionColor = Color.Orange;          //Orange
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox11.SelectionColor = Color.Orange;          //Orange
                        richTextBox11.AppendText(PrecisionChk + Environment.NewLine);
                        richTextBox11.SelectionColor = Color.Orange;          //Orange
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT6 != -1)
                    {
                        T6 = line.Substring(FoundT6 + 3);
                        s2_t6 = Int32.Parse(T6);
                        richTextBox11.SelectionColor = Color.Orange;          //Orange
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT7 != -1)
                    {
                        T7 = line.Substring(FoundT7 + 3);
                        s2_t7 = Int32.Parse(T7);
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText("[Geofencing]" + Environment.NewLine);
                        if (enable_count == 3)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT8 != -1)
                    {
                        T8 = line.Substring(FoundT8 + 3);
                        s2_t8 = Int32.Parse(T8);
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDistanceThreshold != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLongitude != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLatitude != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationAltitude != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundMotionDetection != -1)
                    {
                        MotionDetection = line;
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox11.AppendText(MotionDetection + Environment.NewLine);
                    }

                    if (FoundAngle != -1)
                    {
                        if (enable_count == 4)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox11.AppendText(Enable_all + Environment.NewLine);
                                richTextBox11.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDataRate != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundSampleFrequency != -1)
                    {
                        richTextBox11.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    /**
                     * MDA GNSS EPO ENABLE
                     */
                    if (FoundGPS_EPO != -1)
                    {
                        gnss_flag = 0;
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundGLO_EPO != -1)
                    {
                        gnss_flag = 1;
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundGAL_EPO != -1)
                    {
                        gnss_flag = 2;
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundBEI_EPO != -1)
                    {
                        gnss_flag = 3;
                        New_Font = new Font(richTextBox11.SelectionFont, richTextBox11.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox11.SelectionFont = New_Font;
                        richTextBox11.AppendText(line + Environment.NewLine);
                    }

                    if (FoundEpoDataNumber != -1)
                    {
                        EpoDataNumber[gnss_flag] = line;
                        EpoDataNumberEnable[gnss_flag] = line.Substring(FoundEpoDataNumber + 14);
                        if (Int32.Parse(EpoDataNumberEnable[gnss_flag]) == 12)
                        {
                            switch (gnss_flag)
                            {
                                case 0:
                                    S2_GNSS_EPO[gnss_flag] = "GPS EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 1:
                                    S2_GNSS_EPO[gnss_flag] = "GLO EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 2:
                                    S2_GNSS_EPO[gnss_flag] = "GAL EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 3:
                                    S2_GNSS_EPO[gnss_flag] = "BEI EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                            }
                        }
                        else
                        {
                            switch (gnss_flag)
                            {
                                case 0:
                                    S2_GNSS_EPO[gnss_flag] = "GPS EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 1:
                                    S2_GNSS_EPO[gnss_flag] = "GLO EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 2:
                                    S2_GNSS_EPO[gnss_flag] = "GAL EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 3:
                                    S2_GNSS_EPO[gnss_flag] = "BEI EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                            }
                        }
                    }

                    /**
                     * MDA GNSS EPO ENABLE
                     */

                    /**
                     * SETTING MODE GNSS EPO
                     */
                    if (FoundFWN != -1)
                    {
                        FWN[gnss_flag] = line;
                    }

                    if (FoundFTOW != -1)
                    {
                        FTOW[gnss_flag] = line;
                    }

                    if (FoundLWN != -1)
                    {
                        LWN[gnss_flag] = line;
                    }

                    if (FoundLTOW != -1)
                    {
                        LTOW[gnss_flag] = line;
                        richTextBox11.AppendText(EpoDataNumber[gnss_flag] + Environment.NewLine);
                        richTextBox11.AppendText(FWN[gnss_flag] + Environment.NewLine);
                        richTextBox11.AppendText(FTOW[gnss_flag] + Environment.NewLine);
                        richTextBox11.AppendText(LWN[gnss_flag] + Environment.NewLine);
                        richTextBox11.AppendText(LTOW[gnss_flag] + Environment.NewLine);
                    }
                    /**
                     * SETTING MODE GNSS EPO
                     */
                }

                /**
                 *  S2 Usage Time
                 */
                s2_TTFF_time_int = 0;
                s2_Analyze_UTC_time_int = 0;

                s2_free_run_time = s2_t1 / s2_t0;
                s2_t3_t4_time = s2_t3 / s2_t0;
                s2_dynamic_time = s2_t5 / s2_t0;
                s2_geofencing_time = s2_t7 / s2_t0;

                //TTFF Usage Time
                if (s2_first_fix_flag == 1)
                {
                    TimeSpan TTFF_ts;           //轉換時分秒

                    if (S2_T1_T2_item_fix_time <= s2_free_run_time && S2_T3_T4_item_fix_time == 0 && S2_T5_T6_item_fix_time == 0 && S2_T7_T8_item_fix_time == 0)                           //fix on T1~T2 range
                    {
                        s2_TTFF_time_int = S2_T1_T2_item_fix_time * s2_t0;
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s2_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S2_T1_T2_item_fix_time >= s2_free_run_time && S2_T3_T4_item_fix_time > 0 && S2_T5_T6_item_fix_time == 0 && S2_T7_T8_item_fix_time == 0)                       //fix on T1~T4 range
                    {
                        S2_T3_remainder_T0 = s2_t3 / s2_t0;  //T3~T4打點次數

                        S2_T3_T4_cycle = S2_T3_T4_item_fix_time / S2_T3_remainder_T0;      //打點cycle

                        if (S2_T3_T4_cycle != 0)                                       //有cycle
                        {
                            S2_T3_T4_remainder = S2_T3_T4_item_fix_time % S2_T3_remainder_T0;
                            s2_TTFF_time_int = (S2_T1_T2_item_fix_time * s2_t0) + (S2_T3_T4_cycle * (s2_t3 + s2_t4)) + (S2_T3_T4_remainder * s2_t0);
                        }
                        else if (S2_T3_T4_cycle == 0)                                  //沒有cycle 
                        {
                            S2_T3_T4_remainder = S2_T3_T4_item_fix_time % S2_T3_remainder_T0;
                            s2_TTFF_time_int = (S2_T1_T2_item_fix_time * s2_t0) + (S2_T3_T4_remainder * s2_t0);
                        }

                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s2_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S2_T1_T2_item_fix_time >= s2_free_run_time && S2_T3_T4_item_fix_time > 0 && S2_T5_T6_item_fix_time > 0 && S2_T7_T8_item_fix_time == 0)                        //fix on T1~T6 range
                    {
                        S2_T3_remainder_T0 = s2_t3 / s2_t0;  //T3~T4打點次數
                        S2_T5_remainder_T0 = s2_t5 / s2_t0;  //T5~T6打點次數

                        S2_T3_T4_cycle = S2_T3_T4_item_fix_time / S2_T3_remainder_T0;      //打點cycle
                        S2_T5_T6_cycle = S2_T5_T6_item_fix_time / S2_T5_remainder_T0;      //打點cycle

                        S2_T3_T4_remainder = S2_T3_T4_item_fix_time % S2_T3_remainder_T0;

                        if (S2_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S2_T5_T6_remainder = S2_T5_T6_item_fix_time % S2_T5_remainder_T0;
                            s2_TTFF_time_int = (S2_T1_T2_item_fix_time * s2_t0) + (S2_T3_T4_cycle * (s2_t3 + s2_t4)) + (S2_T3_T4_remainder * s2_t0) + (S2_T5_T6_cycle * (s2_t5 + s2_t6)) + (S2_T5_T6_remainder * s2_t0);
                        }
                        else if (S2_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S2_T5_T6_remainder = S2_T5_T6_item_fix_time % S2_T5_remainder_T0;
                            s2_TTFF_time_int = (S2_T1_T2_item_fix_time * s2_t0) + (S2_T3_T4_cycle * (s2_t3 + s2_t4)) + (S2_T3_T4_remainder * s2_t0) + (S2_T5_T6_remainder * s2_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s2_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S2_T1_T2_item_fix_time >= s2_free_run_time && S2_T3_T4_item_fix_time == 0 && S2_T5_T6_item_fix_time > 0 && S2_T7_T8_item_fix_time > 0)                       //fix on T1~T2 T5~T8
                    {
                        S2_T5_remainder_T0 = s2_t5 / s2_t0;  //T5~T6打點次數
                        S2_T7_remainder_T0 = s2_t7 / s2_t0;  //T7~T8打點次數

                        S2_T5_T6_cycle = S2_T5_T6_item_fix_time / S2_T5_remainder_T0;      //打點cycle
                        S2_T7_T8_cycle = S2_T7_T8_item_fix_time / S2_T7_remainder_T0;      //打點cycle

                        S2_T5_T6_remainder = S2_T5_T6_item_fix_time % S2_T5_remainder_T0;

                        if (S2_T7_T8_cycle != 0)                                       //有cycle
                        {
                            S2_T7_T8_remainder = S2_T7_T8_item_fix_time % S2_T7_remainder_T0;
                            s2_TTFF_time_int = (S2_T1_T2_item_fix_time * s2_t0) + (S2_T5_T6_cycle * (s2_t5 + s2_t6)) + (S2_T5_T6_remainder * s2_t0) + (S2_T7_T8_cycle * (s2_t7 + s2_t8)) + (S2_T7_T8_remainder * s2_t0);
                        }
                        else if (S2_T7_T8_cycle == 0)                                  //沒有cycle 
                        {
                            S2_T7_T8_remainder = S2_T7_T8_item_fix_time % S2_T7_remainder_T0;
                            s2_TTFF_time_int = (S2_T1_T2_item_fix_time * s2_t0) + (S2_T5_T6_cycle * (s2_t5 + s2_t6)) + (S2_T5_T6_remainder * s2_t0) + (S2_T7_T8_remainder * s2_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s2_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S2_T1_T2_item_fix_time >= s2_free_run_time && S2_T3_T4_item_fix_time > 0 && S2_T5_T6_item_fix_time > 0 && S2_T7_T8_item_fix_time > 0)                       //fix on ALL
                    {
                        S2_T3_remainder_T0 = s2_t3 / s2_t0;  //T3~T4打點次數
                        S2_T5_remainder_T0 = s2_t5 / s2_t0;  //T5~T6打點次數
                        S2_T7_remainder_T0 = s2_t7 / s2_t0;  //T7~T8打點次數

                        S2_T3_T4_cycle = S2_T3_T4_item_fix_time / S2_T3_remainder_T0;      //打點cycle
                        S2_T5_T6_cycle = S2_T5_T6_item_fix_time / S2_T5_remainder_T0;      //打點cycle
                        S2_T7_T8_cycle = S2_T7_T8_item_fix_time / S2_T7_remainder_T0;      //打點cycle

                        S2_T5_T6_remainder = S2_T5_T6_item_fix_time % S2_T5_remainder_T0;

                        if (S2_T7_T8_cycle != 0)                                       //有cycle
                        {
                            S2_T7_T8_remainder = S2_T7_T8_item_fix_time % S2_T7_remainder_T0;
                            s2_TTFF_time_int = (S2_T1_T2_item_fix_time * s2_t0) + (S2_T3_T4_cycle * (s2_t3 + s2_t4)) + (S2_T3_T4_remainder * s2_t0) + (S2_T5_T6_cycle * (s2_t5 + s2_t6)) + (S2_T5_T6_remainder * s2_t0) + (S2_T7_T8_cycle * (s2_t7 + s2_t8)) + (S2_T7_T8_remainder * s2_t0);
                        }
                        else if (S2_T7_T8_cycle == 0)                                  //沒有cycle 
                        {
                            S2_T7_T8_remainder = S2_T7_T8_item_fix_time % S2_T7_remainder_T0;
                            s2_TTFF_time_int = (S2_T1_T2_item_fix_time * s2_t0) + (S2_T3_T4_cycle * (s2_t3 + s2_t4)) + (S2_T3_T4_remainder * s2_t0) + (S2_T5_T6_cycle * (s2_t5 + s2_t6)) + (S2_T5_T6_remainder * s2_t0) + (S2_T7_T8_remainder * s2_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s2_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s2_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }

                }
                else if (s2_first_fix_flag == 0)
                {
                    s2_TTFF_time = "TTFF Usage Time = [N/A]";
                }

                //Analyze UTC Usage
                if (s2_analyze_utc_time_flag == 1)
                {
                    TimeSpan Analyze_UTC_ts;           //轉換時分秒

                    if (S2_T1_T2_item_analyze_utc_time <= s2_free_run_time && S2_T3_T4_item_analyze_utc_time == 0 && S2_T5_T6_item_analyze_utc_time == 0)                           //Analyze_UTC on T1~T2 range
                    {
                        s2_Analyze_UTC_time_int = S2_T1_T2_item_analyze_utc_time * s2_t0;
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s2_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s2_Analyze_UTC_time = "TAnalyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S2_T1_T2_item_analyze_utc_time >= s2_free_run_time && S2_T3_T4_item_analyze_utc_time > 0 && S2_T5_T6_item_analyze_utc_time == 0)                       //Analyze_UTC on T1~T4 range
                    {
                        S2_T3_remainder_T0 = s2_t3 / s2_t0;  //T3~T4打點次數

                        S2_T3_T4_cycle = S2_T3_T4_item_analyze_utc_time / S2_T3_remainder_T0;      //打點cycle

                        if (S2_T3_T4_cycle != 0)                                       //有cycle
                        {
                            S2_T3_T4_remainder = S2_T3_T4_item_analyze_utc_time % S2_T3_remainder_T0;
                            s2_Analyze_UTC_time_int = (S2_T1_T2_item_analyze_utc_time * s2_t0) + (S2_T3_T4_cycle * (s2_t3 + s2_t4)) + (S2_T3_T4_remainder * s2_t0);
                        }
                        else if (S2_T3_T4_cycle == 0)                                  //沒有cycle 
                        {
                            S2_T3_T4_remainder = S2_T3_T4_item_analyze_utc_time % S2_T3_remainder_T0;
                            s2_Analyze_UTC_time_int = (S2_T1_T2_item_analyze_utc_time * s2_t0) + (S2_T3_T4_remainder * s2_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s2_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S2_T1_T2_item_analyze_utc_time >= s2_free_run_time && S2_T3_T4_item_analyze_utc_time > 0 && S2_T5_T6_item_analyze_utc_time > 0)                        //Analyze_UTC on T1~T6 range
                    {
                        S2_T3_remainder_T0 = s2_t3 / s2_t0;  //T3~T4打點次數
                        S2_T5_remainder_T0 = s2_t5 / s2_t0;  //T5~T6打點次數

                        S2_T3_T4_cycle = S2_T3_T4_item_analyze_utc_time / S2_T3_remainder_T0;      //打點cycle
                        S2_T5_T6_cycle = S2_T5_T6_item_analyze_utc_time / S2_T5_remainder_T0;      //打點cycle

                        S2_T3_T4_remainder = S2_T3_T4_item_analyze_utc_time % S2_T3_remainder_T0;

                        if (S2_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S2_T5_T6_remainder = S2_T5_T6_item_analyze_utc_time % S2_T5_remainder_T0;
                            s2_Analyze_UTC_time_int = (S2_T1_T2_item_analyze_utc_time * s2_t0) + (S2_T3_T4_cycle * (s2_t3 + s2_t4)) + (S2_T3_T4_remainder * s2_t0) + (S2_T5_T6_cycle * (s2_t5 + s2_t6)) + (S2_T5_T6_remainder * s2_t0);
                        }
                        else if (S2_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S2_T5_T6_remainder = S2_T5_T6_item_analyze_utc_time % S2_T5_remainder_T0;
                            s2_Analyze_UTC_time_int = (S2_T1_T2_item_analyze_utc_time * s2_t0) + (S2_T3_T4_cycle * (s2_t3 + s2_t4)) + (S2_T3_T4_remainder * s2_t0) + (S2_T5_T6_remainder * s2_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s2_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S2_T1_T2_item_analyze_utc_time >= s2_free_run_time && S2_T3_T4_item_analyze_utc_time == 0 && S2_T5_T6_item_analyze_utc_time > 0)                          //Analyze_UTC on T1~T2 T5~T6 range
                    {
                        S2_T5_remainder_T0 = s2_t5 / s2_t0;  //T3~T4打點次數

                        S2_T5_T6_cycle = S2_T5_T6_item_analyze_utc_time / S2_T5_remainder_T0;      //打點cycle

                        if (S2_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S2_T5_T6_remainder = S2_T5_T6_item_analyze_utc_time % S2_T5_remainder_T0;
                            s2_Analyze_UTC_time_int = (S2_T1_T2_item_analyze_utc_time * s2_t0) + (S2_T5_T6_cycle * (s2_t5 + s2_t6)) + (S2_T5_T6_remainder * s2_t0);
                        }
                        else if (S2_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S2_T5_T6_remainder = S2_T5_T6_item_analyze_utc_time % S2_T5_remainder_T0;
                            s2_Analyze_UTC_time_int = (S2_T1_T2_item_analyze_utc_time * s2_t0) + (S2_T5_T6_remainder * s2_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s2_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s2_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }

                }
                else if (s2_analyze_utc_time_flag == 0)
                {
                    s2_Analyze_UTC_time = "Analyze UTC Usage Time = [N/A]";
                }

                S2_T1_T2_item_fix_time = 0;
                S2_T3_T4_item_fix_time = 0;
                S2_T5_T6_item_fix_time = 0;
                S2_T7_T8_item_fix_time = 0;

                S2_T1_T2_item_analyze_utc_time = 0;
                S2_T3_T4_item_analyze_utc_time = 0;
                S2_T5_T6_item_analyze_utc_time = 0;

                S2_T3_remainder_T0 = 0;
                S2_T3_T4_cycle = 0;
                S2_T3_T4_remainder = 0;

                S2_T5_remainder_T0 = 0;
                S2_T5_T6_cycle = 0;
                S2_T5_T6_remainder = 0;

                S2_T7_remainder_T0 = 0;
                S2_T7_T8_cycle = 0;
                S2_T7_T8_remainder = 0;
                s2_first_fix_previous_item = 0;

                /**
                 *  S2 Usage Time
                 */

                first_stage_flag = 0;
                enable_count = 0;
                chk_enable_count = 0;
            }

            /**
             *  S3 Read Setting Mode
             */
            if (s3chkb.Checked == true & s3fileexistflag == 1)
            {
                richTextBox12.Clear();
                this.tabPage4.Text = textBox12.Text;
                foreach (String line in File.ReadLines(open_file4_path))
                {
                    FoundPeriodicCycle = line.IndexOf("PeriodicCycle:");
                    FoundT0 = line.IndexOf("T0:");
                    FoundT1 = line.IndexOf("T1:");
                    FoundT2 = line.IndexOf("T2:");
                    FoundT3 = line.IndexOf("T3:");
                    FoundT4 = line.IndexOf("T4:");
                    FoundT5 = line.IndexOf("T5:");
                    FoundT6 = line.IndexOf("T6:");
                    FoundT7 = line.IndexOf("T7:");
                    FoundT8 = line.IndexOf("T8:");
                    FoundCOM = line.IndexOf("COMPort:");
                    FoundSN = line.IndexOf("SerialNumber:");
                    FoundFV = line.IndexOf("FirmwareVersion:");
                    FoundEnable = line.IndexOf("Enable:");
                    FoundWorkMode = line.IndexOf("WorkMode:");
                    FoundStage = line.IndexOf("Stage:");
                    FoundFirstFixStage = line.IndexOf("FirstFixStage:");
                    FoundTraceFixStage = line.IndexOf("TraceFixStage:");
                    FoundPrecisionChk = line.IndexOf("PrecisionChk:");
                    FoundDistanceThreshold = line.IndexOf("DistanceThreshold:");
                    FoundDestinationLongitude = line.IndexOf("DestinationLongitude:");
                    FoundDestinationLatitude = line.IndexOf("DestinationLatitude:");
                    FoundDestinationAltitude = line.IndexOf("DestinationAltitude:");
                    FoundMotionDetection = line.IndexOf("[MotionDetection]");
                    FoundAngle = line.IndexOf("Angle");
                    FoundDataRate = line.IndexOf("DataRate");
                    FoundSampleFrequency = line.IndexOf("SampleFrequency");

                    FoundGPS_EPO = line.IndexOf("[GPS_EPO]");
                    FoundGLO_EPO = line.IndexOf("[GLO_EPO]");
                    FoundGAL_EPO = line.IndexOf("[GAL_EPO]");
                    FoundBEI_EPO = line.IndexOf("[BEI_EPO]");
                    FoundEpoDataNumber = line.IndexOf("EpoDataNumber");

                    FoundFWN = line.IndexOf("FWN");
                    FoundFTOW = line.IndexOf("FTOW");
                    FoundLWN = line.IndexOf("LWN");
                    FoundLTOW = line.IndexOf("LTOW");

                    if (FoundWorkMode != -1)
                    {
                        WorkMode = line;
                    }

                    if (FoundFirstFixStage != -1)
                    {
                        FirstFixStage = line;
                    }

                    if (FoundTraceFixStage != -1)
                    {
                        TraceFixStage = line;
                    }

                    if (FoundPrecisionChk != -1)
                    {
                        PrecisionChk = line.Substring(FoundPrecisionChk + 13, 1);

                        if (Int16.Parse(PrecisionChk) == 1)
                        {
                            PrecisionChk = "PrecisionChk: True";
                        }
                        else if (Int16.Parse(PrecisionChk) == 0)
                        {
                            PrecisionChk = "PrecisionChk: False";
                        }
                    }

                    if (FoundEnable != -1)
                    {
                        enable_count++;
                        Enable_all = line;
                        Enable = line.Substring(FoundEnable + 7, 1);
                        chk_enable_count = Int16.Parse(Enable);
                    }

                    if (first_stage_flag == 0 && FoundStage != -1)
                    {
                        first_stage_flag = 1;
                        Stage = line;
                    }

                    if (FoundCOM != -1)
                    {
                        COM = line.Substring(FoundCOM + 8);
                        label43.Text = COM;
                    }

                    if (FoundSN != -1)
                    {
                        SN = line.Substring(FoundSN + 13);
                        label42.Text = SN;
                    }

                    if (FoundFV != -1)
                    {
                        FV = line.Substring(FoundFV + 16);
                        label41.Text = FV;
                    }

                    if (FoundPeriodicCycle != -1)
                    {
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(FirstFixStage + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(TraceFixStage + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT0 != -1)
                    {
                        T0 = line.Substring(FoundT0 + 3);
                        s3_t0 = Int32.Parse(T0);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText("[Periodic]" + Environment.NewLine);
                        if (enable_count == 1)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(Stage + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(WorkMode + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT1 != -1)
                    {
                        T1 = line.Substring(FoundT1 + 3);
                        s3_t1 = Int32.Parse(T1);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT2 != -1)
                    {
                        T2 = line.Substring(FoundT2 + 3);
                        s3_t2 = Int32.Parse(T2);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT3 != -1)
                    {
                        T3 = line.Substring(FoundT3 + 3);
                        s3_t3 = Int32.Parse(T3);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT4 != -1)
                    {
                        T4 = line.Substring(FoundT4 + 3);
                        s3_t4 = Int32.Parse(T4);
                        richTextBox12.SelectionColor = Color.Blue;                                               //BLUE
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT5 != -1)
                    {
                        T5 = line.Substring(FoundT5 + 3);
                        s3_t5 = Int32.Parse(T5);
                        richTextBox12.SelectionColor = Color.Orange;          //Orange
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText("[Dynamic]" + Environment.NewLine);
                        if (enable_count == 2)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox12.SelectionColor = Color.Orange;          //Orange
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox12.SelectionColor = Color.Orange;          //Orange
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox12.SelectionColor = Color.Orange;          //Orange
                        richTextBox12.AppendText(PrecisionChk + Environment.NewLine);
                        richTextBox12.SelectionColor = Color.Orange;          //Orange
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT6 != -1)
                    {
                        T6 = line.Substring(FoundT6 + 3);
                        s3_t6 = Int32.Parse(T6);
                        richTextBox12.SelectionColor = Color.Orange;          //Orange
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT7 != -1)
                    {
                        T7 = line.Substring(FoundT7 + 3);
                        s3_t7 = Int32.Parse(T7);
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText("[Geofencing]" + Environment.NewLine);
                        if (enable_count == 3)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundT8 != -1)
                    {
                        T8 = line.Substring(FoundT8 + 3);
                        s3_t8 = Int32.Parse(T8);
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDistanceThreshold != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLongitude != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationLatitude != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDestinationAltitude != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(32, 178, 170);          //LightSeaGreen
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundMotionDetection != -1)
                    {
                        MotionDetection = line;
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox12.AppendText(MotionDetection + Environment.NewLine);
                    }

                    if (FoundAngle != -1)
                    {
                        if (enable_count == 4)
                        {
                            if (chk_enable_count == 1)
                            {
                                richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: True" + Environment.NewLine);
                            }
                            else if (chk_enable_count == 0)
                            {
                                richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                                //richTextBox12.AppendText(Enable_all + Environment.NewLine);
                                richTextBox12.AppendText("Enable: False" + Environment.NewLine);
                            }
                        }
                        richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundDataRate != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundSampleFrequency != -1)
                    {
                        richTextBox12.SelectionColor = Color.FromArgb(165, 42, 42);          //brown
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    /**
                     * MDA GNSS EPO ENABLE
                     */
                    if (FoundGPS_EPO != -1)
                    {
                        gnss_flag = 0;
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundGLO_EPO != -1)
                    {
                        gnss_flag = 1;
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundGAL_EPO != -1)
                    {
                        gnss_flag = 2;
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundBEI_EPO != -1)
                    {
                        gnss_flag = 3;
                        New_Font = new Font(richTextBox12.SelectionFont, richTextBox12.SelectionFont.Style ^ FontStyle.Bold);
                        richTextBox12.SelectionFont = New_Font;
                        richTextBox12.AppendText(line + Environment.NewLine);
                    }

                    if (FoundEpoDataNumber != -1)
                    {
                        EpoDataNumber[gnss_flag] = line;
                        EpoDataNumberEnable[gnss_flag] = line.Substring(FoundEpoDataNumber + 14);
                        if (Int32.Parse(EpoDataNumberEnable[gnss_flag]) == 12)
                        {
                            switch (gnss_flag)
                            {
                                case 0:
                                    S3_GNSS_EPO[gnss_flag] = "GPS EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 1:
                                    S3_GNSS_EPO[gnss_flag] = "GLO EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 2:
                                    S3_GNSS_EPO[gnss_flag] = "GAL EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                                case 3:
                                    S3_GNSS_EPO[gnss_flag] = "BEI EPO Enable = [True]";        //for write to "MDA" csv
                                    break;
                            }
                        }
                        else
                        {
                            switch (gnss_flag)
                            {
                                case 0:
                                    S3_GNSS_EPO[gnss_flag] = "GPS EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 1:
                                    S3_GNSS_EPO[gnss_flag] = "GLO EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 2:
                                    S3_GNSS_EPO[gnss_flag] = "GAL EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                                case 3:
                                    S3_GNSS_EPO[gnss_flag] = "BEI EPO Enable = [False]";        //for write to "MDA" csv
                                    break;
                            }
                        }
                    }

                    /**
                     * MDA GNSS EPO ENABLE
                     */

                    /**
                     * SETTING MODE GNSS EPO
                     */
                    if (FoundFWN != -1)
                    {
                        FWN[gnss_flag] = line;
                    }

                    if (FoundFTOW != -1)
                    {
                        FTOW[gnss_flag] = line;
                    }

                    if (FoundLWN != -1)
                    {
                        LWN[gnss_flag] = line;
                    }

                    if (FoundLTOW != -1)
                    {
                        LTOW[gnss_flag] = line;
                        richTextBox12.AppendText(EpoDataNumber[gnss_flag] + Environment.NewLine);
                        richTextBox12.AppendText(FWN[gnss_flag] + Environment.NewLine);
                        richTextBox12.AppendText(FTOW[gnss_flag] + Environment.NewLine);
                        richTextBox12.AppendText(LWN[gnss_flag] + Environment.NewLine);
                        richTextBox12.AppendText(LTOW[gnss_flag] + Environment.NewLine);
                    }
                    /**
                     * SETTING MODE GNSS EPO
                     */
                }


                /**
                 *  S3 Usage Time
                 */
                s3_TTFF_time_int = 0;
                s3_Analyze_UTC_time_int = 0;

                s3_free_run_time = s3_t1 / s3_t0;
                s3_t3_t4_time = s3_t3 / s3_t0;
                s3_dynamic_time = s3_t5 / s3_t0;
                s3_geofencing_time = s3_t7 / s3_t0;

                //TTFF Usage Time
                if (s3_first_fix_flag == 1)
                {
                    TimeSpan TTFF_ts;           //轉換時分秒

                    if (S3_T1_T2_item_fix_time <= s3_free_run_time && S3_T3_T4_item_fix_time == 0 && S3_T5_T6_item_fix_time == 0 && S3_T7_T8_item_fix_time == 0)                           //fix on T1~T2 range
                    {
                        s3_TTFF_time_int = S3_T1_T2_item_fix_time * s3_t0;
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s3_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S3_T1_T2_item_fix_time >= s3_free_run_time && S3_T3_T4_item_fix_time > 0 && S3_T5_T6_item_fix_time == 0 && S3_T7_T8_item_fix_time == 0)                       //fix on T1~T4 range
                    {
                        S3_T3_remainder_T0 = s3_t3 / s3_t0;  //T3~T4打點次數

                        S3_T3_T4_cycle = S3_T3_T4_item_fix_time / S3_T3_remainder_T0;      //打點cycle

                        if (S3_T3_T4_cycle != 0)                                       //有cycle
                        {
                            S3_T3_T4_remainder = S3_T3_T4_item_fix_time % S3_T3_remainder_T0;
                            s3_TTFF_time_int = (S3_T1_T2_item_fix_time * s3_t0) + (S3_T3_T4_cycle * (s3_t3 + s3_t4)) + (S3_T3_T4_remainder * s3_t0);
                        }
                        else if (S3_T3_T4_cycle == 0)                                  //沒有cycle 
                        {
                            S3_T3_T4_remainder = S3_T3_T4_item_fix_time % S3_T3_remainder_T0;
                            s3_TTFF_time_int = (S3_T1_T2_item_fix_time * s3_t0) + (S3_T3_T4_remainder * s3_t0);
                        }

                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s3_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S3_T1_T2_item_fix_time >= s3_free_run_time && S3_T3_T4_item_fix_time > 0 && S3_T5_T6_item_fix_time > 0 && S3_T7_T8_item_fix_time == 0)                        //fix on T1~T6 range
                    {
                        S3_T3_remainder_T0 = s3_t3 / s3_t0;  //T3~T4打點次數
                        S3_T5_remainder_T0 = s3_t5 / s3_t0;  //T5~T6打點次數

                        S3_T3_T4_cycle = S3_T3_T4_item_fix_time / S3_T3_remainder_T0;      //打點cycle
                        S3_T5_T6_cycle = S3_T5_T6_item_fix_time / S3_T5_remainder_T0;      //打點cycle

                        S3_T3_T4_remainder = S3_T3_T4_item_fix_time % S3_T3_remainder_T0;

                        if (S3_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S3_T5_T6_remainder = S3_T5_T6_item_fix_time % S3_T5_remainder_T0;
                            s3_TTFF_time_int = (S3_T1_T2_item_fix_time * s3_t0) + (S3_T3_T4_cycle * (s3_t3 + s3_t4)) + (S3_T3_T4_remainder * s3_t0) + (S3_T5_T6_cycle * (s3_t5 + s3_t6)) + (S3_T5_T6_remainder * s3_t0);
                        }
                        else if (S3_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S3_T5_T6_remainder = S3_T5_T6_item_fix_time % S3_T5_remainder_T0;
                            s3_TTFF_time_int = (S3_T1_T2_item_fix_time * s3_t0) + (S3_T3_T4_cycle * (s3_t3 + s3_t4)) + (S3_T3_T4_remainder * s3_t0) + (S3_T5_T6_remainder * s3_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s3_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S3_T1_T2_item_fix_time >= s3_free_run_time && S3_T3_T4_item_fix_time == 0 && S3_T5_T6_item_fix_time > 0 && S3_T7_T8_item_fix_time > 0)                       //fix on T1~T2 T5~T8
                    {
                        S3_T5_remainder_T0 = s3_t5 / s3_t0;  //T5~T6打點次數
                        S3_T7_remainder_T0 = s3_t7 / s3_t0;  //T7~T8打點次數

                        S3_T5_T6_cycle = S3_T5_T6_item_fix_time / S3_T5_remainder_T0;      //打點cycle
                        S3_T7_T8_cycle = S3_T7_T8_item_fix_time / S3_T7_remainder_T0;      //打點cycle

                        S3_T5_T6_remainder = S3_T5_T6_item_fix_time % S3_T5_remainder_T0;

                        if (S3_T7_T8_cycle != 0)                                       //有cycle
                        {
                            S3_T7_T8_remainder = S3_T7_T8_item_fix_time % S3_T7_remainder_T0;
                            s3_TTFF_time_int = (S3_T1_T2_item_fix_time * s3_t0) + (S3_T5_T6_cycle * (s3_t5 + s3_t6)) + (S3_T5_T6_remainder * s3_t0) + (S3_T7_T8_cycle * (s3_t7 + s3_t8)) + (S3_T7_T8_remainder * s3_t0);
                        }
                        else if (S3_T7_T8_cycle == 0)                                  //沒有cycle 
                        {
                            S3_T7_T8_remainder = S3_T7_T8_item_fix_time % S3_T7_remainder_T0;
                            s3_TTFF_time_int = (S3_T1_T2_item_fix_time * s3_t0) + (S3_T5_T6_cycle * (s3_t5 + s3_t6)) + (S3_T5_T6_remainder * s3_t0) + (S3_T7_T8_remainder * s3_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s3_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S3_T1_T2_item_fix_time >= s3_free_run_time && S3_T3_T4_item_fix_time > 0 && S3_T5_T6_item_fix_time > 0 && S3_T7_T8_item_fix_time > 0)                       //fix on ALL
                    {
                        S3_T3_remainder_T0 = s3_t3 / s3_t0;  //T3~T4打點次數
                        S3_T5_remainder_T0 = s3_t5 / s3_t0;  //T5~T6打點次數
                        S3_T7_remainder_T0 = s3_t7 / s3_t0;  //T7~T8打點次數

                        S3_T3_T4_cycle = S3_T3_T4_item_fix_time / S3_T3_remainder_T0;      //打點cycle
                        S3_T5_T6_cycle = S3_T5_T6_item_fix_time / S3_T5_remainder_T0;      //打點cycle
                        S3_T7_T8_cycle = S3_T7_T8_item_fix_time / S3_T7_remainder_T0;      //打點cycle

                        S3_T5_T6_remainder = S3_T5_T6_item_fix_time % S3_T5_remainder_T0;

                        if (S3_T7_T8_cycle != 0)                                       //有cycle
                        {
                            S3_T7_T8_remainder = S3_T7_T8_item_fix_time % S3_T7_remainder_T0;
                            s3_TTFF_time_int = (S3_T1_T2_item_fix_time * s3_t0) + (S3_T3_T4_cycle * (s3_t3 + s3_t4)) + (S3_T3_T4_remainder * s3_t0) + (S3_T5_T6_cycle * (s3_t5 + s3_t6)) + (S3_T5_T6_remainder * s3_t0) + (S3_T7_T8_cycle * (s3_t7 + s3_t8)) + (S3_T7_T8_remainder * s3_t0);
                        }
                        else if (S3_T7_T8_cycle == 0)                                  //沒有cycle 
                        {
                            S3_T7_T8_remainder = S3_T7_T8_item_fix_time % S3_T7_remainder_T0;
                            s3_TTFF_time_int = (S3_T1_T2_item_fix_time * s3_t0) + (S3_T3_T4_cycle * (s3_t3 + s3_t4)) + (S3_T3_T4_remainder * s3_t0) + (S3_T5_T6_cycle * (s3_t5 + s3_t6)) + (S3_T5_T6_remainder * s3_t0) + (S3_T7_T8_remainder * s3_t0);
                        }
                        //轉換時分秒
                        TTFF_ts = new TimeSpan(0, 0, s3_TTFF_time_int);
                        if (TTFF_ts.Hours > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + String.Format("{0:00}", TTFF_ts.Hours) + ":" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes > 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:" + String.Format("{0:00}", TTFF_ts.Minutes) + ":" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        else if (TTFF_ts.Hours == 0 && TTFF_ts.Minutes == 0)
                        {
                            s3_TTFF_time = "TTFF Usage Time = [" + "00:00:" + String.Format("{0:00}", TTFF_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }

                }
                else if (s3_first_fix_flag == 0)
                {
                    s3_TTFF_time = "TTFF Usage Time = [N/A]";
                }

                //Analyze UTC Usage
                if (s3_analyze_utc_time_flag == 1)
                {
                    TimeSpan Analyze_UTC_ts;           //轉換時分秒

                    if (S3_T1_T2_item_analyze_utc_time <= s3_free_run_time && S3_T3_T4_item_analyze_utc_time == 0 && S3_T5_T6_item_analyze_utc_time == 0)                           //Analyze_UTC on T1~T2 range
                    {
                        s3_Analyze_UTC_time_int = S3_T1_T2_item_analyze_utc_time * s3_t0;
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s3_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S3_T1_T2_item_analyze_utc_time >= s3_free_run_time && S3_T3_T4_item_analyze_utc_time > 0 && S3_T5_T6_item_analyze_utc_time == 0)                       //Analyze_UTC on T1~T4 range
                    {
                        S3_T3_remainder_T0 = s3_t3 / s3_t0;  //T3~T4打點次數

                        S3_T3_T4_cycle = S3_T3_T4_item_analyze_utc_time / S3_T3_remainder_T0;      //打點cycle

                        if (S3_T3_T4_cycle != 0)                                       //有cycle
                        {
                            S3_T3_T4_remainder = S3_T3_T4_item_analyze_utc_time % S3_T3_remainder_T0;
                            s3_Analyze_UTC_time_int = (S3_T1_T2_item_analyze_utc_time * s3_t0) + (S3_T3_T4_cycle * (s3_t3 + s3_t4)) + (S3_T3_T4_remainder * s3_t0);
                        }
                        else if (S3_T3_T4_cycle == 0)                                  //沒有cycle 
                        {
                            S3_T3_T4_remainder = S3_T3_T4_item_analyze_utc_time % S3_T3_remainder_T0;
                            s3_Analyze_UTC_time_int = (S3_T1_T2_item_analyze_utc_time * s3_t0) + (S3_T3_T4_remainder * s3_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s3_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S3_T1_T2_item_analyze_utc_time >= s3_free_run_time && S3_T3_T4_item_analyze_utc_time > 0 && S3_T5_T6_item_analyze_utc_time > 0)                        //Analyze_UTC on T1~T6 range
                    {
                        S3_T3_remainder_T0 = s3_t3 / s3_t0;  //T3~T4打點次數
                        S3_T5_remainder_T0 = s3_t5 / s3_t0;  //T5~T6打點次數

                        S3_T3_T4_cycle = S3_T3_T4_item_analyze_utc_time / S3_T3_remainder_T0;      //打點cycle
                        S3_T5_T6_cycle = S3_T5_T6_item_analyze_utc_time / S3_T5_remainder_T0;      //打點cycle

                        S3_T3_T4_remainder = S3_T3_T4_item_analyze_utc_time % S3_T3_remainder_T0;

                        if (S3_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S3_T5_T6_remainder = S3_T5_T6_item_analyze_utc_time % S3_T5_remainder_T0;
                            s3_Analyze_UTC_time_int = (S3_T1_T2_item_analyze_utc_time * s3_t0) + (S3_T3_T4_cycle * (s3_t3 + s3_t4)) + (S3_T3_T4_remainder * s3_t0) + (S3_T5_T6_cycle * (s3_t5 + s3_t6)) + (S3_T5_T6_remainder * s3_t0);
                        }
                        else if (S3_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S3_T5_T6_remainder = S3_T5_T6_item_analyze_utc_time % S3_T5_remainder_T0;
                            s3_Analyze_UTC_time_int = (S3_T1_T2_item_analyze_utc_time * s3_t0) + (S3_T3_T4_cycle * (s3_t3 + s3_t4)) + (S3_T3_T4_remainder * s3_t0) + (S3_T5_T6_remainder * s3_t0);
                        }
                        //轉換時分秒
                        Analyze_UTC_ts = new TimeSpan(0, 0, s3_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }
                    else if (S3_T1_T2_item_analyze_utc_time >= s3_free_run_time && S3_T3_T4_item_analyze_utc_time == 0 && S3_T5_T6_item_analyze_utc_time > 0)                          //Analyze_UTC on T1~T2 T5~T6 range
                    {
                        S3_T5_remainder_T0 = s3_t5 / s3_t0;  //T3~T4打點次數

                        S3_T5_T6_cycle = S3_T5_T6_item_analyze_utc_time / S3_T5_remainder_T0;      //打點cycle

                        if (S3_T5_T6_cycle != 0)                                       //有cycle
                        {
                            S3_T5_T6_remainder = S3_T5_T6_item_analyze_utc_time % S3_T5_remainder_T0;
                            s3_Analyze_UTC_time_int = (S3_T1_T2_item_analyze_utc_time * s3_t0) + (S3_T5_T6_cycle * (s3_t5 + s3_t6)) + (S3_T5_T6_remainder * s3_t0);
                        }
                        else if (S3_T5_T6_cycle == 0)                                  //沒有cycle 
                        {
                            S3_T5_T6_remainder = S3_T5_T6_item_analyze_utc_time % S3_T5_remainder_T0;
                            s3_Analyze_UTC_time_int = (S3_T1_T2_item_analyze_utc_time * s3_t0) + (S3_T5_T6_remainder * s3_t0);
                        }
                        //轉換時分秒ss
                        Analyze_UTC_ts = new TimeSpan(0, 0, s3_Analyze_UTC_time_int);
                        if (Analyze_UTC_ts.Hours > 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + String.Format("{0:00}", Analyze_UTC_ts.Hours) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes > 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:" + String.Format("{0:00}", Analyze_UTC_ts.Minutes) + ":" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        else if (Analyze_UTC_ts.Hours == 0 && Analyze_UTC_ts.Minutes == 0)
                        {
                            s3_Analyze_UTC_time = "Analyze UTC Usage Time = [" + "00:00:" + String.Format("{0:00}", Analyze_UTC_ts.Seconds) + "]";
                        }
                        //轉換時分秒
                    }

                }
                else if (s3_analyze_utc_time_flag == 0)
                {
                    s3_Analyze_UTC_time = "Analyze UTC Usage Time = [N/A]";
                }

                S3_T1_T2_item_fix_time = 0;
                S3_T3_T4_item_fix_time = 0;
                S3_T5_T6_item_fix_time = 0;
                S3_T7_T8_item_fix_time = 0;

                S3_T1_T2_item_analyze_utc_time = 0;
                S3_T3_T4_item_analyze_utc_time = 0;
                S3_T5_T6_item_analyze_utc_time = 0;

                S3_T3_remainder_T0 = 0;
                S3_T3_T4_cycle = 0;
                S3_T3_T4_remainder = 0;

                S3_T5_remainder_T0 = 0;
                S3_T5_T6_cycle = 0;
                S3_T5_T6_remainder = 0;

                S3_T7_remainder_T0 = 0;
                S3_T7_T8_cycle = 0;
                S3_T7_T8_remainder = 0;
                s3_first_fix_previous_item = 0;

                /**
                 *  S3 Usage Time
                 */

                first_stage_flag = 0;
                enable_count = 0;
                chk_enable_count = 0;
            }
            /*
             * To do Read Setting Mode
             */

            /*
             * To do Calculate mode cycle
             */
            s0_cycle_T3_T4 = new int[s0_t3_t4_time];
            s0_cycle_dynamic = new int[s0_dynamic_time];
            s0_cycle_geofencing = new int[s0_geofencing_time];
            s0_cycle_add = new int[1000];
            s0_cycle = 0;
            s0_cycle_T3_T4_count = 0;
            s0_cycle_dynamic_count = 0;
            s0_cycle_geofencing_count = 0;

            s1_cycle_T3_T4 = new int[s1_t3_t4_time];
            s1_cycle_dynamic = new int[s1_dynamic_time];
            s1_cycle_geofencing = new int[s1_geofencing_time];
            s1_cycle_add = new int[1000];
            s1_cycle = 0;
            s1_cycle_T3_T4_count = 0;
            s1_cycle_dynamic_count = 0;
            s1_cycle_geofencing_count = 0;

            s2_cycle_T3_T4 = new int[s2_t3_t4_time];
            s2_cycle_dynamic = new int[s2_dynamic_time];
            s2_cycle_geofencing = new int[s2_geofencing_time];
            s2_cycle_add = new int[1000];
            s2_cycle = 0;
            s2_cycle_T3_T4_count = 0;
            s2_cycle_dynamic_count = 0;
            s2_cycle_geofencing_count = 0;

            s3_cycle_T3_T4 = new int[s3_t3_t4_time];
            s3_cycle_dynamic = new int[s3_dynamic_time];
            s3_cycle_geofencing = new int[s3_geofencing_time];
            s3_cycle_add = new int[1000];
            s3_cycle = 0;
            s3_cycle_T3_T4_count = 0;
            s3_cycle_dynamic_count = 0;
            s3_cycle_geofencing_count = 0;
            /*
             * To do Calculate mode cycle
             */
            //Caclulate S0
            for (int cal_item_count = 2; cal_item_count <= convert_count0; cal_item_count++)
            {
                /*
                * Calculate mode cycle S0
                */
                //檢查s0是否不再freerun
                if (cal_item_count > s0_free_run_time)
                {
                    switch (s0_mode_font_color[cal_item_count])
                    {
                        //T3~T4
                        case 2:
                            if (s0_cycle_judge_color_flag != 3 && s0_cycle_judge_color_flag != 4)               //如果t3_t4的cycle time還沒結束繼續累加
                            {
                                s0_cycle_judge_color_flag = 2;

                                s0_cycle_T3_T4[s0_cycle_T3_T4_count] = Int32.Parse(s0_interval[cal_item_count]);
                                if (s0_cycle_T3_T4_count == (s0_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s0_cycle_add[s0_cycle] = s0_cycle_T3_T4.Sum();
                                    s0_cycle_mode_judge[s0_cycle] = 2;
                                    s0_cycle++;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_T3_T4_count = 0;
                                }
                                else if (s0_cycle_T3_T4_count < (s0_t3_t4_time - 1) && cal_item_count == convert_count0 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s0_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s0_cycle_add[s0_cycle] += s0_cycle_T3_T4[t3_t4_count];
                                    }
                                    s0_cycle_mode_judge[s0_cycle] = 5;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_remainder = s0_cycle_T3_T4_count;
                                }
                                else if (s0_cycle_judge_color_flag == 2)
                                {
                                    s0_cycle_T3_T4_count++;
                                }
                            }
                            else if (s0_cycle_judge_color_flag == 3)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s0_cycle_judge_color_flag = 3;

                                s0_cycle_dynamic[s0_cycle_dynamic_count] = Int32.Parse(s0_interval[cal_item_count]);

                                if (s0_cycle_dynamic_count == (s0_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s0_cycle_add[s0_cycle] = s0_cycle_dynamic.Sum();
                                    s0_cycle_mode_judge[s0_cycle] = 3;
                                    s0_cycle++;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_dynamic_count = 0;
                                }
                                else if (s0_cycle_dynamic_count < (s0_dynamic_time - 1) && cal_item_count == convert_count0 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s0_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s0_cycle_add[s0_cycle] += s0_cycle_dynamic[dynamic_count];
                                    }
                                    s0_cycle_mode_judge[s0_cycle] = 5;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_remainder = s0_cycle_dynamic_count;
                                }
                                else if (s0_cycle_judge_color_flag == 3)
                                {
                                    s0_cycle_dynamic_count++;
                                }
                            }
                            else if (s0_cycle_judge_color_flag == 4)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s0_cycle_judge_color_flag = 4;

                                s0_cycle_geofencing[s0_cycle_geofencing_count] = Int32.Parse(s0_interval[cal_item_count]);

                                if (s0_cycle_geofencing_count == (s0_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s0_cycle_add[s0_cycle] = s0_cycle_geofencing.Sum();
                                    s0_cycle_mode_judge[s0_cycle] = 4;
                                    s0_cycle++;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_geofencing_count = 0;
                                }
                                else if (s0_cycle_geofencing_count < (s0_geofencing_time - 1) && cal_item_count == convert_count0 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s0_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s0_cycle_add[s0_cycle] += s0_cycle_geofencing[geofencing_count];
                                    }
                                    s0_cycle_mode_judge[s0_cycle] = 5;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_remainder = s0_cycle_geofencing_count;
                                }
                                else if (s0_cycle_judge_color_flag == 4)
                                {
                                    s0_cycle_geofencing_count++;
                                }
                            }
                            break;
                        //Dynamic
                        case 3:
                            if (s0_cycle_judge_color_flag != 2 && s0_cycle_judge_color_flag != 4)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s0_cycle_judge_color_flag = 3;

                                s0_cycle_dynamic[s0_cycle_dynamic_count] = Int32.Parse(s0_interval[cal_item_count]);

                                if (s0_cycle_dynamic_count == (s0_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s0_cycle_add[s0_cycle] = s0_cycle_dynamic.Sum();
                                    s0_cycle_mode_judge[s0_cycle] = 3;
                                    s0_cycle++;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_dynamic_count = 0;
                                }
                                else if (s0_cycle_dynamic_count < (s0_dynamic_time - 1) && cal_item_count == convert_count0 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s0_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s0_cycle_add[s0_cycle] += s0_cycle_dynamic[dynamic_count];
                                    }
                                    s0_cycle_mode_judge[s0_cycle] = 5;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_remainder = s0_cycle_dynamic_count;
                                }
                                else if (s0_cycle_judge_color_flag == 3)
                                {
                                    s0_cycle_dynamic_count++;
                                }

                            }
                            else if (s0_cycle_judge_color_flag == 2)               //如果t3_t4的cycle time還沒結束繼續累加
                            {
                                s0_cycle_judge_color_flag = 2;

                                s0_cycle_T3_T4[s0_cycle_T3_T4_count] = Int32.Parse(s0_interval[cal_item_count]);
                                if (s0_cycle_T3_T4_count == (s0_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s0_cycle_add[s0_cycle] = s0_cycle_T3_T4.Sum();
                                    s0_cycle_mode_judge[s0_cycle] = 2;
                                    s0_cycle++;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_T3_T4_count = 0;
                                }
                                else if (s0_cycle_T3_T4_count < (s0_t3_t4_time - 1) && cal_item_count == convert_count0 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s0_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s0_cycle_add[s0_cycle] += s0_cycle_T3_T4[t3_t4_count];
                                    }
                                    s0_cycle_mode_judge[s0_cycle] = 5;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_remainder = s0_cycle_T3_T4_count;
                                }
                                else if (s0_cycle_judge_color_flag == 2)
                                {
                                    s0_cycle_T3_T4_count++;
                                }
                            }
                            else if (s0_cycle_judge_color_flag == 4)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s0_cycle_judge_color_flag = 4;

                                s0_cycle_geofencing[s0_cycle_geofencing_count] = Int32.Parse(s0_interval[cal_item_count]);

                                if (s0_cycle_geofencing_count == (s0_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s0_cycle_add[s0_cycle] = s0_cycle_geofencing.Sum();
                                    s0_cycle_mode_judge[s0_cycle] = 4;
                                    s0_cycle++;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_geofencing_count = 0;
                                }
                                else if (s0_cycle_geofencing_count < (s0_geofencing_time - 1) && cal_item_count == convert_count0 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s0_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s0_cycle_add[s0_cycle] += s0_cycle_geofencing[geofencing_count];
                                    }
                                    s0_cycle_mode_judge[s0_cycle] = 5;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_remainder = s0_cycle_geofencing_count;
                                }
                                else if (s0_cycle_judge_color_flag == 4)
                                {
                                    s0_cycle_geofencing_count++;
                                }
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (s0_cycle_judge_color_flag != 2 && s0_cycle_judge_color_flag != 3)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s0_cycle_judge_color_flag = 4;

                                s0_cycle_geofencing[s0_cycle_geofencing_count] = Int32.Parse(s0_interval[cal_item_count]);

                                if (s0_cycle_geofencing_count == (s0_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s0_cycle_add[s0_cycle] = s0_cycle_geofencing.Sum();
                                    s0_cycle_mode_judge[s0_cycle] = 4;
                                    s0_cycle++;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_geofencing_count = 0;
                                }
                                else if (s0_cycle_geofencing_count < (s0_geofencing_time - 1) && cal_item_count == convert_count0 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s0_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s0_cycle_add[s0_cycle] += s0_cycle_geofencing[geofencing_count];
                                    }
                                    s0_cycle_mode_judge[s0_cycle] = 5;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_remainder = s0_cycle_geofencing_count;
                                }
                                else if (s0_cycle_judge_color_flag == 4)
                                {
                                    s0_cycle_geofencing_count++;
                                }
                            }
                            else if (s0_cycle_judge_color_flag == 2)            //如果t3~t4的cycle time還沒結束繼續累加
                            {
                                s0_cycle_judge_color_flag = 2;

                                s0_cycle_T3_T4[s0_cycle_T3_T4_count] = Int32.Parse(s0_interval[cal_item_count]);
                                if (s0_cycle_T3_T4_count == (s0_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s0_cycle_add[s0_cycle] = s0_cycle_T3_T4.Sum();
                                    s0_cycle_mode_judge[s0_cycle] = 2;
                                    s0_cycle++;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_T3_T4_count = 0;
                                }
                                else if (s0_cycle_T3_T4_count < (s0_t3_t4_time - 1) && cal_item_count == convert_count0 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s0_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s0_cycle_add[s0_cycle] += s0_cycle_T3_T4[t3_t4_count];
                                    }
                                    s0_cycle_mode_judge[s0_cycle] = 5;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_remainder = s0_cycle_T3_T4_count;
                                }
                                else if (s0_cycle_judge_color_flag == 2)
                                {
                                    s0_cycle_T3_T4_count++;
                                }
                            }
                            else if (s0_cycle_judge_color_flag == 3)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s0_cycle_judge_color_flag = 3;

                                s0_cycle_dynamic[s0_cycle_dynamic_count] = Int32.Parse(s0_interval[cal_item_count]);

                                if (s0_cycle_dynamic_count == (s0_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s0_cycle_add[s0_cycle] = s0_cycle_dynamic.Sum();
                                    s0_cycle_mode_judge[s0_cycle] = 3;
                                    s0_cycle++;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_dynamic_count = 0;
                                }
                                else if (s0_cycle_dynamic_count < (s0_dynamic_time - 1) && cal_item_count == convert_count0 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s0_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s0_cycle_add[s0_cycle] += s0_cycle_dynamic[dynamic_count];
                                    }
                                    s0_cycle_mode_judge[s0_cycle] = 5;
                                    s0_cycle_judge_color_flag = 0;
                                    s0_cycle_remainder = s0_cycle_dynamic_count;
                                }
                                else if (s0_cycle_judge_color_flag == 3)
                                {
                                    s0_cycle_dynamic_count++;
                                }
                            }
                            break;

                    }

                }
                /*
                * Calculate mode cycle S0
                */


                /*
                * Calculate interval error S0
                */
                //Default : 0, T1~T2 : 1, T3~T4 : 2, Dynamic : 3, Geofencing : 4
                switch (s0_mode_font_color[cal_item_count])
                {
                    //Default
                    case 0:
                        break;
                    //T1~T2
                    case 1:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t0 - 5))               //在T0範圍內
                        {
                            if ((s0_t0 - Int32.Parse(s0_interval[cal_item_count])) > 3 || (s0_t0 - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }
                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t2 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t2 + s0_t0 - 5))
                        {
                            if (((s0_t2 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t2 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)          //在T2範圍內
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s0_interval[cal_item_count]) > (s0_t0 + s0_t2 + s0_t4 + s0_t6 + s0_t8) || Int32.Parse(s0_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                            s0_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;

                    //T3~T4
                    case 2:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t0 - 5))               //在T0範圍內
                        {
                            if ((s0_t0 - Int32.Parse(s0_interval[cal_item_count])) > 3 || (s0_t0 - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t2 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t2 + s0_t0 - 5))               //在T2範圍內
                        {
                            if (((s0_t2 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t2 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t4 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t4 + s0_t0 - 5))
                        {
                            if (((s0_t4 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t4 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)         //在T4範圍內
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }
                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t6 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t6 + s0_t0 - 5))              //在T6範圍內
                        {
                            if (((s0_t6 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t6 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t8 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t8 + s0_t0 - 5))             //在T8範圍內
                        {
                            if (((s0_t8 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t8 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s0_interval[cal_item_count]) > (s0_t0 + s0_t2 + s0_t4 + s0_t6 + s0_t8) || Int32.Parse(s0_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                            s0_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }


                        break;
                    //Dynamic
                    case 3:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t0 - 5))               //在T0範圍內
                        {
                            if ((s0_t0 - Int32.Parse(s0_interval[cal_item_count])) > 3 || (s0_t0 - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t2 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t2 + s0_t0 - 5))               //在T2範圍內
                        {
                            if (((s0_t2 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t2 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t4 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t4 + s0_t0 - 5))         //在T4範圍內
                        {
                            if (((s0_t4 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t4 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t6 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t6 + s0_t0 - 5))              //在T6範圍內
                        {
                            if (((s0_t6 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t6 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t8 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t8 + s0_t0 - 5))             //在T8範圍內
                        {
                            if (((s0_t8 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t8 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s0_interval[cal_item_count]) > (s0_t0 + s0_t2 + s0_t4 + s0_t6 + s0_t8) || Int32.Parse(s0_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                            s0_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //Geofencing
                    case 4:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t0 - 5))               //在T0範圍內
                        {
                            if ((s0_t0 - Int32.Parse(s0_interval[cal_item_count])) > 3 || (s0_t0 - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t2 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t2 + s0_t0 - 5))               //在T2範圍內
                        {
                            if (((s0_t2 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t2 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t4 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t4 + s0_t0 - 5))         //在T4範圍內
                        {
                            if (((s0_t4 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t4 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t6 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t6 + s0_t0 - 5))              //在T6範圍內
                        {
                            if (((s0_t6 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t6 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s0_interval[cal_item_count]) < (s0_t8 + s0_t0 + 5) && Int32.Parse(s0_interval[cal_item_count]) > (s0_t8 + s0_t0 - 5))             //在T8範圍內
                        {
                            if (((s0_t8 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) > 3 || ((s0_t8 + s0_t0) - Int32.Parse(s0_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s0_interval_font_color[cal_item_count] = 5;
                                s0_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                                s0_interval_judge[cal_item_count] = "OK";
                                break; s1_interval_font_color[cal_item_count] = 5;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s0_interval[cal_item_count]) > (s0_t0 + s0_t2 + s0_t4 + s0_t6 + s0_t8) || Int32.Parse(s0_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s0_interval_font_color[cal_item_count] = s0_mode_font_color[cal_item_count];
                            s0_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                }
                /*
                * Calculate interval error S0
                */
            }

            //Calculate S1
            for (int cal_item_count = 2; cal_item_count <= convert_count1; cal_item_count++)
            {

                /*
                * Calculate mode cycle S1
                */
                //檢查s1是否不再freerun
                if (cal_item_count > s1_free_run_time)
                {
                    switch (s1_mode_font_color[cal_item_count])
                    {
                        //T3~T4
                        case 2:
                            if (s1_cycle_judge_color_flag != 3 && s1_cycle_judge_color_flag != 4)               //如果t3_t4的cycle time還沒結束繼續累加
                            {
                                s1_cycle_judge_color_flag = 2;

                                s1_cycle_T3_T4[s1_cycle_T3_T4_count] = Int32.Parse(s1_interval[cal_item_count]);
                                if (s1_cycle_T3_T4_count == (s1_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s1_cycle_add[s1_cycle] = s1_cycle_T3_T4.Sum();
                                    s1_cycle_mode_judge[s1_cycle] = 2;
                                    s1_cycle++;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_T3_T4_count = 0;
                                }
                                else if (s1_cycle_T3_T4_count < (s1_t3_t4_time - 1) && cal_item_count == convert_count1 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s1_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s1_cycle_add[s1_cycle] += s1_cycle_T3_T4[t3_t4_count];
                                    }
                                    s1_cycle_mode_judge[s1_cycle] = 5;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_remainder = s1_cycle_T3_T4_count;
                                }
                                else if (s1_cycle_judge_color_flag == 2)
                                {
                                    s1_cycle_T3_T4_count++;
                                }
                            }
                            else if (s1_cycle_judge_color_flag == 3)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s1_cycle_judge_color_flag = 3;

                                s1_cycle_dynamic[s1_cycle_dynamic_count] = Int32.Parse(s1_interval[cal_item_count]);

                                if (s1_cycle_dynamic_count == (s1_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s1_cycle_add[s1_cycle] = s1_cycle_dynamic.Sum();
                                    s1_cycle_mode_judge[s1_cycle] = 3;
                                    s1_cycle++;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_dynamic_count = 0;
                                }
                                else if (s1_cycle_dynamic_count < (s1_dynamic_time - 1) && cal_item_count == convert_count1 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s1_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s1_cycle_add[s1_cycle] += s1_cycle_dynamic[dynamic_count];
                                    }
                                    s1_cycle_mode_judge[s1_cycle] = 5;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_remainder = s1_cycle_dynamic_count;
                                }
                                else if (s1_cycle_judge_color_flag == 3)
                                {
                                    s1_cycle_dynamic_count++;
                                }
                            }
                            else if (s1_cycle_judge_color_flag == 4)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s1_cycle_judge_color_flag = 4;

                                s1_cycle_geofencing[s1_cycle_geofencing_count] = Int32.Parse(s1_interval[cal_item_count]);

                                if (s1_cycle_geofencing_count == (s1_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s1_cycle_add[s1_cycle] = s1_cycle_geofencing.Sum();
                                    s1_cycle_mode_judge[s1_cycle] = 4;
                                    s1_cycle++;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_geofencing_count = 0;
                                }
                                else if (s1_cycle_geofencing_count < (s1_geofencing_time - 1) && cal_item_count == convert_count1 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s1_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s1_cycle_add[s1_cycle] += s1_cycle_geofencing[geofencing_count];
                                    }
                                    s1_cycle_mode_judge[s1_cycle] = 5;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_remainder = s1_cycle_geofencing_count;
                                }
                                else if (s1_cycle_judge_color_flag == 4)
                                {
                                    s1_cycle_geofencing_count++;
                                }
                            }
                            break;
                        //Dynamic
                        case 3:
                            if (s1_cycle_judge_color_flag != 2 && s1_cycle_judge_color_flag != 4)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s1_cycle_judge_color_flag = 3;

                                s1_cycle_dynamic[s1_cycle_dynamic_count] = Int32.Parse(s1_interval[cal_item_count]);

                                if (s1_cycle_dynamic_count == (s1_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s1_cycle_add[s1_cycle] = s1_cycle_dynamic.Sum();
                                    s1_cycle_mode_judge[s1_cycle] = 3;
                                    s1_cycle++;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_dynamic_count = 0;
                                }
                                else if (s1_cycle_dynamic_count < (s1_dynamic_time - 1) && cal_item_count == convert_count1 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s1_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s1_cycle_add[s1_cycle] += s1_cycle_dynamic[dynamic_count];
                                    }
                                    s1_cycle_mode_judge[s1_cycle] = 5;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_remainder = s1_cycle_dynamic_count;
                                }
                                else if (s1_cycle_judge_color_flag == 3)
                                {
                                    s1_cycle_dynamic_count++;
                                }

                            }
                            else if (s1_cycle_judge_color_flag == 2)               //如果t3_t4的cycle time還沒結束繼續累加
                            {
                                s1_cycle_judge_color_flag = 2;

                                s1_cycle_T3_T4[s1_cycle_T3_T4_count] = Int32.Parse(s1_interval[cal_item_count]);
                                if (s1_cycle_T3_T4_count == (s1_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s1_cycle_add[s1_cycle] = s1_cycle_T3_T4.Sum();
                                    s1_cycle_mode_judge[s1_cycle] = 2;
                                    s1_cycle++;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_T3_T4_count = 0;
                                }
                                else if (s1_cycle_T3_T4_count < (s1_t3_t4_time - 1) && cal_item_count == convert_count1 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s1_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s1_cycle_add[s1_cycle] += s1_cycle_T3_T4[t3_t4_count];
                                    }
                                    s1_cycle_mode_judge[s1_cycle] = 5;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_remainder = s1_cycle_T3_T4_count;
                                }
                                else if (s1_cycle_judge_color_flag == 2)
                                {
                                    s1_cycle_T3_T4_count++;
                                }
                            }
                            else if (s1_cycle_judge_color_flag == 4)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s1_cycle_judge_color_flag = 4;

                                s1_cycle_geofencing[s1_cycle_geofencing_count] = Int32.Parse(s1_interval[cal_item_count]);

                                if (s1_cycle_geofencing_count == (s1_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s1_cycle_add[s1_cycle] = s1_cycle_geofencing.Sum();
                                    s1_cycle_mode_judge[s1_cycle] = 4;
                                    s1_cycle++;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_geofencing_count = 0;
                                }
                                else if (s1_cycle_geofencing_count < (s1_geofencing_time - 1) && cal_item_count == convert_count1 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s1_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s1_cycle_add[s1_cycle] += s1_cycle_geofencing[geofencing_count];
                                    }
                                    s1_cycle_mode_judge[s1_cycle] = 5;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_remainder = s1_cycle_geofencing_count;
                                }
                                else if (s1_cycle_judge_color_flag == 4)
                                {
                                    s1_cycle_geofencing_count++;
                                }
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (s1_cycle_judge_color_flag != 2 && s1_cycle_judge_color_flag != 3)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s1_cycle_judge_color_flag = 4;

                                s1_cycle_geofencing[s1_cycle_geofencing_count] = Int32.Parse(s1_interval[cal_item_count]);

                                if (s1_cycle_geofencing_count == (s1_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s1_cycle_add[s1_cycle] = s1_cycle_geofencing.Sum();
                                    s1_cycle_mode_judge[s1_cycle] = 4;
                                    s1_cycle++;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_geofencing_count = 0;
                                }
                                else if (s1_cycle_geofencing_count < (s1_geofencing_time - 1) && cal_item_count == convert_count1 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s1_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s1_cycle_add[s1_cycle] += s1_cycle_geofencing[geofencing_count];
                                    }
                                    s1_cycle_mode_judge[s1_cycle] = 5;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_remainder = s1_cycle_geofencing_count;
                                }
                                else if (s1_cycle_judge_color_flag == 4)
                                {
                                    s1_cycle_geofencing_count++;
                                }
                            }
                            else if (s1_cycle_judge_color_flag == 2)            //如果t3~t4的cycle time還沒結束繼續累加
                            {
                                s1_cycle_judge_color_flag = 2;

                                s1_cycle_T3_T4[s1_cycle_T3_T4_count] = Int32.Parse(s1_interval[cal_item_count]);
                                if (s1_cycle_T3_T4_count == (s1_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s1_cycle_add[s1_cycle] = s1_cycle_T3_T4.Sum();
                                    s1_cycle_mode_judge[s1_cycle] = 2;
                                    s1_cycle++;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_T3_T4_count = 0;
                                }
                                else if (s1_cycle_T3_T4_count < (s1_t3_t4_time - 1) && cal_item_count == convert_count1 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s1_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s1_cycle_add[s1_cycle] += s1_cycle_T3_T4[t3_t4_count];
                                    }
                                    s1_cycle_mode_judge[s1_cycle] = 5;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_remainder = s1_cycle_T3_T4_count;
                                }
                                else if (s1_cycle_judge_color_flag == 2)
                                {
                                    s1_cycle_T3_T4_count++;
                                }
                            }
                            else if (s1_cycle_judge_color_flag == 3)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s1_cycle_judge_color_flag = 3;

                                s1_cycle_dynamic[s1_cycle_dynamic_count] = Int32.Parse(s1_interval[cal_item_count]);

                                if (s1_cycle_dynamic_count == (s1_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s1_cycle_add[s1_cycle] = s1_cycle_dynamic.Sum();
                                    s1_cycle_mode_judge[s1_cycle] = 3;
                                    s1_cycle++;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_dynamic_count = 0;
                                }
                                else if (s1_cycle_dynamic_count < (s1_dynamic_time - 1) && cal_item_count == convert_count1 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s1_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s1_cycle_add[s1_cycle] += s1_cycle_dynamic[dynamic_count];
                                    }
                                    s1_cycle_mode_judge[s1_cycle] = 5;
                                    s1_cycle_judge_color_flag = 0;
                                    s1_cycle_remainder = s1_cycle_dynamic_count;
                                }
                                else if (s1_cycle_judge_color_flag == 3)
                                {
                                    s1_cycle_dynamic_count++;
                                }
                            }
                            break;

                    }

                }
                /*
                * Calculate mode cycle S1
                */

                /*
                * Calculate interval error S1
                */
                //Default : 0, T1~T2 : 1, T3~T4 : 2, Dynamic : 3, Geofencing : 4
                switch (s1_mode_font_color[cal_item_count])
                {
                    //Default
                    case 0:
                        break;
                    //T1~T2
                    case 1:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t0 - 5))               //在T0範圍內
                        {
                            if ((s1_t0 - Int32.Parse(s1_interval[cal_item_count])) > 3 || (s1_t0 - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t2 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t2 + s1_t0 - 5))
                        {
                            if (((s1_t2 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t2 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)          //在T2範圍內
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s1_interval[cal_item_count]) > (s1_t0 + s1_t2 + s1_t4 + s1_t6 + s1_t8) || Int32.Parse(s1_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                            s1_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //T3~T4
                    case 2:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t0 - 5))               //在T0範圍內
                        {
                            if ((s1_t0 - Int32.Parse(s1_interval[cal_item_count])) > 3 || (s1_t0 - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t2 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t2 + s1_t0 - 5))               //在T2範圍內
                        {
                            if (((s1_t2 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t2 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t4 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t4 + s1_t0 - 5))
                        {
                            if (((s1_t4 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t4 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)         //在T4範圍內
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t6 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t6 + s1_t0 - 5))              //在T6範圍內
                        {
                            if (((s1_t6 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t6 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t8 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t8 + s1_t0 - 5))             //在T8範圍內
                        {
                            if (((s1_t8 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t8 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s1_interval[cal_item_count]) > (s1_t0 + s1_t2 + s1_t4 + s1_t6 + s1_t8) || Int32.Parse(s1_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                            s1_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //Dynamic
                    case 3:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t0 - 5))               //在T0範圍內
                        {
                            if ((s1_t0 - Int32.Parse(s1_interval[cal_item_count])) > 3 || (s1_t0 - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t2 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t2 + s1_t0 - 5))               //在T2範圍內
                        {
                            if (((s1_t2 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t2 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t4 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t4 + s1_t0 - 5))         //在T4範圍內
                        {
                            if (((s1_t4 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t4 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t6 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t6 + s1_t0 - 5))              //在T6範圍內
                        {
                            if (((s1_t6 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t6 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t8 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t8 + s1_t0 - 5))             //在T8範圍內
                        {
                            if (((s1_t8 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t8 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s1_interval[cal_item_count]) > (s1_t0 + s1_t2 + s1_t4 + s1_t6 + s1_t8) || Int32.Parse(s1_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                            s1_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //Geofencing
                    case 4:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t0 - 5))               //在T0範圍內
                        {
                            if ((s1_t0 - Int32.Parse(s1_interval[cal_item_count])) > 3 || (s1_t0 - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t2 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t2 + s1_t0 - 5))               //在T2範圍內
                        {
                            if (((s1_t2 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t2 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t4 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t4 + s1_t0 - 5))         //在T4範圍內
                        {
                            if (((s1_t4 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t4 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t6 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t6 + s1_t0 - 5))              //在T6範圍內
                        {
                            if (((s1_t6 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t6 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s1_interval[cal_item_count]) < (s1_t8 + s1_t0 + 5) && Int32.Parse(s1_interval[cal_item_count]) > (s1_t8 + s1_t0 - 5))             //在T8範圍內
                        {
                            if (((s1_t8 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) > 3 || ((s1_t8 + s1_t0) - Int32.Parse(s1_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s1_interval_font_color[cal_item_count] = 5;
                                s1_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                                s1_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s1_interval[cal_item_count]) > (s1_t0 + s1_t2 + s1_t4 + s1_t6 + s1_t8) || Int32.Parse(s1_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s1_interval_font_color[cal_item_count] = s1_mode_font_color[cal_item_count];
                            s1_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                }
                /*
                * Calculate interval error S1
                */
            }
            //Calculate S2
            for (int cal_item_count = 2; cal_item_count <= convert_count2; cal_item_count++)
            {

                /*
                * Calculate mode cycle S2
                */
                //檢查s2是否不再freerun
                if (cal_item_count > s2_free_run_time)
                {
                    switch (s2_mode_font_color[cal_item_count])
                    {
                        //T3~T4
                        case 2:
                            if (s2_cycle_judge_color_flag != 3 && s2_cycle_judge_color_flag != 4)               //如果t3_t4的cycle time還沒結束繼續累加
                            {
                                s2_cycle_judge_color_flag = 2;

                                s2_cycle_T3_T4[s2_cycle_T3_T4_count] = Int32.Parse(s2_interval[cal_item_count]);
                                if (s2_cycle_T3_T4_count == (s2_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s2_cycle_add[s2_cycle] = s2_cycle_T3_T4.Sum();
                                    s2_cycle_mode_judge[s2_cycle] = 2;
                                    s2_cycle++;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_T3_T4_count = 0;
                                }
                                else if (s2_cycle_T3_T4_count < (s2_t3_t4_time - 1) && cal_item_count == convert_count2 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s2_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s2_cycle_add[s2_cycle] += s2_cycle_T3_T4[t3_t4_count];
                                    }
                                    s2_cycle_mode_judge[s2_cycle] = 5;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_remainder = s2_cycle_T3_T4_count;
                                }
                                else if (s2_cycle_judge_color_flag == 2)
                                {
                                    s2_cycle_T3_T4_count++;
                                }
                            }
                            else if (s2_cycle_judge_color_flag == 3)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s2_cycle_judge_color_flag = 3;

                                s2_cycle_dynamic[s2_cycle_dynamic_count] = Int32.Parse(s2_interval[cal_item_count]);

                                if (s2_cycle_dynamic_count == (s2_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s2_cycle_add[s2_cycle] = s2_cycle_dynamic.Sum();
                                    s2_cycle_mode_judge[s2_cycle] = 3;
                                    s2_cycle++;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_dynamic_count = 0;
                                }
                                else if (s2_cycle_dynamic_count < (s2_dynamic_time - 1) && cal_item_count == convert_count2 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s2_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s2_cycle_add[s2_cycle] += s2_cycle_dynamic[dynamic_count];
                                    }
                                    s2_cycle_mode_judge[s2_cycle] = 5;
                                    //s2_cycle = 0;
                                    s2_cycle_judge_color_flag = 0;
                                    //s2_cycle_dynamic_count = 0;
                                    s2_cycle_remainder = s2_cycle_dynamic_count;
                                }
                                else if (s2_cycle_judge_color_flag == 3)
                                {
                                    s2_cycle_dynamic_count++;
                                }
                            }
                            else if (s2_cycle_judge_color_flag == 4)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s2_cycle_judge_color_flag = 4;

                                s2_cycle_geofencing[s2_cycle_geofencing_count] = Int32.Parse(s2_interval[cal_item_count]);

                                if (s2_cycle_geofencing_count == (s2_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s2_cycle_add[s2_cycle] = s2_cycle_geofencing.Sum();
                                    s2_cycle_mode_judge[s2_cycle] = 4;
                                    s2_cycle++;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_geofencing_count = 0;
                                }
                                else if (s2_cycle_geofencing_count < (s2_geofencing_time - 1) && cal_item_count == convert_count2 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s2_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s2_cycle_add[s2_cycle] += s2_cycle_geofencing[geofencing_count];
                                    }
                                    s2_cycle_mode_judge[s2_cycle] = 5;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_remainder = s2_cycle_geofencing_count;
                                }
                                else if (s2_cycle_judge_color_flag == 4)
                                {
                                    s2_cycle_geofencing_count++;
                                }
                            }
                            break;
                        //Dynamic
                        case 3:
                            if (s2_cycle_judge_color_flag != 2 && s2_cycle_judge_color_flag != 4)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s2_cycle_judge_color_flag = 3;

                                s2_cycle_dynamic[s2_cycle_dynamic_count] = Int32.Parse(s2_interval[cal_item_count]);

                                if (s2_cycle_dynamic_count == (s2_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s2_cycle_add[s2_cycle] = s2_cycle_dynamic.Sum();
                                    s2_cycle_mode_judge[s2_cycle] = 3;
                                    s2_cycle++;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_dynamic_count = 0;
                                }
                                else if (s2_cycle_dynamic_count < (s2_dynamic_time - 1) && cal_item_count == convert_count2 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s2_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s2_cycle_add[s2_cycle] += s2_cycle_dynamic[dynamic_count];
                                    }
                                    s2_cycle_mode_judge[s2_cycle] = 5;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_remainder = s2_cycle_dynamic_count;
                                }
                                else if (s2_cycle_judge_color_flag == 3)
                                {
                                    s2_cycle_dynamic_count++;
                                }

                            }
                            else if (s2_cycle_judge_color_flag == 2)               //如果t3_t4的cycle time還沒結束繼續累加
                            {
                                s2_cycle_judge_color_flag = 2;

                                s2_cycle_T3_T4[s2_cycle_T3_T4_count] = Int32.Parse(s2_interval[cal_item_count]);
                                if (s2_cycle_T3_T4_count == (s2_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s2_cycle_add[s2_cycle] = s2_cycle_T3_T4.Sum();
                                    s2_cycle_mode_judge[s2_cycle] = 2;
                                    s2_cycle++;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_T3_T4_count = 0;
                                }
                                else if (s2_cycle_T3_T4_count < (s2_t3_t4_time - 1) && cal_item_count == convert_count2 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s2_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s2_cycle_add[s2_cycle] += s2_cycle_T3_T4[t3_t4_count];
                                    }
                                    s2_cycle_mode_judge[s2_cycle] = 5;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_remainder = s2_cycle_T3_T4_count;
                                }
                                else if (s2_cycle_judge_color_flag == 2)
                                {
                                    s2_cycle_T3_T4_count++;
                                }
                            }
                            else if (s2_cycle_judge_color_flag == 4)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s2_cycle_judge_color_flag = 4;

                                s2_cycle_geofencing[s2_cycle_geofencing_count] = Int32.Parse(s2_interval[cal_item_count]);

                                if (s2_cycle_geofencing_count == (s2_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s2_cycle_add[s2_cycle] = s2_cycle_geofencing.Sum();
                                    s2_cycle_mode_judge[s2_cycle] = 4;
                                    s2_cycle++;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_geofencing_count = 0;
                                }
                                else if (s2_cycle_geofencing_count < (s2_geofencing_time - 1) && cal_item_count == convert_count2 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s2_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s2_cycle_add[s2_cycle] += s2_cycle_geofencing[geofencing_count];
                                    }
                                    s2_cycle_mode_judge[s2_cycle] = 5;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_remainder = s2_cycle_geofencing_count;
                                }
                                else if (s2_cycle_judge_color_flag == 4)
                                {
                                    s2_cycle_geofencing_count++;
                                }
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (s2_cycle_judge_color_flag != 2 && s2_cycle_judge_color_flag != 3)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s2_cycle_judge_color_flag = 4;

                                s2_cycle_geofencing[s2_cycle_geofencing_count] = Int32.Parse(s2_interval[cal_item_count]);

                                if (s2_cycle_geofencing_count == (s2_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s2_cycle_add[s2_cycle] = s2_cycle_geofencing.Sum();
                                    s2_cycle_mode_judge[s2_cycle] = 4;
                                    s2_cycle++;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_geofencing_count = 0;
                                }
                                else if (s2_cycle_geofencing_count < (s2_geofencing_time - 1) && cal_item_count == convert_count2 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s2_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s2_cycle_add[s2_cycle] += s2_cycle_geofencing[geofencing_count];
                                    }
                                    s2_cycle_mode_judge[s2_cycle] = 5;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_remainder = s2_cycle_geofencing_count;
                                }
                                else if (s2_cycle_judge_color_flag == 4)
                                {
                                    s2_cycle_geofencing_count++;
                                }
                            }
                            else if (s2_cycle_judge_color_flag == 2)            //如果t3~t4的cycle time還沒結束繼續累加
                            {
                                s2_cycle_judge_color_flag = 2;

                                s2_cycle_T3_T4[s2_cycle_T3_T4_count] = Int32.Parse(s2_interval[cal_item_count]);
                                if (s2_cycle_T3_T4_count == (s2_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s2_cycle_add[s2_cycle] = s2_cycle_T3_T4.Sum();
                                    s2_cycle_mode_judge[s2_cycle] = 2;
                                    s2_cycle++;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_T3_T4_count = 0;
                                }
                                else if (s2_cycle_T3_T4_count < (s2_t3_t4_time - 1) && cal_item_count == convert_count2 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s2_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s2_cycle_add[s2_cycle] += s2_cycle_T3_T4[t3_t4_count];
                                    }
                                    s2_cycle_mode_judge[s2_cycle] = 5;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_remainder = s2_cycle_T3_T4_count;
                                }
                                else if (s2_cycle_judge_color_flag == 2)
                                {
                                    s2_cycle_T3_T4_count++;
                                }
                            }
                            else if (s2_cycle_judge_color_flag == 3)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s2_cycle_judge_color_flag = 3;

                                s2_cycle_dynamic[s2_cycle_dynamic_count] = Int32.Parse(s2_interval[cal_item_count]);

                                if (s2_cycle_dynamic_count == (s2_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s2_cycle_add[s2_cycle] = s2_cycle_dynamic.Sum();
                                    s2_cycle_mode_judge[s2_cycle] = 3;
                                    s2_cycle++;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_dynamic_count = 0;
                                }
                                else if (s2_cycle_dynamic_count < (s2_dynamic_time - 1) && cal_item_count == convert_count2 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s2_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s2_cycle_add[s2_cycle] += s2_cycle_dynamic[dynamic_count];
                                    }
                                    s2_cycle_mode_judge[s2_cycle] = 5;
                                    s2_cycle_judge_color_flag = 0;
                                    s2_cycle_remainder = s2_cycle_dynamic_count;
                                }
                                else if (s2_cycle_judge_color_flag == 3)
                                {
                                    s2_cycle_dynamic_count++;
                                }
                            }
                            break;

                    }

                }
                /*
                * Calculate mode cycle S2
                */

                /*
                * Calculate interval error S2
                */
                //Default : 0, T1~T2 : 1, T3~T4 : 2, Dynamic : 3, Geofencing : 4
                switch (s2_mode_font_color[cal_item_count])
                {
                    //Default
                    case 0:
                        break;
                    //T1~T2
                    case 1:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t0 - 5))               //在T0範圍內
                        {
                            if ((s2_t0 - Int32.Parse(s2_interval[cal_item_count])) > 3 || (s2_t0 - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t2 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t2 + s2_t0 - 5))
                        {
                            if (((s2_t2 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t2 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)          //在T2範圍內
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s2_interval[cal_item_count]) > (s2_t0 + s2_t2 + s2_t4 + s2_t6 + s2_t8) || Int32.Parse(s2_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                            s2_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //T3~T4
                    case 2:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t0 - 5))               //在T0範圍內
                        {
                            if ((s2_t0 - Int32.Parse(s2_interval[cal_item_count])) > 3 || (s2_t0 - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t2 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t2 + s2_t0 - 5))               //在T2範圍內
                        {
                            if (((s2_t2 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t2 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t4 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t4 + s2_t0 - 5))
                        {
                            if (((s2_t4 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t4 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)         //在T4範圍內
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t6 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t6 + s2_t0 - 5))              //在T6範圍內
                        {
                            if (((s2_t6 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t6 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t8 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t8 + s2_t0 - 5))             //在T8範圍內
                        {
                            if (((s2_t8 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t8 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s2_interval[cal_item_count]) > (s2_t0 + s2_t2 + s2_t4 + s2_t6 + s2_t8) || Int32.Parse(s2_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                            s2_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //Dynamic
                    case 3:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t0 - 5))               //在T0範圍內
                        {
                            if ((s2_t0 - Int32.Parse(s2_interval[cal_item_count])) > 3 || (s2_t0 - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t2 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t2 + s2_t0 - 5))               //在T2範圍內
                        {
                            if (((s2_t2 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t2 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t4 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t4 + s2_t0 - 5))         //在T4範圍內
                        {
                            if (((s2_t4 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t4 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t6 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t6 + s2_t0 - 5))              //在T6範圍內
                        {
                            if (((s2_t6 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t6 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t8 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t8 + s2_t0 - 5))             //在T8範圍內
                        {
                            if (((s2_t8 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t8 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s2_interval[cal_item_count]) > (s2_t0 + s2_t2 + s2_t4 + s2_t6 + s2_t8) || Int32.Parse(s2_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                            s2_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //Geofencing
                    case 4:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t0 - 5))               //在T0範圍內
                        {
                            if ((s2_t0 - Int32.Parse(s2_interval[cal_item_count])) > 3 || (s2_t0 - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t2 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t2 + s2_t0 - 5))               //在T2範圍內
                        {
                            if (((s2_t2 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t2 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t4 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t4 + s2_t0 - 5))         //在T4範圍內
                        {
                            if (((s2_t4 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t4 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t6 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t6 + s2_t0 - 5))              //在T6範圍內
                        {
                            if (((s2_t6 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t6 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s2_interval[cal_item_count]) < (s2_t8 + s2_t0 + 5) && Int32.Parse(s2_interval[cal_item_count]) > (s2_t8 + s2_t0 - 5))             //在T8範圍內
                        {
                            if (((s2_t8 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) > 3 || ((s2_t8 + s2_t0) - Int32.Parse(s2_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s2_interval_font_color[cal_item_count] = 5;
                                s2_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                                s2_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s2_interval[cal_item_count]) > (s2_t0 + s2_t2 + s2_t4 + s2_t6 + s2_t8) || Int32.Parse(s2_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s2_interval_font_color[cal_item_count] = s2_mode_font_color[cal_item_count];
                            s2_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                }
                /*
                * Calculate interval error S2
                */
            }
            //Calculate S3
            for (int cal_item_count = 2; cal_item_count <= convert_count3; cal_item_count++)
            {
                /*
                * Calculate mode cycle S3
                */
                //檢查s3是否不再freerun
                if (cal_item_count > s3_free_run_time)
                {
                    switch (s3_mode_font_color[cal_item_count])
                    {
                        //T3~T4
                        case 2:
                            if (s3_cycle_judge_color_flag != 3 && s3_cycle_judge_color_flag != 4)               //如果t3_t4的cycle time還沒結束繼續累加
                            {
                                s3_cycle_judge_color_flag = 2;

                                s3_cycle_T3_T4[s3_cycle_T3_T4_count] = Int32.Parse(s3_interval[cal_item_count]);
                                if (s3_cycle_T3_T4_count == (s3_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s3_cycle_add[s3_cycle] = s3_cycle_T3_T4.Sum();
                                    s3_cycle_mode_judge[s3_cycle] = 2;
                                    s3_cycle++;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_T3_T4_count = 0;
                                }
                                else if (s3_cycle_T3_T4_count < (s3_t3_t4_time - 1) && cal_item_count == convert_count3 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s3_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s3_cycle_add[s3_cycle] += s3_cycle_T3_T4[t3_t4_count];
                                    }
                                    s3_cycle_mode_judge[s3_cycle] = 5;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_remainder = s3_cycle_T3_T4_count;
                                }
                                else if (s3_cycle_judge_color_flag == 2)
                                {
                                    s3_cycle_T3_T4_count++;
                                }
                            }
                            else if (s3_cycle_judge_color_flag == 3)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s3_cycle_judge_color_flag = 3;

                                s3_cycle_dynamic[s3_cycle_dynamic_count] = Int32.Parse(s3_interval[cal_item_count]);

                                if (s3_cycle_dynamic_count == (s3_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s3_cycle_add[s3_cycle] = s3_cycle_dynamic.Sum();
                                    s3_cycle_mode_judge[s3_cycle] = 3;
                                    s3_cycle++;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_dynamic_count = 0;
                                }
                                else if (s3_cycle_dynamic_count < (s3_dynamic_time - 1) && cal_item_count == convert_count3 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s3_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s3_cycle_add[s3_cycle] += s3_cycle_dynamic[dynamic_count];
                                    }
                                    s3_cycle_mode_judge[s3_cycle] = 5;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_remainder = s3_cycle_dynamic_count;
                                }
                                else if (s3_cycle_judge_color_flag == 3)
                                {
                                    s3_cycle_dynamic_count++;
                                }
                            }
                            else if (s3_cycle_judge_color_flag == 4)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s3_cycle_judge_color_flag = 4;

                                s3_cycle_geofencing[s3_cycle_geofencing_count] = Int32.Parse(s3_interval[cal_item_count]);

                                if (s3_cycle_geofencing_count == (s3_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s3_cycle_add[s3_cycle] = s3_cycle_geofencing.Sum();
                                    s3_cycle_mode_judge[s3_cycle] = 4;
                                    s3_cycle++;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_geofencing_count = 0;
                                }
                                else if (s3_cycle_geofencing_count < (s3_geofencing_time - 1) && cal_item_count == convert_count3 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s3_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s3_cycle_add[s3_cycle] += s3_cycle_geofencing[geofencing_count];
                                    }
                                    s3_cycle_mode_judge[s3_cycle] = 5;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_remainder = s3_cycle_geofencing_count;
                                }
                                else if (s3_cycle_judge_color_flag == 4)
                                {
                                    s3_cycle_geofencing_count++;
                                }
                            }
                            break;
                        //Dynamic
                        case 3:
                            if (s3_cycle_judge_color_flag != 2 && s3_cycle_judge_color_flag != 4)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s3_cycle_judge_color_flag = 3;

                                s3_cycle_dynamic[s3_cycle_dynamic_count] = Int32.Parse(s3_interval[cal_item_count]);

                                if (s3_cycle_dynamic_count == (s3_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s3_cycle_add[s3_cycle] = s3_cycle_dynamic.Sum();
                                    s3_cycle_mode_judge[s3_cycle] = 3;
                                    s3_cycle++;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_dynamic_count = 0;
                                }
                                else if (s3_cycle_dynamic_count < (s3_dynamic_time - 1) && cal_item_count == convert_count3 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s3_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s3_cycle_add[s3_cycle] += s3_cycle_dynamic[dynamic_count];
                                    }
                                    s3_cycle_mode_judge[s3_cycle] = 5;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_remainder = s3_cycle_dynamic_count;
                                }
                                else if (s3_cycle_judge_color_flag == 3)
                                {
                                    s3_cycle_dynamic_count++;
                                }

                            }
                            else if (s3_cycle_judge_color_flag == 2)               //如果t3_t4的cycle time還沒結束繼續累加
                            {
                                s3_cycle_judge_color_flag = 2;

                                s3_cycle_T3_T4[s3_cycle_T3_T4_count] = Int32.Parse(s3_interval[cal_item_count]);
                                if (s3_cycle_T3_T4_count == (s3_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s3_cycle_add[s3_cycle] = s3_cycle_T3_T4.Sum();
                                    s3_cycle_mode_judge[s3_cycle] = 2;
                                    s3_cycle++;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_T3_T4_count = 0;
                                }
                                else if (s3_cycle_T3_T4_count < (s3_t3_t4_time - 1) && cal_item_count == convert_count3 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s3_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s3_cycle_add[s3_cycle] += s3_cycle_T3_T4[t3_t4_count];
                                    }
                                    s3_cycle_mode_judge[s3_cycle] = 5;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_remainder = s3_cycle_T3_T4_count;
                                }
                                else if (s3_cycle_judge_color_flag == 2)
                                {
                                    s3_cycle_T3_T4_count++;
                                }
                            }
                            else if (s3_cycle_judge_color_flag == 4)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s3_cycle_judge_color_flag = 4;

                                s3_cycle_geofencing[s3_cycle_geofencing_count] = Int32.Parse(s3_interval[cal_item_count]);

                                if (s3_cycle_geofencing_count == (s3_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s3_cycle_add[s3_cycle] = s3_cycle_geofencing.Sum();
                                    s3_cycle_mode_judge[s3_cycle] = 4;
                                    s3_cycle++;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_geofencing_count = 0;
                                }
                                else if (s3_cycle_geofencing_count < (s3_geofencing_time - 1) && cal_item_count == convert_count3 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s3_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s3_cycle_add[s3_cycle] += s3_cycle_geofencing[geofencing_count];
                                    }
                                    s3_cycle_mode_judge[s3_cycle] = 5;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_remainder = s3_cycle_geofencing_count;
                                }
                                else if (s3_cycle_judge_color_flag == 4)
                                {
                                    s3_cycle_geofencing_count++;
                                }
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (s3_cycle_judge_color_flag != 2 && s3_cycle_judge_color_flag != 3)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                s3_cycle_judge_color_flag = 4;

                                s3_cycle_geofencing[s3_cycle_geofencing_count] = Int32.Parse(s3_interval[cal_item_count]);

                                if (s3_cycle_geofencing_count == (s3_geofencing_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s3_cycle_add[s3_cycle] = s3_cycle_geofencing.Sum();
                                    s3_cycle_mode_judge[s3_cycle] = 4;
                                    s3_cycle++;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_geofencing_count = 0;
                                }
                                else if (s3_cycle_geofencing_count < (s3_geofencing_time - 1) && cal_item_count == convert_count3 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int geofencing_count = 0; geofencing_count <= s3_cycle_geofencing_count; geofencing_count++)
                                    {
                                        s3_cycle_add[s3_cycle] += s3_cycle_geofencing[geofencing_count];
                                    }
                                    s3_cycle_mode_judge[s3_cycle] = 5;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_remainder = s3_cycle_geofencing_count;
                                }
                                else if (s3_cycle_judge_color_flag == 4)
                                {
                                    s3_cycle_geofencing_count++;
                                }
                            }
                            else if (s3_cycle_judge_color_flag == 2)            //如果t3~t4的cycle time還沒結束繼續累加
                            {
                                s3_cycle_judge_color_flag = 2;

                                s3_cycle_T3_T4[s3_cycle_T3_T4_count] = Int32.Parse(s3_interval[cal_item_count]);
                                if (s3_cycle_T3_T4_count == (s3_t3_t4_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s3_cycle_add[s3_cycle] = s3_cycle_T3_T4.Sum();
                                    s3_cycle_mode_judge[s3_cycle] = 2;
                                    s3_cycle++;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_T3_T4_count = 0;
                                }
                                else if (s3_cycle_T3_T4_count < (s3_t3_t4_time - 1) && cal_item_count == convert_count3 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int t3_t4_count = 0; t3_t4_count <= s3_cycle_T3_T4_count; t3_t4_count++)
                                    {
                                        s3_cycle_add[s3_cycle] += s3_cycle_T3_T4[t3_t4_count];
                                    }
                                    s3_cycle_mode_judge[s3_cycle] = 5;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_remainder = s3_cycle_T3_T4_count;
                                }
                                else if (s3_cycle_judge_color_flag == 2)
                                {
                                    s3_cycle_T3_T4_count++;
                                }
                            }
                            else if (s3_cycle_judge_color_flag == 3)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                s3_cycle_judge_color_flag = 3;

                                s3_cycle_dynamic[s3_cycle_dynamic_count] = Int32.Parse(s3_interval[cal_item_count]);

                                if (s3_cycle_dynamic_count == (s3_dynamic_time - 1))                                                  //若打點還沒跑完進行cycle的累加
                                {
                                    s3_cycle_add[s3_cycle] = s3_cycle_dynamic.Sum();
                                    s3_cycle_mode_judge[s3_cycle] = 3;
                                    s3_cycle++;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_dynamic_count = 0;
                                }
                                else if (s3_cycle_dynamic_count < (s3_dynamic_time - 1) && cal_item_count == convert_count3 - 1)          //若打點打完進行cycle餘數的累加
                                {
                                    for (int dynamic_count = 0; dynamic_count <= s3_cycle_dynamic_count; dynamic_count++)
                                    {
                                        s3_cycle_add[s3_cycle] += s3_cycle_dynamic[dynamic_count];
                                    }
                                    s3_cycle_mode_judge[s3_cycle] = 5;
                                    s3_cycle_judge_color_flag = 0;
                                    s3_cycle_remainder = s3_cycle_dynamic_count;
                                }
                                else if (s3_cycle_judge_color_flag == 3)
                                {
                                    s3_cycle_dynamic_count++;
                                }
                            }
                            break;

                    }

                }
                /*
                * Calculate mode cycle S3
                */

                /*
                * Calculate interval error S3
                */
                //Default : 0, T1~T2 : 1, T3~T4 : 2, Dynamic : 3, Geofencing : 4
                switch (s3_mode_font_color[cal_item_count])
                {
                    //Default
                    case 0:
                        break;
                    //T1~T2
                    case 1:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t0 - 5))               //在T0範圍內
                        {
                            if ((s3_t0 - Int32.Parse(s3_interval[cal_item_count])) > 3 || (s3_t0 - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t2 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t2 + s3_t0 - 5))
                        {
                            if (((s3_t2 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t2 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)          //在T2範圍內
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s3_interval[cal_item_count]) > (s3_t0 + s3_t2 + s3_t4 + s3_t6 + s3_t8) || Int32.Parse(s3_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                            s3_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //T3~T4
                    case 2:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t0 - 5))               //在T0範圍內
                        {
                            if ((s3_t0 - Int32.Parse(s3_interval[cal_item_count])) > 3 || (s3_t0 - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t2 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t2 + s3_t0 - 5))               //在T2範圍內
                        {
                            if (((s3_t2 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t2 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t4 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t4 + s3_t0 - 5))
                        {
                            if (((s3_t4 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t4 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)         //在T4範圍內
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t6 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t6 + s3_t0 - 5))              //在T6範圍內
                        {
                            if (((s3_t6 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t6 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t8 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t8 + s3_t0 - 5))             //在T8範圍內
                        {
                            if (((s3_t8 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t8 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s3_interval[cal_item_count]) > (s3_t0 + s3_t2 + s3_t4 + s3_t6 + s3_t8) || Int32.Parse(s3_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                            s3_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //Dynamic
                    case 3:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t0 - 5))               //在T0範圍內
                        {
                            if ((s3_t0 - Int32.Parse(s3_interval[cal_item_count])) > 3 || (s3_t0 - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t2 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t2 + s3_t0 - 5))               //在T2範圍內
                        {
                            if (((s3_t2 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t2 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t4 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t4 + s3_t0 - 5))         //在T4範圍內
                        {
                            if (((s3_t4 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t4 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t6 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t6 + s3_t0 - 5))              //在T6範圍內
                        {
                            if (((s3_t6 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t6 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t8 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t8 + s3_t0 - 5))             //在T8範圍內
                        {
                            if (((s3_t8 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t8 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s3_interval[cal_item_count]) > (s3_t0 + s3_t2 + s3_t4 + s3_t6 + s3_t8) || Int32.Parse(s3_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                            s3_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                    //Geofencing
                    case 4:
                        //確認T0是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t0 - 5))               //在T0範圍內
                        {
                            if ((s3_t0 - Int32.Parse(s3_interval[cal_item_count])) > 3 || (s3_t0 - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T2)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t2 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t2 + s3_t0 - 5))               //在T2範圍內
                        {
                            if (((s3_t2 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t2 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T4)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t4 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t4 + s3_t0 - 5))         //在T4範圍內
                        {
                            if (((s3_t4 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t4 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T6)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t6 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t6 + s3_t0 - 5))              //在T6範圍內
                        {
                            if (((s3_t6 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t6 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //確認睡眠時間(T8)是不是在範圍內
                        if (Int32.Parse(s3_interval[cal_item_count]) < (s3_t8 + s3_t0 + 5) && Int32.Parse(s3_interval[cal_item_count]) > (s3_t8 + s3_t0 - 5))             //在T8範圍內
                        {
                            if (((s3_t8 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) > 3 || ((s3_t8 + s3_t0) - Int32.Parse(s3_interval[cal_item_count])) < -3)
                            {
                                //interval write font red color
                                s3_interval_font_color[cal_item_count] = 5;
                                s3_interval_judge[cal_item_count] = "False";
                                break;
                            }
                            else
                            {
                                //interval write font original color
                                s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                                s3_interval_judge[cal_item_count] = "OK";
                                break;
                            }
                        }

                        //沒有解析出時間
                        if (Int32.Parse(s3_interval[cal_item_count]) > (s3_t0 + s3_t2 + s3_t4 + s3_t6 + s3_t8) || Int32.Parse(s3_interval[cal_item_count]) < 0)
                        {
                            //interval write font original color
                            s3_interval_font_color[cal_item_count] = s3_mode_font_color[cal_item_count];
                            s3_interval_judge[cal_item_count] = "Not Analyze time";
                            break;
                        }

                        break;
                }
                /*
                * Calculate interval error S3
                */
                /*
                * To do Calculate interval error
                */
            }

            //Initial flag
            s0_first_fix_flag = 0;
            s0_analyze_utc_time_flag = 0;
            s1_first_fix_flag = 0;
            s1_analyze_utc_time_flag = 0;
            s2_first_fix_flag = 0;
            s2_analyze_utc_time_flag = 0;
            s3_first_fix_flag = 0;
            s3_analyze_utc_time_flag = 0;

            //Auto Save Send
            if (autosavechk.Checked == true)
            {
                data_send_excel();
            }

            //button5.BackColor = Color.Green;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            textBox4.Clear();
            textBox6.Clear();
            textBox7.Clear();
            textBox8.Clear();

            richTextBox1.Clear();
            richTextBox2.Clear();
            richTextBox3.Clear();
            richTextBox4.Clear();
            richTextBox5.Clear();
            richTextBox6.Clear();
            richTextBox7.Clear();
            richTextBox8.Clear();
            richTextBox9.Clear();
            richTextBox10.Clear();
            richTextBox11.Clear();
            richTextBox12.Clear();

            label26.Text = "N/A";
            label27.Text = "N/A";
            label28.Text = "N/A";
            label29.Text = "N/A";
            label30.Text = "N/A";
            label31.Text = "N/A";
            label35.Text = "N/A";
            label36.Text = "N/A";
            label37.Text = "N/A";
            label41.Text = "N/A";
            label42.Text = "N/A";
            label43.Text = "N/A";

        }
        private void textBox7_TextChanged(object sender, EventArgs e)
        {

        }

        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            if (ALLchk.Checked == true)
            {
                s0chkb.Checked = true;
                s1chkb.Checked = true;
                s2chkb.Checked = true;
                s3chkb.Checked = true;
            }
            else
            {
                s0chkb.Checked = false;
                s1chkb.Checked = false;
                s2chkb.Checked = false;
                s3chkb.Checked = false;
            }
        }


        private void data_send_excel()
        {
            //FileRecord
            String directory_filerecord = SvFileBox.Text + @"\" + "FileRecord";

            //s0 File
            String s0_directory_file = directory_filerecord + @"\" + textBox9.Text;
            //s0 save excel path
            String s0_directory_fileexcel = directory_filerecord + @"\" + textBox9.Text + @"\" + DateTime.Now.ToString("HHmmss") + "_" + textBox9.Text + "_Tool_Parse_Log.xlsx";

            //s1 File
            String s1_directory_file = directory_filerecord + @"\" + textBox10.Text;
            //s1 save excel path
            String s1_directory_fileexcel = directory_filerecord + @"\" + textBox10.Text + @"\" + DateTime.Now.ToString("HHmmss") + "_" + textBox10.Text + "_Tool_Parse_Log.xlsx";

            //s2 File
            String s2_directory_file = directory_filerecord + @"\" + textBox11.Text;
            //s2 save excel path
            String s2_directory_fileexcel = directory_filerecord + @"\" + textBox11.Text + @"\" + DateTime.Now.ToString("HHmmss") + "_" + textBox11.Text + "_Tool_Parse_Log.xlsx";

            //s3 File
            String s3_directory_file = directory_filerecord + @"\" + textBox12.Text;
            //s3 save excel path
            String s3_directory_fileexcel = directory_filerecord + @"\" + textBox12.Text + @"\" + DateTime.Now.ToString("HHmmss") + "_" + textBox12.Text + "_Tool_Parse_Log.xlsx";

            String directory_filemerge = directory_filerecord + @"\" + DateTime.Now.ToString("HHmmss") + "_Parse_Merge_Log.xlsx";

            //Check CSV File exist
            if (Directory.Exists(directory_filerecord))
            {

            }
            else
            {
                Directory.CreateDirectory(directory_filerecord);
            }

            Excel.Workbook merge_wb = new Excel.Workbook();
            Excel.Worksheet merge_ws = merge_wb.Worksheets[0];

            merge_ws.Name = "Parse Merge";

            //Save s0 excel file
            if (s0chkb.Checked == true)
            {
                int chkfile = 0;
                if (s1chkb.Checked == true && s2chkb.Checked == true && s3chkb.Checked == true)
                {
                    if (s0_t0 == s1_t0 && s0_t0 == s2_t0 && s0_t0 == s3_t0 && s0_t1 == s1_t1 && s0_t1 == s2_t1 && s0_t1 == s3_t1 && s0_t2 == s1_t2 && s0_t2 == s2_t2 && s0_t2 == s3_t2 && s0_t3 == s1_t3 && s0_t3 == s2_t3 && s0_t3 == s3_t3 && s0_t4 == s1_t4 && s0_t4 == s2_t4 && s0_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s1chkb.Checked == true && s2chkb.Checked == true && s3chkb.Checked == false)
                {
                    if (s0_t0 == s1_t0 && s0_t0 == s2_t0 && s0_t1 == s1_t1 && s0_t1 == s2_t1 && s0_t2 == s1_t2 && s0_t2 == s2_t2 && s0_t3 == s1_t3 && s0_t3 == s2_t3 && s0_t4 == s1_t4 && s0_t4 == s2_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s1chkb.Checked == true && s2chkb.Checked == false && s3chkb.Checked == true)
                {
                    if (s0_t0 == s1_t0 && s0_t0 == s3_t0 && s0_t1 == s1_t1 && s0_t1 == s3_t1 && s0_t2 == s1_t2 && s0_t2 == s3_t2 && s0_t3 == s1_t3 && s0_t3 == s3_t3 && s0_t4 == s1_t4 && s0_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s1chkb.Checked == false && s2chkb.Checked == true && s3chkb.Checked == true)
                {
                    if (s0_t0 == s2_t0 && s0_t0 == s3_t0 && s0_t1 == s2_t1 && s0_t1 == s3_t1 && s0_t2 == s2_t2 && s0_t2 == s3_t2 && s0_t3 == s2_t3 && s0_t3 == s3_t3 && s0_t4 == s2_t4 && s0_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s1chkb.Checked == true && s2chkb.Checked == false && s3chkb.Checked == false)
                {
                    if (s0_t0 == s1_t0 && s0_t1 == s1_t1 && s0_t2 == s1_t2 && s0_t3 == s1_t3 && s0_t4 == s1_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s1chkb.Checked == false && s2chkb.Checked == true && s3chkb.Checked == false)
                {
                    if (s0_t0 == s2_t0 && s0_t1 == s2_t1 && s0_t2 == s2_t2 && s0_t3 == s2_t3 && s0_t4 == s2_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s1chkb.Checked == false && s2chkb.Checked == false && s3chkb.Checked == true)
                {
                    if (s0_t0 == s3_t0 && s0_t1 == s3_t1 && s0_t2 == s3_t2 && s0_t3 == s3_t3 && s0_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s1chkb.Checked == false && s2chkb.Checked == false && s3chkb.Checked == false)
                {
                    chkfile = 1;
                }

                if (Directory.Exists(s0_directory_file))
                {

                }
                else
                {
                    Directory.CreateDirectory(s0_directory_file);
                }

                int cmd_count;

                Excel.Workbook wb = new Excel.Workbook();
                Excel.Worksheet sheet = wb.Worksheets[0];

                sheet.Name = "Locus Row Data";
                //sheet.AutoFilter.Range = "A1";

                //合併"指令代碼"儲存格
                Excel.Cells title_Instruction_code_format = sheet.Cells;
                Excel.Cells title_Ramdom_combinations_format = sheet.Cells;
                Excel.Cells Free_run_time = sheet.Cells;
                title_Instruction_code_format.Merge(0, 0, 1, 2);
                title_Ramdom_combinations_format.Merge(0, 6, 1, 5);
                Free_run_time.Merge(1, 16, s0_free_run_time, 1);

                /*
                 * s0 cycle sheet
                 */
                excel_mode_flag = 0;
                excel_mode_frame = 0;
                for (int excel_cycle_count = 0; excel_cycle_count <= s0_cycle; excel_cycle_count++)
                {
                    Excel.Cells cycle_time_frame = sheet.Cells;
                    Excel.Cell cycle_time;
                    switch (s0_cycle_mode_judge[excel_cycle_count])
                    {
                        //T3~T4
                        case 2:
                            if (excel_mode_flag != 3 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)               //t3_t4的first cycle time
                                {
                                    excel_mode_frame = s0_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s0_t3_t4_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 2;
                                }
                                else if (excel_mode_flag == 2 && s0_cycle_add[excel_cycle_count] != 0)               //如果t3_t4的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s0_t3_t4_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s0_t3_t4_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }

                            }
                            else if (excel_mode_flag == 3 && s0_cycle_add[excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                excel_mode_frame += s0_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s0_t3_t4_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            else if (excel_mode_flag == 4 && s0_cycle_add[excel_cycle_count] != 0)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                excel_mode_frame += s0_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s0_t3_t4_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            break;

                        //Dynamic
                        case 3:
                            if (excel_mode_flag != 2 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)            //如果Dynamic的first cycle time
                                {
                                    excel_mode_frame = s0_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s0_dynamic_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 3;
                                }
                                else if (excel_mode_flag == 3 && s0_cycle_add[excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s0_dynamic_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s0_dynamic_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s0_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s0_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s0_dynamic_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            else if (excel_mode_flag == 4 && s0_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s0_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s0_dynamic_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (excel_mode_flag != 2 && excel_mode_flag != 3)
                            {
                                if (excel_mode_flag == 0)            //如果Geofencing的first cycle time
                                {
                                    excel_mode_frame = s0_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s0_geofencing_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 4;
                                }
                                else if (excel_mode_flag == 4 && s0_cycle_add[excel_cycle_count] != 0)            //如果Geofencing的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s0_geofencing_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s0_geofencing_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s0_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s0_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s0_geofencing_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }
                            else if (excel_mode_flag == 3 && s0_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s0_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s0_geofencing_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s0_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }

                            break;
                        //餘數
                        case 5:
                            if (excel_mode_flag == 2)               //T3~T4 下的餘數
                            {
                                excel_mode_frame += s0_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s0_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s0_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 3)           //Dynamic下的餘數
                            {
                                excel_mode_frame += s0_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s0_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s0_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 4)          //Geofencing下的餘數
                            {

                                excel_mode_frame += s0_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s0_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s0_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s0_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                            }
                            break;
                    }
                }
                /*
                 * s0 cycle sheet
                 */

                //設定title
                Excel.Cell title_Instruction_code = sheet.Cells["A1"];
                Excel.Cell title_Item = sheet.Cells["C1"];
                Excel.Cell title_time_ymd = sheet.Cells["D1"];
                Excel.Cell title_time_hms = sheet.Cells["E1"];
                Excel.Cell title_Fix = sheet.Cells["F1"];
                Excel.Cell title_Random_combinations = sheet.Cells["G1"];
                Excel.Cell title_sat = sheet.Cells["L1"];
                Excel.Cell title_mode = sheet.Cells["M1"];
                Excel.Cell title_interval = sheet.Cells["N1"];
                //DeepSkyBlue : 0, Blue : 1, Orange : 2, LightSeaGreen : 3
                Excel.Cell color_DeepSkyBlue = sheet.Cells["S2"];
                Excel.Cell DeepSkyBlue_explanation = sheet.Cells["T2"];
                Excel.Cell color_Blue = sheet.Cells["S3"];
                Excel.Cell Blue_explanation = sheet.Cells["T3"];
                Excel.Cell color_Orange = sheet.Cells["S4"];
                Excel.Cell Orange_explanation = sheet.Cells["T4"];
                Excel.Cell color_LightSeaGreen = sheet.Cells["S5"];
                Excel.Cell LightSeaGreen_explanation = sheet.Cells["T5"];
                Excel.Cell HighEffcien = sheet.Cells["S6"];
                //誤差值判定Title、組數
                Excel.Cell title_interval_judge = sheet.Cells["P1"];
                Excel.Cell title_cycle = sheet.Cells["Q1"];
                Excel.Cell cycle_free_run = sheet.Cells["Q2"];
                //T0~T4 title
                Excel.Cell title_T0 = sheet.Cells["S10"];
                Excel.Cell title_T1 = sheet.Cells["S11"];
                Excel.Cell title_T2 = sheet.Cells["S12"];
                Excel.Cell title_T3 = sheet.Cells["S13"];
                Excel.Cell title_T4 = sheet.Cells["S14"];
                Excel.Cell title_T0_value = sheet.Cells["T10"];
                Excel.Cell title_T1_value = sheet.Cells["T11"];
                Excel.Cell title_T2_value = sheet.Cells["T12"];
                Excel.Cell title_T3_value = sheet.Cells["T13"];
                Excel.Cell title_T4_value = sheet.Cells["T14"];
                //時間換算、組數換算
                Excel.Cell enter_num = sheet.Cells["V10"];
                Excel.Cell title_time_cal = sheet.Cells["V11"];
                Excel.Cell title_cycle_cal = sheet.Cells["V12"];
                Excel.Cell title_time_cal_value = sheet.Cells["W11"];
                Excel.Cell title_cycle_cal_value = sheet.Cells["W12"];

                //寫入title
                title_Instruction_code.PutValue("指令代碼");
                title_Item.PutValue("Item");
                title_time_ymd.PutValue("定位日期(年_月_日)");
                title_time_hms.PutValue("定位日期(時_分_秒)");
                title_Fix.PutValue("Fix-Type");
                title_Random_combinations.PutValue("亂數組合");
                title_sat.PutValue("使用的衛星數");
                title_mode.PutValue("Mode");
                title_interval.PutValue("Interval");
                DeepSkyBlue_explanation.PutValue("T0 ~ T1");
                Blue_explanation.PutValue("T2 ~ T4");
                Orange_explanation.PutValue("Dynamic");
                LightSeaGreen_explanation.PutValue("Geofencing");
                HighEffcien.PutValue("High effcien");
                //誤差值判定Title、組數
                title_cycle.PutValue("打點資訊");
                cycle_free_run.PutValue(s0_free_run_time.ToString() + "組");
                //T0~T4 title
                title_T0.PutValue("T0");
                title_T1.PutValue("T1");
                title_T2.PutValue("T2");
                title_T3.PutValue("T3");
                title_T4.PutValue("T4");
                title_T0_value.PutValue(s0_t0.ToString());
                title_T1_value.PutValue(s0_t1.ToString());
                title_T2_value.PutValue(s0_t2.ToString());
                title_T3_value.PutValue(s0_t3.ToString());
                title_T4_value.PutValue(s0_t4.ToString());
                //時間換算、組數換算
                enter_num.PutValue("請輸入換算數字 =>");
                title_time_cal.PutValue("時間換算");
                title_cycle_cal.PutValue("組數換算");
                sheet.Cells.SetColumnWidth(21, 17);
                title_time_cal_value.Formula = "=(W10*3600)/" + s0_t1.ToString();
                title_cycle_cal_value.Formula = "W11/(" + s0_t2.ToString() + "+" + s0_t3.ToString() + ")";

                Excel.Style color_DeepSkyBlue_style = sheet.Cells["S2"].GetStyle();
                color_DeepSkyBlue_style.ForegroundColor = Color.FromArgb(0, 191, 255);
                color_DeepSkyBlue_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S2"].SetStyle(color_DeepSkyBlue_style);
                Excel.Style color_Blue_style = sheet.Cells["S3"].GetStyle();
                color_Blue_style.ForegroundColor = Color.Blue;
                color_Blue_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S3"].SetStyle(color_Blue_style);
                Excel.Style color_Orange_style = sheet.Cells["S4"].GetStyle();
                color_Orange_style.ForegroundColor = Color.Orange;
                color_Orange_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S4"].SetStyle(color_Orange_style);
                Excel.Style color_LightSeaGreen_style = sheet.Cells["S5"].GetStyle();
                color_LightSeaGreen_style.ForegroundColor = Color.FromArgb(32, 178, 170);
                color_LightSeaGreen_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S5"].SetStyle(color_LightSeaGreen_style);
                Excel.Style HighEffcien_style = sheet.Cells["S6"].GetStyle();
                HighEffcien_style.ForegroundColor = Color.FromArgb(169, 208, 142);
                HighEffcien_style.Font.Color = Color.Red;
                HighEffcien_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S6"].SetStyle(HighEffcien_style);

                for (cmd_count = 1; cmd_count < convert_count0; cmd_count++)
                {
                    //宣告欄位
                    Excel.Cell Excel0_Instruction_code_cmd = sheet.Cells[cmd_count, 0];
                    Excel.Cell Excel0_Instruction_code_cmd_two = sheet.Cells[cmd_count, 1];
                    Excel.Cell Excel0_item = sheet.Cells[cmd_count, 2];
                    Excel.Cell Excel0_ymd = sheet.Cells[cmd_count, 3];
                    Excel.Cell Excel0_hms = sheet.Cells[cmd_count, 4];
                    Excel.Cell Excel0_fix = sheet.Cells[cmd_count, 5];
                    Excel.Cell Excel0_ramdom_first = sheet.Cells[cmd_count, 6];
                    Excel.Cell Excel0_ramdom_second = sheet.Cells[cmd_count, 7];
                    Excel.Cell Excel0_ramdom_third = sheet.Cells[cmd_count, 8];
                    Excel.Cell Excel0_ramdom_forth = sheet.Cells[cmd_count, 9];
                    Excel.Cell Excel0_ramdom_fiveth = sheet.Cells[cmd_count, 10];
                    Excel.Cell Excel0_sat = sheet.Cells[cmd_count, 11];
                    Excel.Cell Excel0_mode = sheet.Cells[cmd_count, 12];

                    //存放欄位
                    Excel0_Instruction_code_cmd.PutValue(s0_Instruction_code_cmd[cmd_count]);
                    Excel0_Instruction_code_cmd_two.PutValue(Int32.Parse(s0_Instruction_code_cmd_two[cmd_count]));
                    Excel0_item.PutValue(Int32.Parse(s0_Item[cmd_count]));
                    Excel0_ymd.PutValue(s0_ymd[cmd_count]);
                    Excel0_hms.PutValue(s0_hms[cmd_count]);
                    Excel0_fix.PutValue(s0_fix[cmd_count]);
                    Excel0_ramdom_first.PutValue(s0_ramdom_first[cmd_count]);
                    Excel0_ramdom_second.PutValue(s0_ramdom_second[cmd_count]);
                    Excel0_ramdom_third.PutValue(s0_ramdom_third[cmd_count]);
                    Excel0_ramdom_forth.PutValue(s0_ramdom_forth[cmd_count]);
                    Excel0_ramdom_fiveth.PutValue(s0_ramdom_fiveth[cmd_count]);
                    Excel0_sat.PutValue(s0_sat[cmd_count]);
                    Excel0_mode.PutValue(s0_mode[cmd_count]);
                    //宣告style調整格式
                    Excel.Style Excel0_Instruction_code_cmd_style = sheet.Cells[cmd_count, 0].GetStyle();
                    Excel.Style Excel0_Instruction_code_cmd_two_style = sheet.Cells[cmd_count, 1].GetStyle();
                    Excel.Style Excel0_item_style = sheet.Cells[cmd_count, 2].GetStyle();
                    Excel.Style Excel0_ymd_style = sheet.Cells[cmd_count, 3].GetStyle();
                    Excel.Style Excel0_hms_style = sheet.Cells[cmd_count, 4].GetStyle();
                    Excel.Style Excel0_fix_style = sheet.Cells[cmd_count, 5].GetStyle();
                    Excel.Style Excel0_ramdom_first_style = sheet.Cells[cmd_count, 6].GetStyle();
                    Excel.Style Excel0_ramdom_second_style = sheet.Cells[cmd_count, 7].GetStyle();
                    Excel.Style Excel0_ramdom_third_style = sheet.Cells[cmd_count, 8].GetStyle();
                    Excel.Style Excel0_ramdom_forth_style = sheet.Cells[cmd_count, 9].GetStyle();
                    Excel.Style Excel0_ramdom_fiveth_style = sheet.Cells[cmd_count, 10].GetStyle();
                    Excel.Style Excel0_sat_style = sheet.Cells[cmd_count, 11].GetStyle();
                    Excel.Style Excel0_mode_style = sheet.Cells[cmd_count, 12].GetStyle();

                    //Set color
                    //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4
                    switch (s0_mode_font_color[cmd_count])
                    {
                        case 0:
                            break;
                        case 1:
                            Excel0_Instruction_code_cmd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_Instruction_code_cmd_two_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_item_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_ymd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_hms_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_fix_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_ramdom_first_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_ramdom_second_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_ramdom_third_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_ramdom_forth_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_ramdom_fiveth_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_sat_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel0_mode_style.Font.Color = Color.FromArgb(0, 191, 255);
                            break;
                        case 2:
                            Excel0_Instruction_code_cmd_style.Font.Color = Color.Blue;
                            Excel0_Instruction_code_cmd_two_style.Font.Color = Color.Blue;
                            Excel0_item_style.Font.Color = Color.Blue;
                            Excel0_ymd_style.Font.Color = Color.Blue;
                            Excel0_hms_style.Font.Color = Color.Blue;
                            Excel0_fix_style.Font.Color = Color.Blue;
                            Excel0_ramdom_first_style.Font.Color = Color.Blue;
                            Excel0_ramdom_second_style.Font.Color = Color.Blue;
                            Excel0_ramdom_third_style.Font.Color = Color.Blue;
                            Excel0_ramdom_forth_style.Font.Color = Color.Blue;
                            Excel0_ramdom_fiveth_style.Font.Color = Color.Blue;
                            Excel0_sat_style.Font.Color = Color.Blue;
                            Excel0_mode_style.Font.Color = Color.Blue;
                            break;
                        case 3:
                            Excel0_Instruction_code_cmd_style.Font.Color = Color.Orange;
                            Excel0_Instruction_code_cmd_two_style.Font.Color = Color.Orange;
                            Excel0_item_style.Font.Color = Color.Orange;
                            Excel0_ymd_style.Font.Color = Color.Orange;
                            Excel0_hms_style.Font.Color = Color.Orange;
                            Excel0_fix_style.Font.Color = Color.Orange;
                            Excel0_ramdom_first_style.Font.Color = Color.Orange;
                            Excel0_ramdom_second_style.Font.Color = Color.Orange;
                            Excel0_ramdom_third_style.Font.Color = Color.Orange;
                            Excel0_ramdom_forth_style.Font.Color = Color.Orange;
                            Excel0_ramdom_fiveth_style.Font.Color = Color.Orange;
                            Excel0_sat_style.Font.Color = Color.Orange;
                            Excel0_mode_style.Font.Color = Color.Orange;
                            break;
                        case 4:
                            Excel0_Instruction_code_cmd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_Instruction_code_cmd_two_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_item_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_ymd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_hms_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_fix_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_ramdom_first_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_ramdom_second_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_ramdom_third_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_ramdom_forth_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_ramdom_fiveth_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_sat_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel0_mode_style.Font.Color = Color.FromArgb(32, 178, 170);
                            break;
                    }


                    //字體置中
                    Excel0_Instruction_code_cmd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_Instruction_code_cmd_two_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_fix_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_ramdom_first_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_ramdom_second_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_ramdom_third_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_ramdom_forth_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_ramdom_fiveth_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_sat_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel0_mode_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    //style set
                    sheet.Cells[cmd_count, 0].SetStyle(Excel0_Instruction_code_cmd_style);
                    sheet.Cells[cmd_count, 1].SetStyle(Excel0_Instruction_code_cmd_two_style);
                    sheet.Cells[cmd_count, 2].SetStyle(Excel0_item_style);
                    sheet.Cells[cmd_count, 3].SetStyle(Excel0_ymd_style);
                    sheet.Cells[cmd_count, 4].SetStyle(Excel0_hms_style);
                    sheet.Cells[cmd_count, 5].SetStyle(Excel0_fix_style);
                    sheet.Cells[cmd_count, 6].SetStyle(Excel0_ramdom_first_style);
                    sheet.Cells[cmd_count, 7].SetStyle(Excel0_ramdom_second_style);
                    sheet.Cells[cmd_count, 8].SetStyle(Excel0_ramdom_third_style);
                    sheet.Cells[cmd_count, 9].SetStyle(Excel0_ramdom_forth_style);
                    sheet.Cells[cmd_count, 10].SetStyle(Excel0_ramdom_fiveth_style);
                    sheet.Cells[cmd_count, 11].SetStyle(Excel0_sat_style);
                    sheet.Cells[cmd_count, 12].SetStyle(Excel0_mode_style);


                    if (cmd_count > 1)
                    {
                        Excel.Cell Excel0_interval = sheet.Cells[cmd_count, 13];
                        Excel.Cell Excel0_interval_judge = sheet.Cells[cmd_count, 15];
                        Excel0_interval.PutValue(s0_interval[cmd_count]);
                        Excel0_interval_judge.PutValue(s0_interval_judge[cmd_count]);
                        Excel.Style Excel0_interval_style = sheet.Cells[cmd_count, 13].GetStyle();
                        Excel.Style Excel0_interval_judge_style = sheet.Cells[cmd_count, 15].GetStyle();
                        //Set Interval Font color
                        //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4, Red : 5
                        switch (s0_interval_font_color[cmd_count])
                        {
                            case 0:
                                break;
                            case 1:
                                Excel0_interval_style.Font.Color = Color.FromArgb(0, 191, 255);
                                break;
                            case 2:
                                Excel0_interval_style.Font.Color = Color.Blue;
                                break;
                            case 3:
                                Excel0_interval_style.Font.Color = Color.Orange;
                                break;
                            case 4:
                                Excel0_interval_style.Font.Color = Color.FromArgb(32, 178, 170);
                                break;
                            case 5:
                                Excel0_interval_style.Font.Color = Color.Red;
                                s0_interval_judge_flag = 1;
                                break;

                        }
                        Excel0_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        Excel0_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        sheet.Cells[cmd_count, 13].SetStyle(Excel0_interval_style);
                        sheet.Cells[cmd_count, 15].SetStyle(Excel0_interval_judge_style);
                    }

                }


                //指令代碼title格式調整
                Excel.Style title_Instruction_code_style = sheet.Cells["A1"].GetStyle();
                Excel.Style title_Instruction_code_style_b2 = sheet.Cells["B1"].GetStyle();
                Excel.Font title_Instruction_code_font = title_Instruction_code_style.Font;
                title_Instruction_code_style.ForegroundColor = Color.LightGray;
                title_Instruction_code_style.Pattern = Excel.BackgroundType.Solid;
                title_Instruction_code_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Instruction_code_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Instruction_code_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Instruction_code_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Instruction_code_font.IsBold = true;
                sheet.Cells.SetColumnWidth(0, 15);
                sheet.Cells["A1"].SetStyle(title_Instruction_code_style);
                sheet.Cells["B1"].SetStyle(title_Instruction_code_style_b2);

                //Item title格式調整
                Excel.Style title_Item_style = sheet.Cells["C1"].GetStyle();
                Excel.Font title_Item_font = title_Item_style.Font;
                title_Item_style.ForegroundColor = Color.LightGray;
                title_Item_style.Pattern = Excel.BackgroundType.Solid;
                title_Item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Item_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Item_font.IsBold = true;
                sheet.Cells["C1"].SetStyle(title_Item_style);

                //time ymd格式調整
                Excel.Style title_time_ymd_style = sheet.Cells["D1"].GetStyle();
                Excel.Font title_time_ymd_font = title_time_ymd_style.Font;
                title_time_ymd_style.ForegroundColor = Color.LightGray;
                title_time_ymd_style.Pattern = Excel.BackgroundType.Solid;
                title_time_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_time_ymd_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_time_ymd_font.IsBold = true;
                sheet.Cells.SetColumnWidth(3, 35);
                sheet.Cells["D1"].SetStyle(title_time_ymd_style);

                //time hms格式調整
                Excel.Style title_time_hms_style = sheet.Cells["E1"].GetStyle();
                Excel.Font title_time_hms_font = title_time_hms_style.Font;
                title_time_hms_style.ForegroundColor = Color.LightGray;
                title_time_hms_style.Pattern = Excel.BackgroundType.Solid;
                title_time_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_time_hms_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_time_hms_font.IsBold = true;
                sheet.Cells["E1"].SetStyle(title_time_hms_style);
                sheet.Cells.SetColumnWidth(4, 35);

                //Fix Type格式調整
                Excel.Style title_fix_type_style = sheet.Cells["F1"].GetStyle();
                Excel.Font title_fix_type_font = title_time_hms_style.Font;
                title_fix_type_style.ForegroundColor = Color.LightGray;
                title_fix_type_style.Pattern = Excel.BackgroundType.Solid;
                title_fix_type_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_fix_type_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_fix_type_font.IsBold = true;
                sheet.Cells["F1"].SetStyle(title_fix_type_style);

                //Ramdom combinations格式調整
                Excel.Style title_Ramdom_combinations_style = sheet.Cells["G1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b2 = sheet.Cells["H1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b3 = sheet.Cells["I1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b4 = sheet.Cells["J1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b5 = sheet.Cells["K1"].GetStyle();
                Excel.Font title_Ramdom_combinations_font = title_Ramdom_combinations_style.Font;
                title_Ramdom_combinations_style.ForegroundColor = Color.LightGray;
                title_Ramdom_combinations_style.Pattern = Excel.BackgroundType.Solid;
                title_Ramdom_combinations_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_font.IsBold = true;
                sheet.Cells.SetColumnWidth(6, 10);
                sheet.Cells.SetColumnWidth(7, 10);
                sheet.Cells["G1"].SetStyle(title_Ramdom_combinations_style);
                sheet.Cells["H1"].SetStyle(title_Ramdom_combinations_style_b2);
                sheet.Cells["I1"].SetStyle(title_Ramdom_combinations_style_b3);
                sheet.Cells["J1"].SetStyle(title_Ramdom_combinations_style_b4);
                sheet.Cells["K1"].SetStyle(title_Ramdom_combinations_style_b5);

                //SAT格式調整
                Excel.Style title_sat_style = sheet.Cells["L1"].GetStyle();
                Excel.Font title_sat_font = title_sat_style.Font;
                title_sat_style.ForegroundColor = Color.LightGray;
                title_sat_style.Pattern = Excel.BackgroundType.Solid;
                title_sat_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_sat_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_sat_font.IsBold = true;
                sheet.Cells.SetColumnWidth(11, 20);
                sheet.Cells["L1"].SetStyle(title_sat_style);

                //Mode格式調整
                Excel.Style title_mode_style = sheet.Cells["M1"].GetStyle();
                Excel.Font title_mode_font = title_mode_style.Font;
                title_mode_style.ForegroundColor = Color.LightGray;
                title_mode_style.Pattern = Excel.BackgroundType.Solid;
                title_mode_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_mode_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_mode_font.IsBold = true;
                sheet.Cells["M1"].SetStyle(title_mode_style);


                //Interval格式調整
                Excel.Style title_interval_style = sheet.Cells["N1"].GetStyle();
                Excel.Font title_interval_font = title_interval_style.Font;
                title_interval_style.ForegroundColor = Color.LightGray;
                title_interval_style.Pattern = Excel.BackgroundType.Solid;
                title_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_interval_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_interval_font.IsBold = true;
                sheet.Cells["N1"].SetStyle(title_interval_style);

                //Interval_judge格式調整
                Excel.Style title_interval_judge_style = sheet.Cells["P1"].GetStyle();
                Excel.Font title_interval_judge_font = title_interval_judge_style.Font;
                title_interval_judge_style.ForegroundColor = Color.LightGray;
                title_interval_judge_style.Pattern = Excel.BackgroundType.Solid;
                title_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_interval_judge_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                sheet.Cells.SetColumnWidth(15, 15);
                if (s0_interval_judge_flag == 1)
                {
                    title_interval_judge.PutValue("誤差值判定:False");
                    title_interval_judge_style.Font.Color = Color.Red;
                    s0_interval_judge_flag = 0;
                }
                else if (s0_interval_judge_flag == 0)
                {
                    title_interval_judge.PutValue("誤差值判定:OK");
                    title_interval_judge_style.Font.Color = Color.Green;
                }
                title_interval_judge_font.IsBold = true;
                sheet.Cells["P1"].SetStyle(title_interval_judge_style);

                //Cycle格式調整
                Excel.Style title_cycle_style = sheet.Cells["Q1"].GetStyle();
                Excel.Font title_cycle_font = title_cycle_style.Font;
                title_cycle_style.ForegroundColor = Color.LightGray;
                title_cycle_style.Pattern = Excel.BackgroundType.Solid;
                title_cycle_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_cycle_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                sheet.Cells.SetColumnWidth(16, 10);
                title_cycle_font.IsBold = true;
                sheet.Cells["Q1"].SetStyle(title_cycle_style);

                //Cycle Free run 格式調整
                for (int free_run_border = 1; free_run_border <= s0_free_run_time; free_run_border++)
                {
                    Excel.Style title_cycle_free_run_style = sheet.Cells[free_run_border, 16].GetStyle();
                    Excel.Font title_cycle_free_run_font = title_cycle_free_run_style.Font;
                    title_cycle_free_run_style.ForegroundColor = Color.LightGray;
                    title_cycle_free_run_style.Pattern = Excel.BackgroundType.Solid;
                    title_cycle_free_run_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    title_cycle_free_run_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                    title_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    sheet.Cells.SetColumnWidth(16, 10);
                    title_cycle_free_run_font.IsBold = true;
                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_free_run_style);
                }


                /**
                 * GNSS、MDA、Setting sheet
                 */
                int index = wb.Worksheets.Add();    //新增一個GNSS sheet
                Excel.Worksheet sheet_mda = wb.Worksheets[index];

                sheet_mda.Name = "GNSS";
                s0_gnss_cell_flag = 0;
                s0_gnss_item = 0;
                s0_gps_prn_count = 1;
                s0_gps_snr_count = 2;
                s0_glo_prn_count = 3;
                s0_glo_snr_count = 4;
                s0_gal_prn_count = 5;
                s0_gal_snr_count = 6;
                s0_bei_prn_count = 7;
                s0_bei_snr_count = 8;
                s0_qzs_prn_count = 9;
                s0_qzs_snr_count = 10;
                for (int GNSS_item_count = 1; GNSS_item_count <= convert_count0; GNSS_item_count++)
                {
                    if (s0_gnss_cell_flag == 0)
                    {
                        Excel.Cell excel_gnss_item = sheet_mda.Cells[s0_gnss_item, 0];
                        Excel.Cell excel_gps_prn = sheet_mda.Cells[s0_gps_prn_count, 0];
                        Excel.Cell excel_gps_snr = sheet_mda.Cells[s0_gps_snr_count, 0];
                        Excel.Cell excel_glo_prn = sheet_mda.Cells[s0_glo_prn_count, 0];
                        Excel.Cell excel_glo_snr = sheet_mda.Cells[s0_glo_snr_count, 0];
                        Excel.Cell excel_gal_prn = sheet_mda.Cells[s0_gal_prn_count, 0];
                        Excel.Cell excel_gal_snr = sheet_mda.Cells[s0_gal_snr_count, 0];
                        Excel.Cell excel_bei_prn = sheet_mda.Cells[s0_bei_prn_count, 0];
                        Excel.Cell excel_bei_snr = sheet_mda.Cells[s0_bei_snr_count, 0];
                        Excel.Cell excel_qzs_prn = sheet_mda.Cells[s0_qzs_prn_count, 0];
                        Excel.Cell excel_qzs_snr = sheet_mda.Cells[s0_qzs_snr_count, 0];

                        excel_gnss_item.PutValue(S0_ITEM[GNSS_item_count]);
                        excel_gps_prn.PutValue(S0_GPS_PRN[GNSS_item_count]);
                        excel_gps_snr.PutValue(S0_GPS_SNR[GNSS_item_count]);
                        excel_glo_prn.PutValue(S0_GLO_PRN[GNSS_item_count]);
                        excel_glo_snr.PutValue(S0_GLO_SNR[GNSS_item_count]);
                        excel_gal_prn.PutValue(S0_GAL_PRN[GNSS_item_count]);
                        excel_gal_snr.PutValue(S0_GAL_SNR[GNSS_item_count]);
                        excel_bei_prn.PutValue(S0_BEI_PRN[GNSS_item_count]);
                        excel_bei_snr.PutValue(S0_BEI_SNR[GNSS_item_count]);
                        excel_qzs_prn.PutValue(S0_QZS_PRN[GNSS_item_count]);
                        excel_qzs_snr.PutValue(S0_QZS_SNR[GNSS_item_count]);

                        Excel.Style excel_gnss_item_STYLE = sheet_mda.Cells[s0_gnss_item, 0].GetStyle();
                        Excel.Font excel_gnss_item_FONT = excel_gnss_item_STYLE.Font;
                        excel_gnss_item_FONT.IsBold = true;
                        sheet_mda.Cells[s0_gnss_item, 0].SetStyle(excel_gnss_item_STYLE);

                        s0_gnss_cell_flag++;
                    }
                    else if (s0_gnss_cell_flag > 0)
                    {
                        s0_gnss_item = s0_gnss_item + 11;
                        s0_gps_prn_count = s0_gps_prn_count + 11;
                        s0_gps_snr_count = s0_gps_snr_count + 11;
                        s0_glo_prn_count = s0_glo_prn_count + 11;
                        s0_glo_snr_count = s0_glo_snr_count + 11;
                        s0_gal_prn_count = s0_gal_prn_count + 11;
                        s0_gal_snr_count = s0_gal_snr_count + 11;
                        s0_bei_prn_count = s0_bei_prn_count + 11;
                        s0_bei_snr_count = s0_bei_snr_count + 11;
                        s0_qzs_prn_count = s0_qzs_prn_count + 11;
                        s0_qzs_snr_count = s0_qzs_snr_count + 11;

                        Excel.Cell excel_gnss_item = sheet_mda.Cells[s0_gnss_item, 0];
                        Excel.Cell excel_gps_prn = sheet_mda.Cells[s0_gps_prn_count, 0];
                        Excel.Cell excel_gps_snr = sheet_mda.Cells[s0_gps_snr_count, 0];
                        Excel.Cell excel_glo_prn = sheet_mda.Cells[s0_glo_prn_count, 0];
                        Excel.Cell excel_glo_snr = sheet_mda.Cells[s0_glo_snr_count, 0];
                        Excel.Cell excel_gal_prn = sheet_mda.Cells[s0_gal_prn_count, 0];
                        Excel.Cell excel_gal_snr = sheet_mda.Cells[s0_gal_snr_count, 0];
                        Excel.Cell excel_bei_prn = sheet_mda.Cells[s0_bei_prn_count, 0];
                        Excel.Cell excel_bei_snr = sheet_mda.Cells[s0_bei_snr_count, 0];
                        Excel.Cell excel_qzs_prn = sheet_mda.Cells[s0_qzs_prn_count, 0];
                        Excel.Cell excel_qzs_snr = sheet_mda.Cells[s0_qzs_snr_count, 0];

                        excel_gnss_item.PutValue(S0_ITEM[GNSS_item_count]);
                        excel_gps_prn.PutValue(S0_GPS_PRN[GNSS_item_count]);
                        excel_gps_snr.PutValue(S0_GPS_SNR[GNSS_item_count]);
                        excel_glo_prn.PutValue(S0_GLO_PRN[GNSS_item_count]);
                        excel_glo_snr.PutValue(S0_GLO_SNR[GNSS_item_count]);
                        excel_gal_prn.PutValue(S0_GAL_PRN[GNSS_item_count]);
                        excel_gal_snr.PutValue(S0_GAL_SNR[GNSS_item_count]);
                        excel_bei_prn.PutValue(S0_BEI_PRN[GNSS_item_count]);
                        excel_bei_snr.PutValue(S0_BEI_SNR[GNSS_item_count]);
                        excel_qzs_prn.PutValue(S0_QZS_PRN[GNSS_item_count]);
                        excel_qzs_snr.PutValue(S0_QZS_SNR[GNSS_item_count]);

                        Excel.Style excel_gnss_item_STYLE = sheet_mda.Cells[s0_gnss_item, 0].GetStyle();
                        Excel.Font excel_gnss_item_FONT = excel_gnss_item_STYLE.Font;
                        excel_gnss_item_FONT.IsBold = true;
                        sheet_mda.Cells[s0_gnss_item, 0].SetStyle(excel_gnss_item_STYLE);

                        s0_gnss_cell_flag++;
                    }

                }

                Excel.Cell gps_epo_enable = sheet_mda.Cells["F1"];
                Excel.Cell glo_epo_enable = sheet_mda.Cells["F2"];
                Excel.Cell gal_epo_enable = sheet_mda.Cells["F3"];
                Excel.Cell bei_epo_enable = sheet_mda.Cells["F4"];

                Excel.Cell TTFF_item = sheet_mda.Cells["F6"];
                Excel.Cell TTFF_USAGE_TIME = sheet_mda.Cells["F7"];
                Excel.Cell Analyze_UTC_ITEM = sheet_mda.Cells["F8"];
                Excel.Cell Analyze_UTC_TIME = sheet_mda.Cells["F9"];

                //[AVG:FIRST - PREVIOUS FIX]
                Excel.Cell AVG_FIRST_PREVIOUS_FIX = sheet_mda.Cells["F11"];
                Excel.Cell A2_Start_Stop_Total_item = sheet_mda.Cells["F23"];
                Excel.Cell A2_gps_sat_avg = sheet_mda.Cells["F24"];
                Excel.Cell A2_gps_snr_avg = sheet_mda.Cells["F25"];
                Excel.Cell A2_glo_sat_avg = sheet_mda.Cells["F26"];
                Excel.Cell A2_glo_snr_avg = sheet_mda.Cells["F27"];
                Excel.Cell A2_gal_sat_avg = sheet_mda.Cells["F28"];
                Excel.Cell A2_gal_snr_avg = sheet_mda.Cells["F29"];
                Excel.Cell A2_bei_sat_avg = sheet_mda.Cells["F30"];
                Excel.Cell A2_bei_snr_avg = sheet_mda.Cells["F31"];

                //[AVG:FIRST - FIX]
                Excel.Cell AVG_FIRST_FIX = sheet_mda.Cells["F22"];
                Excel.Cell A1_Start_Stop_Total_item = sheet_mda.Cells["F12"];
                Excel.Cell A1_gps_sat_avg = sheet_mda.Cells["F13"];
                Excel.Cell A1_gps_snr_avg = sheet_mda.Cells["F14"];
                Excel.Cell A1_glo_sat_avg = sheet_mda.Cells["F15"];
                Excel.Cell A1_glo_snr_avg = sheet_mda.Cells["F16"];
                Excel.Cell A1_gal_sat_avg = sheet_mda.Cells["F17"];
                Excel.Cell A1_gal_snr_avg = sheet_mda.Cells["F18"];
                Excel.Cell A1_bei_sat_avg = sheet_mda.Cells["F19"];
                Excel.Cell A1_bei_snr_avg = sheet_mda.Cells["F20"];

                //[AVG:FIX - LAST]
                Excel.Cell AVG_FIX_LAST = sheet_mda.Cells["F33"];
                Excel.Cell A3_Start_Stop_Total_item = sheet_mda.Cells["F34"];
                Excel.Cell A3_gps_sat_avg = sheet_mda.Cells["F35"];
                Excel.Cell A3_gps_snr_avg = sheet_mda.Cells["F36"];
                Excel.Cell A3_glo_sat_avg = sheet_mda.Cells["F37"];
                Excel.Cell A3_glo_snr_avg = sheet_mda.Cells["F38"];
                Excel.Cell A3_gal_sat_avg = sheet_mda.Cells["F39"];
                Excel.Cell A3_gal_snr_avg = sheet_mda.Cells["F40"];
                Excel.Cell A3_bei_sat_avg = sheet_mda.Cells["F41"];
                Excel.Cell A3_bei_snr_avg = sheet_mda.Cells["F42"];

                //[AVG:FIRST - LAST]
                Excel.Cell AVG_FIRST_LAST = sheet_mda.Cells["F44"];
                Excel.Cell A4_Start_Stop_Total_item = sheet_mda.Cells["F45"];
                Excel.Cell A4_gps_sat_avg = sheet_mda.Cells["F46"];
                Excel.Cell A4_gps_snr_avg = sheet_mda.Cells["F47"];
                Excel.Cell A4_glo_sat_avg = sheet_mda.Cells["F48"];
                Excel.Cell A4_glo_snr_avg = sheet_mda.Cells["F49"];
                Excel.Cell A4_gal_sat_avg = sheet_mda.Cells["F50"];
                Excel.Cell A4_gal_snr_avg = sheet_mda.Cells["F51"];
                Excel.Cell A4_bei_sat_avg = sheet_mda.Cells["F52"];
                Excel.Cell A4_bei_snr_avg = sheet_mda.Cells["F53"];

                gps_epo_enable.PutValue(S0_GNSS_EPO[0]);
                glo_epo_enable.PutValue(S0_GNSS_EPO[1]);
                gal_epo_enable.PutValue(S0_GNSS_EPO[2]);
                bei_epo_enable.PutValue(S0_GNSS_EPO[3]);

                TTFF_item.PutValue(s0_TTFF_item);
                TTFF_USAGE_TIME.PutValue(s0_TTFF_time);
                Analyze_UTC_ITEM.PutValue(s0_Analyze_UTC_item);
                Analyze_UTC_TIME.PutValue(s0_Analyze_UTC_time);

                AVG_FIRST_FIX.PutValue("[AVG:FIRST - FIX]");
                A2_Start_Stop_Total_item.PutValue(S0_Area1_2_4_startitem + ", " + S0_Area2_stopitem + ", " + S0_Area2_totalitem);
                A2_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S0_A2_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S0_A2_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S0_A2_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S0_A2_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S0_A2_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S0_A2_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S0_A2_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S0_A2_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIRST_PREVIOUS_FIX.PutValue("[AVG:FIRST - PREVIOUS FIX]");
                A1_Start_Stop_Total_item.PutValue(S0_Area1_2_4_startitem + ", " + S0_Area1_stopitem + ", " + S0_Area1_totalitem);
                A1_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S0_A1_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S0_A1_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S0_A1_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S0_A1_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S0_A1_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S0_A1_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S0_A1_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S0_A1_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));


                AVG_FIX_LAST.PutValue("[AVG:FIX - LAST]");
                A3_Start_Stop_Total_item.PutValue(S0_Area3_startitem + ", " + S0_Area3_stopitem + ", " + S0_Area3_totalitem);
                A3_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S0_A3_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S0_A3_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S0_A3_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S0_A3_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S0_A3_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S0_A3_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S0_A3_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S0_A3_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIRST_LAST.PutValue("[AVG:FIRST - LAST]");
                A4_Start_Stop_Total_item.PutValue(S0_Area1_2_4_startitem + ", " + S0_Area4_stopitem + ", " + S0_Area4_totalitem);
                A4_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S0_A4_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S0_A4_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S0_A4_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S0_A4_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S0_A4_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S0_A4_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S0_A4_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S0_A4_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                //MDA 格式調整
                sheet_mda.Cells.SetColumnWidth(0, 62);  //GNSS欄位寬度
                sheet_mda.Cells.SetColumnWidth(5, 50);  //MDA欄位寬度

                Excel.Style gps_epo_enable_STYLE = sheet_mda.Cells["F1"].GetStyle();
                Excel.Font gps_epo_enable_FONT = gps_epo_enable_STYLE.Font;
                gps_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F1"].SetStyle(gps_epo_enable_STYLE);

                Excel.Style glo_epo_enable_STYLE = sheet_mda.Cells["F2"].GetStyle();
                Excel.Font glo_epo_enable_FONT = glo_epo_enable_STYLE.Font;
                glo_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F2"].SetStyle(glo_epo_enable_STYLE);

                Excel.Style gal_epo_enable_STYLE = sheet_mda.Cells["F3"].GetStyle();
                Excel.Font gal_epo_enable_FONT = gal_epo_enable_STYLE.Font;
                gal_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F3"].SetStyle(gal_epo_enable_STYLE);

                Excel.Style bei_epo_enable_STYLE = sheet_mda.Cells["F4"].GetStyle();
                Excel.Font bei_epo_enable_FONT = bei_epo_enable_STYLE.Font;
                bei_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F4"].SetStyle(bei_epo_enable_STYLE);

                Excel.Style TTFF_item_STYLE = sheet_mda.Cells["F6"].GetStyle();
                Excel.Font TTFF_item_FONT = TTFF_item_STYLE.Font;
                TTFF_item_FONT.IsBold = true;
                sheet_mda.Cells["F6"].SetStyle(TTFF_item_STYLE);

                Excel.Style TTFF_USAGE_TIME_STYLE = sheet_mda.Cells["F7"].GetStyle();
                Excel.Font TTFF_USAGE_TIME_FONT = TTFF_USAGE_TIME_STYLE.Font;
                TTFF_USAGE_TIME_FONT.IsBold = true;
                sheet_mda.Cells["F7"].SetStyle(TTFF_USAGE_TIME_STYLE);

                Excel.Style Analyze_UTC_ITEM_STYLE = sheet_mda.Cells["F8"].GetStyle();
                Excel.Font Analyze_UTC_ITEM_FONT = Analyze_UTC_ITEM_STYLE.Font;
                Analyze_UTC_ITEM_FONT.IsBold = true;
                sheet_mda.Cells["F8"].SetStyle(Analyze_UTC_ITEM_STYLE);

                Excel.Style Analyze_UTC_TIME_STYLE = sheet_mda.Cells["F9"].GetStyle();
                Excel.Font Analyze_UTC_TIME_FONT = Analyze_UTC_TIME_STYLE.Font;
                Analyze_UTC_TIME_FONT.IsBold = true;
                sheet_mda.Cells["F9"].SetStyle(Analyze_UTC_TIME_STYLE);

                Excel.Style AVG_FIRST_FIX_STYLE = sheet_mda.Cells["F11"].GetStyle();
                Excel.Font AVG_FIRST_FIX_FONT = AVG_FIRST_FIX_STYLE.Font;
                AVG_FIRST_FIX_FONT.IsBold = true;
                sheet_mda.Cells["F11"].SetStyle(AVG_FIRST_FIX_STYLE);

                Excel.Style AVG_FIRST_PREVIOUS_FIX_STYLE = sheet_mda.Cells["F22"].GetStyle();
                Excel.Font AVG_FIRST_PREVIOUS_FIX_FONT = AVG_FIRST_PREVIOUS_FIX_STYLE.Font;
                AVG_FIRST_PREVIOUS_FIX_FONT.IsBold = true;
                sheet_mda.Cells["F22"].SetStyle(AVG_FIRST_PREVIOUS_FIX_STYLE);

                Excel.Style AVG_FIX_LAST_STYLE = sheet_mda.Cells["F33"].GetStyle();
                Excel.Font AVG_FIX_LAST_FONT = AVG_FIX_LAST_STYLE.Font;
                AVG_FIX_LAST_FONT.IsBold = true;
                sheet_mda.Cells["F33"].SetStyle(AVG_FIX_LAST_STYLE);

                Excel.Style AVG_FIRST_LAST_STYLE = sheet_mda.Cells["F44"].GetStyle();
                Excel.Font AVG_FIRST_LAST_FONT = AVG_FIRST_LAST_STYLE.Font;
                AVG_FIRST_LAST_FONT.IsBold = true;
                sheet_mda.Cells["F44"].SetStyle(AVG_FIRST_LAST_STYLE);

                //Setting
                string[] setting_Array = richTextBox7.Lines;
                for (int counter = 0; counter < setting_Array.Length; counter++)
                {
                    s0_excel_setting[counter] = setting_Array[counter];
                    if (counter == 0)                                                                   //Periodic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Blue;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 0 && counter < 12)                                               //Periodic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Blue;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 12)                                                             //Dynamic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Orange;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 12 && counter < 17)                                             //Dynamic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Orange;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 17)                                                             //Geofencing
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(32, 178, 170);
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 17 && counter < 25)                                              //Geofencing
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(32, 178, 170);
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 25)                                                             //MotionDetection
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(165, 42, 42);
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 25 && counter < 30)                                              //MotionDetection
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(165, 42, 42);
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 30)                                                             //GPS_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 30 && counter < 36)                                              //GPS_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                    }
                    else if (counter == 36)                                                             //GLO_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 36 && counter < 42)                                              //GLO_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                    }
                    else if (counter == 42)                                                             //GAL_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 42 && counter < 48)                                              //GAL_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                    }
                    else if (counter == 48)                                                             //BEI_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 48 && counter < 54)                                              //BEI_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s0_excel_setting[counter]);
                    }

                }
                sheet_mda.Cells.SetColumnWidth(3, 30);
                //Setting

                /*
                 * Merge Excel
                 */
                Excel.Cell merge_title_Item = merge_ws.Cells[9, 0];
                Excel.Cell merge_title_fix_yyyy_mm_dd = merge_ws.Cells[9, 1];
                Excel.Cell merge_title_fix_hh_mm_ss = merge_ws.Cells[9, 2];
                Excel.Cell merge_title_Interval = merge_ws.Cells[9, 3];
                Excel.Cell merge_title_dot_message = merge_ws.Cells[9, 4];

                merge_title_Item.PutValue("Item");
                merge_title_fix_yyyy_mm_dd.PutValue("定位日期(年_月_日)");
                merge_title_fix_hh_mm_ss.PutValue("定位日期(時_分_秒)");
                merge_title_Interval.PutValue("Interval");
                merge_title_dot_message.PutValue("打點資訊");

                Excel.Cell merge_antenna = merge_ws.Cells["A8"];
                Excel.Cell merge_anklet = merge_ws.Cells["A9"];
                Excel.Cell merge_antenna_name = merge_ws.Cells["B8"];
                Excel.Cell merge_id_name = merge_ws.Cells["B9"];

                merge_antenna.PutValue("天線");
                merge_antenna_name.PutValue(" : ");
                merge_anklet.PutValue("腳環ID");
                merge_id_name.PutValue(" : " + s0_opfilename);

                if (chkfile == 1)
                {
                    String GNSS_Profile, EPOcheck;
                    DateTime Wakeup_time = WakeupTime.Value;
                    GNSS_Profile = SatCom.Text;
                    EPOcheck = EPOCom.Text;
                    String str_wakeuptime = Wakeup_time.ToString("yyyy/MM/dd HH:mm:ss");

                    Excel.Cell merge_sat = merge_ws.Cells["A1"];
                    Excel.Cell merge_test_time = merge_ws.Cells["A2"];
                    Excel.Cell merge_firmware_version = merge_ws.Cells["A3"];
                    Excel.Cell merge_parameter = merge_ws.Cells["A4"];
                    Excel.Cell merge_standard = merge_ws.Cells["A5"];
                    Excel.Cell merge_gnss_profile = merge_ws.Cells["B1"];
                    Excel.Cell merge_test_wakeuptime_value = merge_ws.Cells["B2"];
                    Excel.Cell merge_firmware_version_value = merge_ws.Cells["B3"];
                    Excel.Cell merge_parameter_value = merge_ws.Cells["B4"];
                    Excel.Cell merge_standard_value1 = merge_ws.Cells["B5"];
                    Excel.Cell merge_standard_value2 = merge_ws.Cells["C5"];

                    merge_sat.PutValue("衛星:");
                    merge_test_time.PutValue("測試時間:");
                    merge_firmware_version.PutValue("分位:");
                    merge_parameter.PutValue("參數:");
                    merge_standard.PutValue("標準:");

                    if (GNSS_Profile.Equals("G") == true)                           //GPS Only
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+EPO+(QZSS)");
                                merge_gnss_profile.Characters(8, 6).Font.Color = Color.Red;

                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+(QZSS)");
                                merge_gnss_profile.Characters(4, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GR") == true)                 //G + GR
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+EPO+(QZSS)");
                                merge_gnss_profile.Characters(16, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+(QZSS)");
                                merge_gnss_profile.Characters(12, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GE") == true)                 //G + GE
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+EPO+(QZSS)");
                                merge_gnss_profile.Characters(16, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+(QZSS)");
                                merge_gnss_profile.Characters(12, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GB") == true)                 //G + GB
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+EPO+(QZSS)");
                                merge_gnss_profile.Characters(15, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+(QZSS)");
                                merge_gnss_profile.Characters(11, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GR+GE+GB") == true)       //G + GR + GE + GB
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+EPO+(QZSS)");
                                merge_gnss_profile.Characters(31, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+(QZSS)");
                                merge_gnss_profile.Characters(27, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU");
                            }
                        }
                    }
                    merge_test_wakeuptime_value.PutValue(str_wakeuptime);
                    merge_firmware_version_value.PutValue(label28.Text);
                    merge_parameter_value.PutValue(s0_t0.ToString() + "、" + s0_t1.ToString() + "、" + s0_t2.ToString() + "、" + s0_t3.ToString() + "、" + s0_t4.ToString());
                    merge_standard_value1.PutValue("free run(" + s0_t1.ToString() + "s/" + s0_t0.ToString() + "s=" + s0_free_run_time.ToString() + "組)");
                    merge_standard_value2.PutValue("小循環(一組" + (s0_t3 + s0_t4).ToString() + "s，共" + (s0_t3 / s0_t0).ToString() + "個點)");

                    Excel.Style merge_standard_value1_style = merge_ws.Cells["B5"].GetStyle();
                    Excel.Font merge_standard_value1_font = merge_standard_value1_style.Font;
                    merge_standard_value1_style.ForegroundColor = Color.FromArgb(191, 191, 191);
                    merge_standard_value1_style.Pattern = Excel.BackgroundType.Solid;
                    merge_standard_value1_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    merge_standard_value1_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    merge_standard_value1_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_ws.Cells["B5"].SetStyle(merge_standard_value1_style);

                    Excel.Style merge_standard_value2_style = merge_ws.Cells["C5"].GetStyle();
                    Excel.Font merge_standard_value2_font = merge_standard_value2_style.Font;
                    merge_standard_value2_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                    merge_standard_value2_style.Pattern = Excel.BackgroundType.Solid;
                    merge_standard_value2_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    merge_ws.Cells["C5"].SetStyle(merge_standard_value2_style);

                    Excel.Cell merge_title_t0 = merge_ws.Cells["G1"];
                    Excel.Cell merge_title_t1 = merge_ws.Cells["G2"];
                    Excel.Cell merge_title_t2 = merge_ws.Cells["G3"];
                    Excel.Cell merge_title_t3 = merge_ws.Cells["G4"];
                    Excel.Cell merge_title_t4 = merge_ws.Cells["G5"];
                    Excel.Cell merge_t0 = merge_ws.Cells["H1"];
                    Excel.Cell merge_t1 = merge_ws.Cells["H2"];
                    Excel.Cell merge_t2 = merge_ws.Cells["H3"];
                    Excel.Cell merge_t3 = merge_ws.Cells["H4"];
                    Excel.Cell merge_t4 = merge_ws.Cells["H5"];

                    merge_title_t0.PutValue("T0");
                    merge_title_t1.PutValue("T1");
                    merge_title_t2.PutValue("T2");
                    merge_title_t3.PutValue("T3");
                    merge_title_t4.PutValue("T4");
                    merge_t0.PutValue(s0_t0.ToString());
                    merge_t1.PutValue(s0_t1.ToString());
                    merge_t2.PutValue(s0_t2.ToString());
                    merge_t3.PutValue(s0_t3.ToString());
                    merge_t4.PutValue(s0_t4.ToString());

                    Excel.Cell merge_title_input_val = merge_ws.Cells["J1"];
                    Excel.Cell merge_title_time_cal = merge_ws.Cells["J2"];
                    Excel.Cell merge_title_cycle_cal = merge_ws.Cells["J3"];
                    Excel.Cell merge_time_cal = merge_ws.Cells["K2"];
                    Excel.Cell merge_cycle_cal = merge_ws.Cells["K3"];

                    merge_title_input_val.PutValue("請輸入換算數字 = >");
                    merge_title_time_cal.PutValue("時間換算");
                    merge_title_cycle_cal.PutValue("組數換算");
                    merge_time_cal.Formula = "=(K1*3600)/" + s0_t1.ToString();
                    merge_cycle_cal.Formula = "K2/(" + s0_t2.ToString() + "+" + s0_t3.ToString() + ")";

                    chkfile = 0;
                }

                //Item 格式調整
                Excel.Style merge_title_Item_style = merge_ws.Cells[9, 0].GetStyle();
                Excel.Font merge_title_Item_font = merge_title_Item_style.Font;
                merge_title_Item_style.ForegroundColor = Color.LightGray;
                merge_title_Item_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_Item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_Item_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_Item_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_Item_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_Item_font.IsBold = true;
                merge_ws.Cells[9, 0].SetStyle(merge_title_Item_style);

                //定位日期(年_月_日) 格式調整
                Excel.Style merge_title_fix_yyyy_mm_dd_style = merge_ws.Cells[9, 1].GetStyle();
                Excel.Font merge_title_fix_yyyy_mm_dd_font = merge_title_fix_yyyy_mm_dd_style.Font;
                merge_title_fix_yyyy_mm_dd_style.ForegroundColor = Color.LightGray;
                merge_title_fix_yyyy_mm_dd_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_fix_yyyy_mm_dd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_font.IsBold = true;
                merge_ws.Cells[9, 1].SetStyle(merge_title_fix_yyyy_mm_dd_style);

                //定位日期(時_分_秒) 格式調整
                Excel.Style merge_title_fix_hh_mm_ss_style = merge_ws.Cells[9, 2].GetStyle();
                Excel.Font merge_title_fix_hh_mm_ss_font = merge_title_fix_hh_mm_ss_style.Font;
                merge_title_fix_hh_mm_ss_style.ForegroundColor = Color.LightGray;
                merge_title_fix_hh_mm_ss_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_fix_hh_mm_ss_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_font.IsBold = true;
                merge_ws.Cells[9, 2].SetStyle(merge_title_fix_hh_mm_ss_style);

                //Interval 格式調整
                Excel.Style merge_title_Interval_style = merge_ws.Cells[9, 3].GetStyle();
                Excel.Font merge_title_Interval_font = merge_title_Interval_style.Font;
                merge_title_Interval_style.ForegroundColor = Color.LightGray;
                merge_title_Interval_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_Interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_Interval_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_Interval_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_Interval_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_Interval_font.IsBold = true;
                merge_ws.Cells[9, 3].SetStyle(merge_title_Interval_style);

                //打點資訊 格式調整
                Excel.Style merge_title_dot_message_style = merge_ws.Cells[9, 4].GetStyle();
                Excel.Font merge_title_dot_message_font = merge_title_dot_message_style.Font;
                merge_title_dot_message_style.ForegroundColor = Color.LightGray;
                merge_title_dot_message_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_dot_message_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_dot_message_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                merge_title_dot_message_font.IsBold = true;
                merge_ws.Cells[9, 4].SetStyle(merge_title_dot_message_style);

                merge_ws.Cells.SetColumnWidth(0, 10);
                merge_ws.Cells.SetColumnWidth(1, 40);
                merge_ws.Cells.SetColumnWidth(2, 40);
                merge_ws.Cells.SetColumnWidth(3, 17);
                merge_ws.Cells.SetColumnWidth(4, 10);
                merge_ws.Cells.SetColumnWidth(5, 1);

                s0_merge_count = 9;
                //Save S0 Item、定位日期(年_月_日)、定位日期(時_分_秒)、Interval Data
                for (cmd_count = 1; cmd_count < convert_count0; cmd_count++)
                {
                    s0_merge_count += 1;
                    //宣告欄位
                    Excel.Cell Merge0_item = merge_ws.Cells[s0_merge_count, 0];
                    Excel.Cell Merge0_ymd = merge_ws.Cells[s0_merge_count, 1];
                    Excel.Cell Merge0_hms = merge_ws.Cells[s0_merge_count, 2];

                    //存放欄位
                    Merge0_item.PutValue(Int32.Parse(s0_Item[cmd_count]));
                    Merge0_ymd.PutValue(s0_ymd[cmd_count]);
                    Merge0_hms.PutValue(s0_hms[cmd_count]);
                    //宣告style調整格式
                    Excel.Style Merge0_item_style = merge_ws.Cells[s0_merge_count, 0].GetStyle();
                    Excel.Style Merge0_ymd_style = merge_ws.Cells[s0_merge_count, 1].GetStyle();
                    Excel.Style Merge0_hms_style = merge_ws.Cells[s0_merge_count, 2].GetStyle();

                    //Set color
                    //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4
                    switch (s0_mode_font_color[cmd_count])
                    {
                        case 0:
                            break;
                        case 1:
                            Merge0_item_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Merge0_ymd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Merge0_hms_style.Font.Color = Color.FromArgb(0, 191, 255);
                            break;
                        case 2:
                            Merge0_item_style.Font.Color = Color.Blue;
                            Merge0_ymd_style.Font.Color = Color.Blue;
                            Merge0_hms_style.Font.Color = Color.Blue;
                            break;
                        case 3:
                            Merge0_item_style.Font.Color = Color.Orange;
                            Merge0_ymd_style.Font.Color = Color.Orange;
                            Merge0_hms_style.Font.Color = Color.Orange;
                            break;
                        case 4:
                            Merge0_item_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Merge0_ymd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Merge0_hms_style.Font.Color = Color.FromArgb(32, 178, 170);
                            break;
                    }


                    //字體置中
                    Merge0_item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Merge0_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Merge0_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    //style set
                    merge_ws.Cells[s0_merge_count, 0].SetStyle(Merge0_item_style);
                    merge_ws.Cells[s0_merge_count, 1].SetStyle(Merge0_ymd_style);
                    merge_ws.Cells[s0_merge_count, 2].SetStyle(Merge0_hms_style);


                    if (cmd_count > 1)
                    {
                        Excel.Cell Merge0_interval = merge_ws.Cells[s0_merge_count, 3];
                        //Excel.Cell Merge0_interval_judge = merge_ws.Cells[s0_merge_count, 4];
                        Merge0_interval.PutValue(s0_interval[cmd_count]);
                        //Merge0_interval_judge.PutValue(s0_interval_judge[cmd_count]);
                        Excel.Style Merge0_interval_style = merge_ws.Cells[s0_merge_count, 3].GetStyle();
                        //Excel.Style Merge0_interval_judge_style = merge_ws.Cells[s0_merge_count, 4].GetStyle();
                        //Set Interval Font color
                        //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4, Red : 5
                        switch (s0_interval_font_color[cmd_count])
                        {
                            case 0:
                                break;
                            case 1:
                                Merge0_interval_style.Font.Color = Color.FromArgb(0, 191, 255);
                                break;
                            case 2:
                                Merge0_interval_style.Font.Color = Color.Blue;
                                break;
                            case 3:
                                Merge0_interval_style.Font.Color = Color.Orange;
                                break;
                            case 4:
                                Merge0_interval_style.Font.Color = Color.FromArgb(32, 178, 170);
                                break;
                            case 5:
                                Merge0_interval_style.Font.Color = Color.Red;
                                //s0_interval_judge_flag = 1;
                                break;

                        }
                        Merge0_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        //Merge0_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        merge_ws.Cells[s0_merge_count, 3].SetStyle(Merge0_interval_style);
                        //merge_ws.Cells[s0_merge_count, 4].SetStyle(Merge0_interval_judge_style);
                    }

                }

                /*
                 * s0 free run cycle
                 */
                Excel.Cells merge_free_run_time = merge_ws.Cells;
                merge_free_run_time.Merge(10, 4, s0_free_run_time, 1);
                Excel.Cell merge_cycle_free_run = merge_ws.Cells["E11"];
                merge_cycle_free_run.PutValue(s0_free_run_time.ToString() + "組");
                //Cycle Free run 格式調整
                for (int free_run_border = 10; free_run_border <= (s0_free_run_time + 9); free_run_border++)
                {
                    Excel.Style title_merge_cycle_free_run_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                    Excel.Font title_merge_cycle_free_run_font = title_merge_cycle_free_run_style.Font;
                    title_merge_cycle_free_run_style.ForegroundColor = Color.LightGray;
                    title_merge_cycle_free_run_style.Pattern = Excel.BackgroundType.Solid;
                    title_merge_cycle_free_run_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    title_merge_cycle_free_run_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_ws.Cells.SetColumnWidth(4, 10);
                    title_merge_cycle_free_run_font.IsBold = true;
                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_free_run_style);
                }
                /*
                 * s0 free run cycle
                 */
                /*
                 * s0 merge cycle sheet
                 */
                excel_mode_flag = 0;
                merge_excel_mode_frame = 9;
                for (int merge_excel_cycle_count = 0; merge_excel_cycle_count <= s0_cycle; merge_excel_cycle_count++)
                {
                    Excel.Cells merge_cycle_time_frame = merge_ws.Cells;
                    Excel.Cell merge_cycle_time;
                    switch (s0_cycle_mode_judge[merge_excel_cycle_count])
                    {
                        //T3~T4
                        case 2:
                            if (excel_mode_flag != 3 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)               //t3_t4的first cycle time
                                {
                                    merge_excel_mode_frame += s0_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_t3_t4_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                    merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(4, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 2;
                                }
                                else if (excel_mode_flag == 2 && s0_cycle_add[merge_excel_cycle_count] != 0)               //如果t3_t4的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s0_t3_t4_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_t3_t4_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                    merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(4, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                    }
                                }

                            }
                            else if (excel_mode_flag == 3 && s0_cycle_add[merge_excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                merge_excel_mode_frame += s0_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_t3_t4_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(4, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            else if (excel_mode_flag == 4 && s0_cycle_add[merge_excel_cycle_count] != 0)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                merge_excel_mode_frame += s0_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_t3_t4_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(4, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            break;

                        //Dynamic
                        case 3:
                            if (excel_mode_flag != 2 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)            //如果Dynamic的first cycle time
                                {
                                    merge_excel_mode_frame += s0_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_dynamic_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                    merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(4, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 3;
                                }
                                else if (excel_mode_flag == 3 && s0_cycle_add[merge_excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s0_dynamic_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_dynamic_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                    merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(4, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s0_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s0_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_dynamic_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(4, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            else if (excel_mode_flag == 4 && s0_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s0_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_dynamic_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(4, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (excel_mode_flag != 2 && excel_mode_flag != 3)
                            {
                                if (excel_mode_flag == 0)            //如果Geofencing的first cycle time
                                {
                                    merge_excel_mode_frame += s0_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_geofencing_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                    merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(4, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 4;
                                }
                                else if (excel_mode_flag == 4 && s0_cycle_add[merge_excel_cycle_count] != 0)            //如果Geofencing的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s0_geofencing_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_geofencing_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                    merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(4, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s0_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s0_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_geofencing_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(4, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }
                            else if (excel_mode_flag == 3 && s0_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s0_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_geofencing_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s0_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(4, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }

                            break;
                        //餘數
                        case 5:
                            if (excel_mode_flag == 2)               //T3~T4 下的餘數
                            {
                                merge_excel_mode_frame += s0_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s0_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(4, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 3)           //Dynamic下的餘數
                            {
                                merge_excel_mode_frame += s0_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s0_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(4, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 4)          //Geofencing下的餘數
                            {

                                merge_excel_mode_frame += s0_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 4, s0_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 4];
                                merge_cycle_time.PutValue(s0_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s0_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 4].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(4, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 4].SetStyle(title_merge_cycle_time_style);
                                }

                            }
                            break;
                    }
                }
                /*
                 * s0 merge cycle sheet
                 */
                /*
                 * Merge Excel
                 */


                wb.Save(s0_directory_fileexcel, Excel.SaveFormat.Xlsx);
                /**
                 * GNSS、MDA、Setting sheet
                 */

            }

            //Save s1 excel file
            if (s1chkb.Checked == true)
            {
                int chkfile = 0;
                if (s0chkb.Checked == true && s2chkb.Checked == true && s3chkb.Checked == true)
                {
                    if (s1_t0 == s0_t0 && s1_t0 == s2_t0 && s1_t0 == s3_t0 && s1_t1 == s0_t1 && s1_t1 == s2_t1 && s1_t1 == s3_t1 && s1_t2 == s0_t2 && s1_t2 == s2_t2 && s1_t2 == s3_t2 && s1_t3 == s0_t3 && s1_t3 == s2_t3 && s1_t3 == s3_t3 && s1_t4 == s0_t4 && s1_t4 == s2_t4 && s1_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == true && s2chkb.Checked == true && s3chkb.Checked == false)
                {
                    if (s1_t0 == s0_t0 && s1_t0 == s2_t0 && s1_t1 == s0_t1 && s1_t1 == s2_t1 && s1_t2 == s0_t2 && s1_t2 == s2_t2 && s1_t3 == s0_t3 && s1_t3 == s2_t3 && s1_t4 == s0_t4 && s1_t4 == s2_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == true && s2chkb.Checked == false && s3chkb.Checked == true)
                {
                    if (s1_t0 == s0_t0 && s1_t0 == s3_t0 && s1_t1 == s0_t1 && s1_t1 == s3_t1 && s1_t2 == s0_t2 && s1_t2 == s3_t2 && s1_t3 == s0_t3 && s1_t3 == s3_t3 && s1_t4 == s0_t4 && s1_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s2chkb.Checked == true && s3chkb.Checked == true)
                {
                    if (s1_t0 == s2_t0 && s1_t0 == s3_t0 && s1_t1 == s2_t1 && s1_t1 == s3_t1 && s1_t2 == s2_t2 && s1_t2 == s3_t2 && s1_t3 == s2_t3 && s1_t3 == s3_t3 && s1_t4 == s2_t4 && s1_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == true && s2chkb.Checked == false && s3chkb.Checked == false)
                {
                    if (s1_t0 == s0_t0 && s1_t1 == s0_t1 && s1_t2 == s0_t2 && s1_t3 == s0_t3 && s1_t4 == s0_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s2chkb.Checked == true && s3chkb.Checked == false)
                {
                    if (s1_t0 == s2_t0 && s1_t1 == s2_t1 && s1_t2 == s2_t2 && s1_t3 == s2_t3 && s1_t4 == s2_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s2chkb.Checked == false && s3chkb.Checked == true)
                {
                    if (s1_t0 == s3_t0 && s1_t1 == s3_t1 && s1_t2 == s3_t2 && s1_t3 == s3_t3 && s1_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s2chkb.Checked == false && s3chkb.Checked == false)
                {
                    chkfile = 1;
                }

                if (Directory.Exists(s1_directory_file))
                {

                }
                else
                {
                    Directory.CreateDirectory(s1_directory_file);
                }

                int cmd_count;

                Excel.Workbook wb = new Excel.Workbook();
                Excel.Worksheet sheet = wb.Worksheets[0];

                sheet.Name = "Locus Row Data";
                //合併"指令代碼"、"亂數組合"的儲存格
                Excel.Cells title_Instruction_code_format = sheet.Cells;
                Excel.Cells title_Ramdom_combinations_format = sheet.Cells;
                Excel.Cells Free_run_time = sheet.Cells;
                title_Instruction_code_format.Merge(0, 0, 1, 2);
                title_Ramdom_combinations_format.Merge(0, 6, 1, 5);
                Free_run_time.Merge(1, 16, s1_free_run_time, 1);

                /*
                 * s1 cycle sheet
                 */
                excel_mode_flag = 0;
                excel_mode_frame = 0;
                for (int excel_cycle_count = 0; excel_cycle_count <= s1_cycle; excel_cycle_count++)
                {
                    Excel.Cells cycle_time_frame = sheet.Cells;
                    Excel.Cell cycle_time;
                    switch (s1_cycle_mode_judge[excel_cycle_count])
                    {
                        //T3~T4
                        case 2:
                            if (excel_mode_flag != 3 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)               //t3_t4的first cycle time
                                {
                                    excel_mode_frame = s1_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s1_t3_t4_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 2;
                                }
                                else if (excel_mode_flag == 2 && s1_cycle_add[excel_cycle_count] != 0)               //如果t3_t4的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s1_t3_t4_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s1_t3_t4_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }

                            }
                            else if (excel_mode_flag == 3 && s1_cycle_add[excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                excel_mode_frame += s1_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s1_t3_t4_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            else if (excel_mode_flag == 4 && s1_cycle_add[excel_cycle_count] != 0)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                excel_mode_frame += s1_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s1_t3_t4_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            break;

                        //Dynamic
                        case 3:
                            if (excel_mode_flag != 2 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)            //如果Dynamic的first cycle time
                                {
                                    excel_mode_frame = s1_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s1_dynamic_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 3;
                                }
                                else if (excel_mode_flag == 3 && s1_cycle_add[excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s1_dynamic_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s1_dynamic_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s1_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s1_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s1_dynamic_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            else if (excel_mode_flag == 4 && s1_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s1_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s1_dynamic_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (excel_mode_flag != 2 && excel_mode_flag != 3)
                            {
                                if (excel_mode_flag == 0)            //如果Geofencing的first cycle time
                                {
                                    excel_mode_frame = s1_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s1_geofencing_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 4;
                                }
                                else if (excel_mode_flag == 4 && s1_cycle_add[excel_cycle_count] != 0)            //如果Geofencing的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s1_geofencing_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s1_geofencing_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s1_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s1_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s1_geofencing_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }
                            else if (excel_mode_flag == 3 && s1_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s1_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s1_geofencing_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s1_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }

                            break;
                        //餘數
                        case 5:
                            if (excel_mode_flag == 2)               //T3~T4 下的餘數
                            {
                                excel_mode_frame += s1_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s1_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s1_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 3)           //Dynamic下的餘數
                            {
                                excel_mode_frame += s1_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s1_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s1_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 4)          //Geofencing下的餘數
                            {

                                excel_mode_frame += s1_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s1_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s1_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s1_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                            }
                            break;
                    }
                }
                /*
                 * s1 cycle sheet
                 */

                //設定title
                Excel.Cell title_Instruction_code = sheet.Cells["A1"];
                Excel.Cell title_Item = sheet.Cells["C1"];
                Excel.Cell title_time_ymd = sheet.Cells["D1"];
                Excel.Cell title_time_hms = sheet.Cells["E1"];
                Excel.Cell title_Fix = sheet.Cells["F1"];
                Excel.Cell title_Random_combinations = sheet.Cells["G1"];
                Excel.Cell title_sat = sheet.Cells["L1"];
                Excel.Cell title_mode = sheet.Cells["M1"];
                Excel.Cell title_interval = sheet.Cells["N1"];
                //DeepSkyBlue : 0, Blue : 1, Orange : 2, LightSeaGreen : 3
                Excel.Cell color_DeepSkyBlue = sheet.Cells["S2"];
                Excel.Cell DeepSkyBlue_explanation = sheet.Cells["T2"];
                Excel.Cell color_Blue = sheet.Cells["S3"];
                Excel.Cell Blue_explanation = sheet.Cells["T3"];
                Excel.Cell color_Orange = sheet.Cells["S4"];
                Excel.Cell Orange_explanation = sheet.Cells["T4"];
                Excel.Cell color_LightSeaGreen = sheet.Cells["S5"];
                Excel.Cell LightSeaGreen_explanation = sheet.Cells["T5"];
                Excel.Cell HighEffcien = sheet.Cells["S6"];
                //誤差值判定Title、組數
                Excel.Cell title_interval_judge = sheet.Cells["P1"];
                Excel.Cell title_cycle = sheet.Cells["Q1"];
                Excel.Cell cycle_free_run = sheet.Cells["Q2"];
                //T0~T4 title
                Excel.Cell title_T0 = sheet.Cells["S10"];
                Excel.Cell title_T1 = sheet.Cells["S11"];
                Excel.Cell title_T2 = sheet.Cells["S12"];
                Excel.Cell title_T3 = sheet.Cells["S13"];
                Excel.Cell title_T4 = sheet.Cells["S14"];
                Excel.Cell title_T0_value = sheet.Cells["T10"];
                Excel.Cell title_T1_value = sheet.Cells["T11"];
                Excel.Cell title_T2_value = sheet.Cells["T12"];
                Excel.Cell title_T3_value = sheet.Cells["T13"];
                Excel.Cell title_T4_value = sheet.Cells["T14"];
                //時間換算、組數換算
                Excel.Cell enter_num = sheet.Cells["V10"];
                Excel.Cell title_time_cal = sheet.Cells["V11"];
                Excel.Cell title_cycle_cal = sheet.Cells["V12"];
                Excel.Cell title_time_cal_value = sheet.Cells["W11"];
                Excel.Cell title_cycle_cal_value = sheet.Cells["W12"];

                //寫入title
                title_Instruction_code.PutValue("指令代碼");
                title_Item.PutValue("Item");
                title_time_ymd.PutValue("定位日期(年_月_日)");
                title_time_hms.PutValue("定位日期(時_分_秒)");
                title_Fix.PutValue("Fix-Type");
                title_Random_combinations.PutValue("亂數組合");
                title_sat.PutValue("使用的衛星數");
                title_mode.PutValue("Mode");
                title_interval.PutValue("Interval");
                DeepSkyBlue_explanation.PutValue("T0 ~ T1");
                Blue_explanation.PutValue("T2 ~ T4");
                Orange_explanation.PutValue("Dynamic");
                LightSeaGreen_explanation.PutValue("Geofencing");
                HighEffcien.PutValue("High effcien");
                //誤差值判定Title、組數
                title_cycle.PutValue("打點資訊");
                cycle_free_run.PutValue(s1_free_run_time.ToString() + "組");
                //T0~T4 title
                title_T0.PutValue("T0");
                title_T1.PutValue("T1");
                title_T2.PutValue("T2");
                title_T3.PutValue("T3");
                title_T4.PutValue("T4");
                title_T0_value.PutValue(s1_t0.ToString());
                title_T1_value.PutValue(s1_t1.ToString());
                title_T2_value.PutValue(s1_t2.ToString());
                title_T3_value.PutValue(s1_t3.ToString());
                title_T4_value.PutValue(s1_t4.ToString());
                //時間換算、組數換算
                enter_num.PutValue("請輸入換算數字 =>");
                title_time_cal.PutValue("時間換算");
                title_cycle_cal.PutValue("組數換算");
                sheet.Cells.SetColumnWidth(21, 17);
                title_time_cal_value.Formula = "=(W10*3600)/" + s1_t1.ToString();
                title_cycle_cal_value.Formula = "W11/(" + s1_t2.ToString() + "+" + s1_t3.ToString() + ")";

                Excel.Style color_DeepSkyBlue_style = sheet.Cells["S2"].GetStyle();
                color_DeepSkyBlue_style.ForegroundColor = Color.FromArgb(0, 191, 255);
                color_DeepSkyBlue_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S2"].SetStyle(color_DeepSkyBlue_style);
                Excel.Style color_Blue_style = sheet.Cells["S3"].GetStyle();
                color_Blue_style.ForegroundColor = Color.Blue;
                color_Blue_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S3"].SetStyle(color_Blue_style);
                Excel.Style color_Orange_style = sheet.Cells["S4"].GetStyle();
                color_Orange_style.ForegroundColor = Color.Orange;
                color_Orange_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S4"].SetStyle(color_Orange_style);
                Excel.Style color_LightSeaGreen_style = sheet.Cells["S5"].GetStyle();
                color_LightSeaGreen_style.ForegroundColor = Color.FromArgb(32, 178, 170);
                color_LightSeaGreen_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S5"].SetStyle(color_LightSeaGreen_style);
                Excel.Style HighEffcien_style = sheet.Cells["S6"].GetStyle();
                HighEffcien_style.ForegroundColor = Color.FromArgb(169, 208, 142);
                HighEffcien_style.Font.Color = Color.Red;
                HighEffcien_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S6"].SetStyle(HighEffcien_style);

                for (cmd_count = 1; cmd_count < convert_count1; cmd_count++)
                {
                    //宣告欄位
                    Excel.Cell Excel1_Instruction_code_cmd = sheet.Cells[cmd_count, 0];
                    Excel.Cell Excel1_Instruction_code_cmd_two = sheet.Cells[cmd_count, 1];
                    Excel.Cell Excel1_item = sheet.Cells[cmd_count, 2];
                    Excel.Cell Excel1_ymd = sheet.Cells[cmd_count, 3];
                    Excel.Cell Excel1_hms = sheet.Cells[cmd_count, 4];
                    Excel.Cell Excel1_fix = sheet.Cells[cmd_count, 5];
                    Excel.Cell Excel1_ramdom_first = sheet.Cells[cmd_count, 6];
                    Excel.Cell Excel1_ramdom_second = sheet.Cells[cmd_count, 7];
                    Excel.Cell Excel1_ramdom_third = sheet.Cells[cmd_count, 8];
                    Excel.Cell Excel1_ramdom_forth = sheet.Cells[cmd_count, 9];
                    Excel.Cell Excel1_ramdom_fiveth = sheet.Cells[cmd_count, 10];
                    Excel.Cell Excel1_sat = sheet.Cells[cmd_count, 11];
                    Excel.Cell Excel1_mode = sheet.Cells[cmd_count, 12];
                    //存放欄位
                    Excel1_Instruction_code_cmd.PutValue(s1_Instruction_code_cmd[cmd_count]);
                    Excel1_Instruction_code_cmd_two.PutValue(Int32.Parse(s1_Instruction_code_cmd_two[cmd_count]));
                    Excel1_item.PutValue(Int32.Parse(s1_Item[cmd_count]));
                    Excel1_ymd.PutValue(s1_ymd[cmd_count]);
                    Excel1_hms.PutValue(s1_hms[cmd_count]);
                    Excel1_fix.PutValue(s1_fix[cmd_count]);
                    Excel1_ramdom_first.PutValue(s1_ramdom_first[cmd_count]);
                    Excel1_ramdom_second.PutValue(s1_ramdom_second[cmd_count]);
                    Excel1_ramdom_third.PutValue(s1_ramdom_third[cmd_count]);
                    Excel1_ramdom_forth.PutValue(s1_ramdom_forth[cmd_count]);
                    Excel1_ramdom_fiveth.PutValue(s1_ramdom_fiveth[cmd_count]);
                    Excel1_sat.PutValue(s1_sat[cmd_count]);
                    Excel1_mode.PutValue(s1_mode[cmd_count]);
                    //宣告style調整格式
                    Excel.Style Excel1_Instruction_code_cmd_style = sheet.Cells[cmd_count, 0].GetStyle();
                    Excel.Style Excel1_Instruction_code_cmd_two_style = sheet.Cells[cmd_count, 1].GetStyle();
                    Excel.Style Excel1_item_style = sheet.Cells[cmd_count, 2].GetStyle();
                    Excel.Style Excel1_ymd_style = sheet.Cells[cmd_count, 3].GetStyle();
                    Excel.Style Excel1_hms_style = sheet.Cells[cmd_count, 4].GetStyle();
                    Excel.Style Excel1_fix_style = sheet.Cells[cmd_count, 5].GetStyle();
                    Excel.Style Excel1_ramdom_first_style = sheet.Cells[cmd_count, 6].GetStyle();
                    Excel.Style Excel1_ramdom_second_style = sheet.Cells[cmd_count, 7].GetStyle();
                    Excel.Style Excel1_ramdom_third_style = sheet.Cells[cmd_count, 8].GetStyle();
                    Excel.Style Excel1_ramdom_forth_style = sheet.Cells[cmd_count, 9].GetStyle();
                    Excel.Style Excel1_ramdom_fiveth_style = sheet.Cells[cmd_count, 10].GetStyle();
                    Excel.Style Excel1_sat_style = sheet.Cells[cmd_count, 11].GetStyle();
                    Excel.Style Excel1_mode_style = sheet.Cells[cmd_count, 12].GetStyle();

                    //Set color
                    //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4
                    switch (s1_mode_font_color[cmd_count])
                    {
                        case 0:
                            break;
                        case 1:
                            Excel1_Instruction_code_cmd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_Instruction_code_cmd_two_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_item_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_ymd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_hms_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_fix_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_ramdom_first_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_ramdom_second_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_ramdom_third_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_ramdom_forth_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_ramdom_fiveth_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_sat_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel1_mode_style.Font.Color = Color.FromArgb(0, 191, 255);
                            break;
                        case 2:
                            Excel1_Instruction_code_cmd_style.Font.Color = Color.Blue;
                            Excel1_Instruction_code_cmd_two_style.Font.Color = Color.Blue;
                            Excel1_item_style.Font.Color = Color.Blue;
                            Excel1_ymd_style.Font.Color = Color.Blue;
                            Excel1_hms_style.Font.Color = Color.Blue;
                            Excel1_fix_style.Font.Color = Color.Blue;
                            Excel1_ramdom_first_style.Font.Color = Color.Blue;
                            Excel1_ramdom_second_style.Font.Color = Color.Blue;
                            Excel1_ramdom_third_style.Font.Color = Color.Blue;
                            Excel1_ramdom_forth_style.Font.Color = Color.Blue;
                            Excel1_ramdom_fiveth_style.Font.Color = Color.Blue;
                            Excel1_sat_style.Font.Color = Color.Blue;
                            Excel1_mode_style.Font.Color = Color.Blue;
                            break;
                        case 3:
                            Excel1_Instruction_code_cmd_style.Font.Color = Color.Orange;
                            Excel1_Instruction_code_cmd_two_style.Font.Color = Color.Orange;
                            Excel1_item_style.Font.Color = Color.Orange;
                            Excel1_ymd_style.Font.Color = Color.Orange;
                            Excel1_hms_style.Font.Color = Color.Orange;
                            Excel1_fix_style.Font.Color = Color.Orange;
                            Excel1_ramdom_first_style.Font.Color = Color.Orange;
                            Excel1_ramdom_second_style.Font.Color = Color.Orange;
                            Excel1_ramdom_third_style.Font.Color = Color.Orange;
                            Excel1_ramdom_forth_style.Font.Color = Color.Orange;
                            Excel1_ramdom_fiveth_style.Font.Color = Color.Orange;
                            Excel1_sat_style.Font.Color = Color.Orange;
                            Excel1_mode_style.Font.Color = Color.Orange;
                            break;
                        case 4:
                            Excel1_Instruction_code_cmd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_Instruction_code_cmd_two_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_item_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_ymd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_hms_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_fix_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_ramdom_first_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_ramdom_second_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_ramdom_third_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_ramdom_forth_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_ramdom_fiveth_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_sat_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel1_mode_style.Font.Color = Color.FromArgb(32, 178, 170);
                            break;
                    }

                    //字體置中
                    Excel1_Instruction_code_cmd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_Instruction_code_cmd_two_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_fix_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_ramdom_first_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_ramdom_second_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_ramdom_third_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_ramdom_forth_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_ramdom_fiveth_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_sat_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel1_mode_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    //style set
                    sheet.Cells[cmd_count, 0].SetStyle(Excel1_Instruction_code_cmd_style);
                    sheet.Cells[cmd_count, 1].SetStyle(Excel1_Instruction_code_cmd_two_style);
                    sheet.Cells[cmd_count, 2].SetStyle(Excel1_item_style);
                    sheet.Cells[cmd_count, 3].SetStyle(Excel1_ymd_style);
                    sheet.Cells[cmd_count, 4].SetStyle(Excel1_hms_style);
                    sheet.Cells[cmd_count, 5].SetStyle(Excel1_fix_style);
                    sheet.Cells[cmd_count, 6].SetStyle(Excel1_ramdom_first_style);
                    sheet.Cells[cmd_count, 7].SetStyle(Excel1_ramdom_second_style);
                    sheet.Cells[cmd_count, 8].SetStyle(Excel1_ramdom_third_style);
                    sheet.Cells[cmd_count, 9].SetStyle(Excel1_ramdom_forth_style);
                    sheet.Cells[cmd_count, 10].SetStyle(Excel1_ramdom_fiveth_style);
                    sheet.Cells[cmd_count, 11].SetStyle(Excel1_sat_style);
                    sheet.Cells[cmd_count, 12].SetStyle(Excel1_mode_style);

                    if (cmd_count > 1)
                    {
                        Excel.Cell Excel1_interval = sheet.Cells[cmd_count, 13];
                        Excel.Cell Excel1_interval_judge = sheet.Cells[cmd_count, 15];
                        Excel1_interval.PutValue(s1_interval[cmd_count]);
                        Excel1_interval_judge.PutValue(s1_interval_judge[cmd_count]);
                        Excel.Style Excel1_interval_style = sheet.Cells[cmd_count, 13].GetStyle();
                        Excel.Style Excel1_interval_judge_style = sheet.Cells[cmd_count, 15].GetStyle();
                        //Set Interval Font color
                        //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4, Red : 5
                        switch (s1_interval_font_color[cmd_count])
                        {
                            case 0:
                                break;
                            case 1:
                                Excel1_interval_style.Font.Color = Color.FromArgb(0, 191, 255);
                                break;
                            case 2:
                                Excel1_interval_style.Font.Color = Color.Blue;
                                break;
                            case 3:
                                Excel1_interval_style.Font.Color = Color.Orange;
                                break;
                            case 4:
                                Excel1_interval_style.Font.Color = Color.FromArgb(32, 178, 170);
                                break;
                            case 5:
                                Excel1_interval_style.Font.Color = Color.Red;
                                s1_interval_judge_flag = 1;
                                break;
                        }
                        Excel1_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        Excel1_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        sheet.Cells[cmd_count, 13].SetStyle(Excel1_interval_style);
                        sheet.Cells[cmd_count, 15].SetStyle(Excel1_interval_judge_style);
                    }

                }

                //指令代碼title格式調整
                Excel.Style title_Instruction_code_style = sheet.Cells["A1"].GetStyle();
                Excel.Style title_Instruction_code_style_b2 = sheet.Cells["B1"].GetStyle();
                Excel.Font title_Instruction_code_font = title_Instruction_code_style.Font;
                title_Instruction_code_style.ForegroundColor = Color.LightGray;
                title_Instruction_code_style.Pattern = Excel.BackgroundType.Solid;
                title_Instruction_code_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Instruction_code_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Instruction_code_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Instruction_code_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Instruction_code_font.IsBold = true;
                sheet.Cells.SetColumnWidth(0, 15);
                sheet.Cells["A1"].SetStyle(title_Instruction_code_style);
                sheet.Cells["B1"].SetStyle(title_Instruction_code_style_b2);

                //Item title格式調整
                Excel.Style title_Item_style = sheet.Cells["C1"].GetStyle();
                Excel.Font title_Item_font = title_Item_style.Font;
                title_Item_style.ForegroundColor = Color.LightGray;
                title_Item_style.Pattern = Excel.BackgroundType.Solid;
                title_Item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Item_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Item_font.IsBold = true;
                sheet.Cells["C1"].SetStyle(title_Item_style);

                //time ymd格式調整
                Excel.Style title_time_ymd_style = sheet.Cells["D1"].GetStyle();
                Excel.Font title_time_ymd_font = title_time_ymd_style.Font;
                title_time_ymd_style.ForegroundColor = Color.LightGray;
                title_time_ymd_style.Pattern = Excel.BackgroundType.Solid;
                title_time_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_time_ymd_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_time_ymd_font.IsBold = true;
                sheet.Cells.SetColumnWidth(3, 35);
                sheet.Cells["D1"].SetStyle(title_time_ymd_style);

                //time hms格式調整
                Excel.Style title_time_hms_style = sheet.Cells["E1"].GetStyle();
                Excel.Font title_time_hms_font = title_time_hms_style.Font;
                title_time_hms_style.ForegroundColor = Color.LightGray;
                title_time_hms_style.Pattern = Excel.BackgroundType.Solid;
                title_time_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_time_hms_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_time_hms_font.IsBold = true;
                sheet.Cells["E1"].SetStyle(title_time_hms_style);
                sheet.Cells.SetColumnWidth(4, 35);

                //Fix Type格式調整
                Excel.Style title_fix_type_style = sheet.Cells["F1"].GetStyle();
                Excel.Font title_fix_type_font = title_time_hms_style.Font;
                title_fix_type_style.ForegroundColor = Color.LightGray;
                title_fix_type_style.Pattern = Excel.BackgroundType.Solid;
                title_fix_type_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_fix_type_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_fix_type_font.IsBold = true;
                sheet.Cells["F1"].SetStyle(title_fix_type_style);

                //Ramdom combinations格式調整
                Excel.Style title_Ramdom_combinations_style = sheet.Cells["G1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b2 = sheet.Cells["H1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b3 = sheet.Cells["I1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b4 = sheet.Cells["J1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b5 = sheet.Cells["K1"].GetStyle();
                Excel.Font title_Ramdom_combinations_font = title_Ramdom_combinations_style.Font;
                title_Ramdom_combinations_style.ForegroundColor = Color.LightGray;
                title_Ramdom_combinations_style.Pattern = Excel.BackgroundType.Solid;
                title_Ramdom_combinations_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_font.IsBold = true;
                sheet.Cells.SetColumnWidth(6, 10);
                sheet.Cells.SetColumnWidth(7, 10);
                sheet.Cells["G1"].SetStyle(title_Ramdom_combinations_style);
                sheet.Cells["H1"].SetStyle(title_Ramdom_combinations_style_b2);
                sheet.Cells["I1"].SetStyle(title_Ramdom_combinations_style_b3);
                sheet.Cells["J1"].SetStyle(title_Ramdom_combinations_style_b4);
                sheet.Cells["K1"].SetStyle(title_Ramdom_combinations_style_b5);

                //SAT格式調整
                Excel.Style title_sat_style = sheet.Cells["L1"].GetStyle();
                Excel.Font title_sat_font = title_sat_style.Font;
                title_sat_style.ForegroundColor = Color.LightGray;
                title_sat_style.Pattern = Excel.BackgroundType.Solid;
                title_sat_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_sat_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_sat_font.IsBold = true;
                sheet.Cells.SetColumnWidth(11, 20);
                sheet.Cells["L1"].SetStyle(title_sat_style);

                //Mode格式調整
                Excel.Style title_mode_style = sheet.Cells["M1"].GetStyle();
                Excel.Font title_mode_font = title_mode_style.Font;
                title_mode_style.ForegroundColor = Color.LightGray;
                title_mode_style.Pattern = Excel.BackgroundType.Solid;
                title_mode_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_mode_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_mode_font.IsBold = true;
                sheet.Cells["M1"].SetStyle(title_mode_style);

                //Interval格式調整
                Excel.Style title_interval_style = sheet.Cells["N1"].GetStyle();
                Excel.Font title_interval_font = title_interval_style.Font;
                title_interval_style.ForegroundColor = Color.LightGray;
                title_interval_style.Pattern = Excel.BackgroundType.Solid;
                title_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_interval_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_interval_font.IsBold = true;
                sheet.Cells["N1"].SetStyle(title_interval_style);

                //Interval_judge格式調整
                Excel.Style title_interval_judge_style = sheet.Cells["P1"].GetStyle();
                Excel.Font title_interval_judge_font = title_interval_judge_style.Font;
                title_interval_judge_style.ForegroundColor = Color.LightGray;
                title_interval_judge_style.Pattern = Excel.BackgroundType.Solid;
                title_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_interval_judge_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_interval_judge_font.IsBold = true;
                sheet.Cells.SetColumnWidth(15, 15);
                if (s1_interval_judge_flag == 1)
                {
                    title_interval_judge.PutValue("誤差值判定:False");
                    title_interval_judge_style.Font.Color = Color.Red;
                    s1_interval_judge_flag = 0;
                }
                else if (s1_interval_judge_flag == 0)
                {
                    title_interval_judge.PutValue("誤差值判定:OK");
                    title_interval_judge_style.Font.Color = Color.Green;
                }
                sheet.Cells["P1"].SetStyle(title_interval_judge_style);

                //Cycle格式調整
                Excel.Style title_cycle_style = sheet.Cells["Q1"].GetStyle();
                Excel.Font title_cycle_font = title_cycle_style.Font;
                title_cycle_style.ForegroundColor = Color.LightGray;
                title_cycle_style.Pattern = Excel.BackgroundType.Solid;
                title_cycle_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_cycle_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                sheet.Cells.SetColumnWidth(16, 10);
                title_cycle_font.IsBold = true;
                sheet.Cells["Q1"].SetStyle(title_cycle_style);

                //Cycle Free run 格式調整
                for (int free_run_border = 1; free_run_border <= s1_free_run_time; free_run_border++)
                {
                    Excel.Style title_cycle_free_run_style = sheet.Cells[free_run_border, 16].GetStyle();
                    Excel.Font title_cycle_free_run_font = title_cycle_free_run_style.Font;
                    title_cycle_free_run_style.ForegroundColor = Color.LightGray;
                    title_cycle_free_run_style.Pattern = Excel.BackgroundType.Solid;
                    title_cycle_free_run_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    title_cycle_free_run_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                    title_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    sheet.Cells.SetColumnWidth(16, 10);
                    title_cycle_free_run_font.IsBold = true;
                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_free_run_style);
                }


                /**
                 * GNSS、MDA、Setting sheet
                 */
                int index = wb.Worksheets.Add();    //新增一個GNSS sheet
                Excel.Worksheet sheet_mda = wb.Worksheets[index];

                sheet_mda.Name = "GNSS";
                s1_gnss_cell_flag = 0;
                s1_gnss_item = 0;
                s1_gps_prn_count = 1;
                s1_gps_snr_count = 2;
                s1_glo_prn_count = 3;
                s1_glo_snr_count = 4;
                s1_gal_prn_count = 5;
                s1_gal_snr_count = 6;
                s1_bei_prn_count = 7;
                s1_bei_snr_count = 8;
                s1_qzs_prn_count = 9;
                s1_qzs_snr_count = 10;
                for (int GNSS_item_count = 1; GNSS_item_count < convert_count1; GNSS_item_count++)
                {
                    if (s1_gnss_cell_flag == 0)
                    {
                        Excel.Cell excel_gnss_item = sheet_mda.Cells[s1_gnss_item, 0];
                        Excel.Cell excel_gps_prn = sheet_mda.Cells[s1_gps_prn_count, 0];
                        Excel.Cell excel_gps_snr = sheet_mda.Cells[s1_gps_snr_count, 0];
                        Excel.Cell excel_glo_prn = sheet_mda.Cells[s1_glo_prn_count, 0];
                        Excel.Cell excel_glo_snr = sheet_mda.Cells[s1_glo_snr_count, 0];
                        Excel.Cell excel_gal_prn = sheet_mda.Cells[s1_gal_prn_count, 0];
                        Excel.Cell excel_gal_snr = sheet_mda.Cells[s1_gal_snr_count, 0];
                        Excel.Cell excel_bei_prn = sheet_mda.Cells[s1_bei_prn_count, 0];
                        Excel.Cell excel_bei_snr = sheet_mda.Cells[s1_bei_snr_count, 0];
                        Excel.Cell excel_qzs_prn = sheet_mda.Cells[s1_qzs_prn_count, 0];
                        Excel.Cell excel_qzs_snr = sheet_mda.Cells[s1_qzs_snr_count, 0];

                        excel_gnss_item.PutValue(S1_ITEM[GNSS_item_count]);
                        excel_gps_prn.PutValue(S1_GPS_PRN[GNSS_item_count]);
                        excel_gps_snr.PutValue(S1_GPS_SNR[GNSS_item_count]);
                        excel_glo_prn.PutValue(S1_GLO_PRN[GNSS_item_count]);
                        excel_glo_snr.PutValue(S1_GLO_SNR[GNSS_item_count]);
                        excel_gal_prn.PutValue(S1_GAL_PRN[GNSS_item_count]);
                        excel_gal_snr.PutValue(S1_GAL_SNR[GNSS_item_count]);
                        excel_bei_prn.PutValue(S1_BEI_PRN[GNSS_item_count]);
                        excel_bei_snr.PutValue(S1_BEI_SNR[GNSS_item_count]);
                        excel_qzs_prn.PutValue(S1_QZS_PRN[GNSS_item_count]);
                        excel_qzs_snr.PutValue(S1_QZS_SNR[GNSS_item_count]);

                        Excel.Style excel_gnss_item_STYLE = sheet_mda.Cells[s1_gnss_item, 0].GetStyle();
                        Excel.Font excel_gnss_item_FONT = excel_gnss_item_STYLE.Font;
                        excel_gnss_item_FONT.IsBold = true;
                        sheet_mda.Cells[s1_gnss_item, 0].SetStyle(excel_gnss_item_STYLE);

                        s1_gnss_cell_flag++;
                    }
                    else if (s1_gnss_cell_flag > 0)
                    {
                        s1_gnss_item = s1_gnss_item + 11;
                        s1_gps_prn_count = s1_gps_prn_count + 11;
                        s1_gps_snr_count = s1_gps_snr_count + 11;
                        s1_glo_prn_count = s1_glo_prn_count + 11;
                        s1_glo_snr_count = s1_glo_snr_count + 11;
                        s1_gal_prn_count = s1_gal_prn_count + 11;
                        s1_gal_snr_count = s1_gal_snr_count + 11;
                        s1_bei_prn_count = s1_bei_prn_count + 11;
                        s1_bei_snr_count = s1_bei_snr_count + 11;
                        s1_qzs_prn_count = s1_qzs_prn_count + 11;
                        s1_qzs_snr_count = s1_qzs_snr_count + 11;

                        Excel.Cell excel_gnss_item = sheet_mda.Cells[s1_gnss_item, 0];
                        Excel.Cell excel_gps_prn = sheet_mda.Cells[s1_gps_prn_count, 0];
                        Excel.Cell excel_gps_snr = sheet_mda.Cells[s1_gps_snr_count, 0];
                        Excel.Cell excel_glo_prn = sheet_mda.Cells[s1_glo_prn_count, 0];
                        Excel.Cell excel_glo_snr = sheet_mda.Cells[s1_glo_snr_count, 0];
                        Excel.Cell excel_gal_prn = sheet_mda.Cells[s1_gal_prn_count, 0];
                        Excel.Cell excel_gal_snr = sheet_mda.Cells[s1_gal_snr_count, 0];
                        Excel.Cell excel_bei_prn = sheet_mda.Cells[s1_bei_prn_count, 0];
                        Excel.Cell excel_bei_snr = sheet_mda.Cells[s1_bei_snr_count, 0];
                        Excel.Cell excel_qzs_prn = sheet_mda.Cells[s1_qzs_prn_count, 0];
                        Excel.Cell excel_qzs_snr = sheet_mda.Cells[s1_qzs_snr_count, 0];

                        excel_gnss_item.PutValue(S1_ITEM[GNSS_item_count]);
                        excel_gps_prn.PutValue(S1_GPS_PRN[GNSS_item_count]);
                        excel_gps_snr.PutValue(S1_GPS_SNR[GNSS_item_count]);
                        excel_glo_prn.PutValue(S1_GLO_PRN[GNSS_item_count]);
                        excel_glo_snr.PutValue(S1_GLO_SNR[GNSS_item_count]);
                        excel_gal_prn.PutValue(S1_GAL_PRN[GNSS_item_count]);
                        excel_gal_snr.PutValue(S1_GAL_SNR[GNSS_item_count]);
                        excel_bei_prn.PutValue(S1_BEI_PRN[GNSS_item_count]);
                        excel_bei_snr.PutValue(S1_BEI_SNR[GNSS_item_count]);
                        excel_qzs_prn.PutValue(S1_QZS_PRN[GNSS_item_count]);
                        excel_qzs_snr.PutValue(S1_QZS_SNR[GNSS_item_count]);

                        Excel.Style excel_gnss_item_STYLE = sheet_mda.Cells[s1_gnss_item, 0].GetStyle();
                        Excel.Font excel_gnss_item_FONT = excel_gnss_item_STYLE.Font;
                        excel_gnss_item_FONT.IsBold = true;
                        sheet_mda.Cells[s1_gnss_item, 0].SetStyle(excel_gnss_item_STYLE);

                        s1_gnss_cell_flag++;
                    }

                }

                Excel.Cell gps_epo_enable = sheet_mda.Cells["F1"];
                Excel.Cell glo_epo_enable = sheet_mda.Cells["F2"];
                Excel.Cell gal_epo_enable = sheet_mda.Cells["F3"];
                Excel.Cell bei_epo_enable = sheet_mda.Cells["F4"];

                Excel.Cell TTFF_item = sheet_mda.Cells["F6"];
                Excel.Cell TTFF_USAGE_TIME = sheet_mda.Cells["F7"];
                Excel.Cell Analyze_UTC_ITEM = sheet_mda.Cells["F8"];
                Excel.Cell Analyze_UTC_TIME = sheet_mda.Cells["F9"];

                //[AVG:FIRST - PREVIOUS FIX]
                Excel.Cell AVG_FIRST_PREVIOUS_FIX = sheet_mda.Cells["F11"];
                Excel.Cell A2_Start_Stop_Total_item = sheet_mda.Cells["F23"];
                Excel.Cell A2_gps_sat_avg = sheet_mda.Cells["F24"];
                Excel.Cell A2_gps_snr_avg = sheet_mda.Cells["F25"];
                Excel.Cell A2_glo_sat_avg = sheet_mda.Cells["F26"];
                Excel.Cell A2_glo_snr_avg = sheet_mda.Cells["F27"];
                Excel.Cell A2_gal_sat_avg = sheet_mda.Cells["F28"];
                Excel.Cell A2_gal_snr_avg = sheet_mda.Cells["F29"];
                Excel.Cell A2_bei_sat_avg = sheet_mda.Cells["F30"];
                Excel.Cell A2_bei_snr_avg = sheet_mda.Cells["F31"];

                //[AVG:FIRST - FIX]
                Excel.Cell AVG_FIRST_FIX = sheet_mda.Cells["F22"];
                Excel.Cell A1_Start_Stop_Total_item = sheet_mda.Cells["F12"];
                Excel.Cell A1_gps_sat_avg = sheet_mda.Cells["F13"];
                Excel.Cell A1_gps_snr_avg = sheet_mda.Cells["F14"];
                Excel.Cell A1_glo_sat_avg = sheet_mda.Cells["F15"];
                Excel.Cell A1_glo_snr_avg = sheet_mda.Cells["F16"];
                Excel.Cell A1_gal_sat_avg = sheet_mda.Cells["F17"];
                Excel.Cell A1_gal_snr_avg = sheet_mda.Cells["F18"];
                Excel.Cell A1_bei_sat_avg = sheet_mda.Cells["F19"];
                Excel.Cell A1_bei_snr_avg = sheet_mda.Cells["F20"];

                //[AVG:FIX - LAST]
                Excel.Cell AVG_FIX_LAST = sheet_mda.Cells["F33"];
                Excel.Cell A3_Start_Stop_Total_item = sheet_mda.Cells["F34"];
                Excel.Cell A3_gps_sat_avg = sheet_mda.Cells["F35"];
                Excel.Cell A3_gps_snr_avg = sheet_mda.Cells["F36"];
                Excel.Cell A3_glo_sat_avg = sheet_mda.Cells["F37"];
                Excel.Cell A3_glo_snr_avg = sheet_mda.Cells["F38"];
                Excel.Cell A3_gal_sat_avg = sheet_mda.Cells["F39"];
                Excel.Cell A3_gal_snr_avg = sheet_mda.Cells["F40"];
                Excel.Cell A3_bei_sat_avg = sheet_mda.Cells["F41"];
                Excel.Cell A3_bei_snr_avg = sheet_mda.Cells["F42"];

                //[AVG:FIRST - LAST]
                Excel.Cell AVG_FIRST_LAST = sheet_mda.Cells["F44"];
                Excel.Cell A4_Start_Stop_Total_item = sheet_mda.Cells["F45"];
                Excel.Cell A4_gps_sat_avg = sheet_mda.Cells["F46"];
                Excel.Cell A4_gps_snr_avg = sheet_mda.Cells["F47"];
                Excel.Cell A4_glo_sat_avg = sheet_mda.Cells["F48"];
                Excel.Cell A4_glo_snr_avg = sheet_mda.Cells["F49"];
                Excel.Cell A4_gal_sat_avg = sheet_mda.Cells["F50"];
                Excel.Cell A4_gal_snr_avg = sheet_mda.Cells["F51"];
                Excel.Cell A4_bei_sat_avg = sheet_mda.Cells["F52"];
                Excel.Cell A4_bei_snr_avg = sheet_mda.Cells["F53"];

                gps_epo_enable.PutValue(S1_GNSS_EPO[0]);
                glo_epo_enable.PutValue(S1_GNSS_EPO[1]);
                gal_epo_enable.PutValue(S1_GNSS_EPO[2]);
                bei_epo_enable.PutValue(S1_GNSS_EPO[3]);

                TTFF_item.PutValue(s1_TTFF_item);
                TTFF_USAGE_TIME.PutValue(s1_TTFF_time);
                Analyze_UTC_ITEM.PutValue(s1_Analyze_UTC_item);
                Analyze_UTC_TIME.PutValue(s1_Analyze_UTC_time);

                AVG_FIRST_FIX.PutValue("[AVG:FIRST - FIX]");
                A2_Start_Stop_Total_item.PutValue(S1_Area1_2_4_startitem + ", " + S1_Area2_stopitem + ", " + S1_Area2_totalitem);
                A2_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S1_A2_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S1_A2_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S1_A2_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S1_A2_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S1_A2_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S1_A2_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S1_A2_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S1_A2_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIRST_PREVIOUS_FIX.PutValue("[AVG:FIRST - PREVIOUS FIX]");
                A1_Start_Stop_Total_item.PutValue(S1_Area1_2_4_startitem + ", " + S1_Area1_stopitem + ", " + S1_Area1_totalitem);
                A1_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S1_A1_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S1_A1_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S1_A1_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S1_A1_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S1_A1_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S1_A1_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S1_A1_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S1_A1_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIX_LAST.PutValue("[AVG:FIX - LAST]");
                A3_Start_Stop_Total_item.PutValue(S1_Area3_startitem + ", " + S1_Area3_stopitem + ", " + S1_Area3_totalitem);
                A3_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S1_A3_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S1_A3_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S1_A3_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S1_A3_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S1_A3_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S1_A3_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S1_A3_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S1_A3_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIRST_LAST.PutValue("[AVG:FIRST - LAST]");
                A4_Start_Stop_Total_item.PutValue(S1_Area1_2_4_startitem + ", " + S1_Area4_stopitem + ", " + S1_Area4_totalitem);
                A4_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S1_A4_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S1_A4_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S1_A4_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S1_A4_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S1_A4_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S1_A4_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S1_A4_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S1_A4_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                //MDA 格式調整
                sheet_mda.Cells.SetColumnWidth(0, 62);  //GNSS欄位寬度
                sheet_mda.Cells.SetColumnWidth(5, 50);  //MDA欄位寬度

                Excel.Style gps_epo_enable_STYLE = sheet_mda.Cells["F1"].GetStyle();
                Excel.Font gps_epo_enable_FONT = gps_epo_enable_STYLE.Font;
                gps_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F1"].SetStyle(gps_epo_enable_STYLE);

                Excel.Style glo_epo_enable_STYLE = sheet_mda.Cells["F2"].GetStyle();
                Excel.Font glo_epo_enable_FONT = glo_epo_enable_STYLE.Font;
                glo_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F2"].SetStyle(glo_epo_enable_STYLE);

                Excel.Style gal_epo_enable_STYLE = sheet_mda.Cells["F3"].GetStyle();
                Excel.Font gal_epo_enable_FONT = gal_epo_enable_STYLE.Font;
                gal_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F3"].SetStyle(gal_epo_enable_STYLE);

                Excel.Style bei_epo_enable_STYLE = sheet_mda.Cells["F4"].GetStyle();
                Excel.Font bei_epo_enable_FONT = bei_epo_enable_STYLE.Font;
                bei_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F4"].SetStyle(bei_epo_enable_STYLE);

                Excel.Style TTFF_item_STYLE = sheet_mda.Cells["F6"].GetStyle();
                Excel.Font TTFF_item_FONT = TTFF_item_STYLE.Font;
                TTFF_item_FONT.IsBold = true;
                sheet_mda.Cells["F6"].SetStyle(TTFF_item_STYLE);

                Excel.Style TTFF_USAGE_TIME_STYLE = sheet_mda.Cells["F7"].GetStyle();
                Excel.Font TTFF_USAGE_TIME_FONT = TTFF_USAGE_TIME_STYLE.Font;
                TTFF_USAGE_TIME_FONT.IsBold = true;
                sheet_mda.Cells["F7"].SetStyle(TTFF_USAGE_TIME_STYLE);

                Excel.Style Analyze_UTC_ITEM_STYLE = sheet_mda.Cells["F8"].GetStyle();
                Excel.Font Analyze_UTC_ITEM_FONT = Analyze_UTC_ITEM_STYLE.Font;
                Analyze_UTC_ITEM_FONT.IsBold = true;
                sheet_mda.Cells["F8"].SetStyle(Analyze_UTC_ITEM_STYLE);

                Excel.Style Analyze_UTC_TIME_STYLE = sheet_mda.Cells["F9"].GetStyle();
                Excel.Font Analyze_UTC_TIME_FONT = Analyze_UTC_TIME_STYLE.Font;
                Analyze_UTC_TIME_FONT.IsBold = true;
                sheet_mda.Cells["F9"].SetStyle(Analyze_UTC_TIME_STYLE);

                Excel.Style AVG_FIRST_FIX_STYLE = sheet_mda.Cells["F11"].GetStyle();
                Excel.Font AVG_FIRST_FIX_FONT = AVG_FIRST_FIX_STYLE.Font;
                AVG_FIRST_FIX_FONT.IsBold = true;
                sheet_mda.Cells["F11"].SetStyle(AVG_FIRST_FIX_STYLE);

                Excel.Style AVG_FIRST_PREVIOUS_FIX_STYLE = sheet_mda.Cells["F22"].GetStyle();
                Excel.Font AVG_FIRST_PREVIOUS_FIX_FONT = AVG_FIRST_PREVIOUS_FIX_STYLE.Font;
                AVG_FIRST_PREVIOUS_FIX_FONT.IsBold = true;
                sheet_mda.Cells["F22"].SetStyle(AVG_FIRST_PREVIOUS_FIX_STYLE);

                Excel.Style AVG_FIX_LAST_STYLE = sheet_mda.Cells["F33"].GetStyle();
                Excel.Font AVG_FIX_LAST_FONT = AVG_FIX_LAST_STYLE.Font;
                AVG_FIX_LAST_FONT.IsBold = true;
                sheet_mda.Cells["F33"].SetStyle(AVG_FIX_LAST_STYLE);

                Excel.Style AVG_FIRST_LAST_STYLE = sheet_mda.Cells["F44"].GetStyle();
                Excel.Font AVG_FIRST_LAST_FONT = AVG_FIRST_LAST_STYLE.Font;
                AVG_FIRST_LAST_FONT.IsBold = true;
                sheet_mda.Cells["F44"].SetStyle(AVG_FIRST_LAST_STYLE);

                //Setting
                string[] setting_Array = richTextBox8.Lines;
                for (int counter = 0; counter < setting_Array.Length; counter++)
                {
                    s1_excel_setting[counter] = setting_Array[counter];
                    if (counter == 0)                                                                   //Periodic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Blue;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 0 && counter < 12)                                               //Periodic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Blue;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 12)                                                             //Dynamic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Orange;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 12 && counter < 17)                                             //Dynamic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Orange;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 17)                                                             //Geofencing
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(32, 178, 170);
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 17 && counter < 25)                                              //Geofencing
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(32, 178, 170);
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 25)                                                             //MotionDetection
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(165, 42, 42);
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 25 && counter < 30)                                              //MotionDetection
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(165, 42, 42);
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 30)                                                             //GPS_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 30 && counter < 36)                                              //GPS_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                    }
                    else if (counter == 36)                                                             //GLO_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 36 && counter < 42)                                              //GLO_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                    }
                    else if (counter == 42)                                                             //GAL_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 42 && counter < 48)                                              //GAL_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                    }
                    else if (counter == 48)                                                             //BEI_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 48 && counter < 54)                                              //BEI_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s1_excel_setting[counter]);
                    }

                }
                sheet_mda.Cells.SetColumnWidth(3, 30);
                //Setting

                /*
                 * Merge Excel
                 */
                Excel.Cell merge_title_Item = merge_ws.Cells[9, 6];
                Excel.Cell merge_title_fix_yyyy_mm_dd = merge_ws.Cells[9, 7];
                Excel.Cell merge_title_fix_hh_mm_ss = merge_ws.Cells[9, 8];
                Excel.Cell merge_title_Interval = merge_ws.Cells[9, 9];
                Excel.Cell merge_title_dot_message = merge_ws.Cells[9, 10];
                Excel.Cell merge_antenna = merge_ws.Cells["G8"];
                Excel.Cell merge_anklet = merge_ws.Cells["G9"];
                Excel.Cell merge_antenna_name = merge_ws.Cells["H8"];
                Excel.Cell merge_id_name = merge_ws.Cells["H9"];

                merge_title_Item.PutValue("Item");
                merge_title_fix_yyyy_mm_dd.PutValue("定位日期(年_月_日)");
                merge_title_fix_hh_mm_ss.PutValue("定位日期(時_分_秒)");
                merge_title_Interval.PutValue("Interval");
                merge_title_dot_message.PutValue("打點資訊");
                merge_antenna.PutValue("天線");
                merge_antenna_name.PutValue(" : ");
                merge_anklet.PutValue("腳環ID");
                merge_id_name.PutValue(" : " + s1_opfilename);

                if (chkfile == 1)
                {
                    String GNSS_Profile, EPOcheck;
                    DateTime Wakeup_time = WakeupTime.Value;
                    GNSS_Profile = SatCom.Text;
                    EPOcheck = EPOCom.Text;
                    String str_wakeuptime = Wakeup_time.ToString("yyyy/MM/dd HH:mm:ss");

                    Excel.Cell merge_sat = merge_ws.Cells["A1"];
                    Excel.Cell merge_test_time = merge_ws.Cells["A2"];
                    Excel.Cell merge_firmware_version = merge_ws.Cells["A3"];
                    Excel.Cell merge_parameter = merge_ws.Cells["A4"];
                    Excel.Cell merge_standard = merge_ws.Cells["A5"];
                    Excel.Cell merge_gnss_profile = merge_ws.Cells["B1"];
                    Excel.Cell merge_test_wakeuptime_value = merge_ws.Cells["B2"];
                    Excel.Cell merge_firmware_version_value = merge_ws.Cells["B3"];
                    Excel.Cell merge_parameter_value = merge_ws.Cells["B4"];
                    Excel.Cell merge_standard_value1 = merge_ws.Cells["B5"];
                    Excel.Cell merge_standard_value2 = merge_ws.Cells["C5"];

                    merge_sat.PutValue("衛星:");
                    merge_test_time.PutValue("測試時間:");
                    merge_firmware_version.PutValue("分位:");
                    merge_parameter.PutValue("參數:");
                    merge_standard.PutValue("標準:");

                    if (GNSS_Profile.Equals("G") == true)                           //GPS Only
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+EPO+(QZSS)");
                                merge_gnss_profile.Characters(8, 6).Font.Color = Color.Red;

                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+(QZSS)");
                                merge_gnss_profile.Characters(4, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GR") == true)                 //G + GR
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+EPO+(QZSS)");
                                merge_gnss_profile.Characters(16, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+(QZSS)");
                                merge_gnss_profile.Characters(12, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GE") == true)                 //G + GE
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+EPO+(QZSS)");
                                merge_gnss_profile.Characters(16, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+(QZSS)");
                                merge_gnss_profile.Characters(12, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GB") == true)                 //G + GB
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+EPO+(QZSS)");
                                merge_gnss_profile.Characters(15, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+(QZSS)");
                                merge_gnss_profile.Characters(11, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GR+GE+GB") == true)       //G + GR + GE + GB
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+EPO+(QZSS)");
                                merge_gnss_profile.Characters(31, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+(QZSS)");
                                merge_gnss_profile.Characters(27, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU");
                            }
                        }
                    }
                    merge_test_wakeuptime_value.PutValue(str_wakeuptime);
                    merge_firmware_version_value.PutValue(label28.Text);
                    merge_parameter_value.PutValue(s1_t0.ToString() + "、" + s1_t1.ToString() + "、" + s1_t2.ToString() + "、" + s1_t3.ToString() + "、" + s1_t4.ToString());
                    merge_standard_value1.PutValue("free run(" + s1_t1.ToString() + "s/" + s1_t0.ToString() + "s=" + s1_free_run_time.ToString() + "組)");
                    merge_standard_value2.PutValue("小循環(一組" + (s1_t3 + s1_t4).ToString() + "s，共" + (s1_t3 / s1_t0).ToString() + "個點)");

                    Excel.Style merge_standard_value1_style = merge_ws.Cells["B5"].GetStyle();
                    Excel.Font merge_standard_value1_font = merge_standard_value1_style.Font;
                    merge_standard_value1_style.ForegroundColor = Color.FromArgb(191, 191, 191);
                    merge_standard_value1_style.Pattern = Excel.BackgroundType.Solid;
                    merge_standard_value1_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    merge_standard_value1_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    merge_standard_value1_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_ws.Cells["B5"].SetStyle(merge_standard_value1_style);

                    Excel.Style merge_standard_value2_style = merge_ws.Cells["C5"].GetStyle();
                    Excel.Font merge_standard_value2_font = merge_standard_value2_style.Font;
                    merge_standard_value2_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                    merge_standard_value2_style.Pattern = Excel.BackgroundType.Solid;
                    merge_standard_value2_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    merge_ws.Cells["C5"].SetStyle(merge_standard_value2_style);

                    Excel.Cell merge_title_t0 = merge_ws.Cells["G1"];
                    Excel.Cell merge_title_t1 = merge_ws.Cells["G2"];
                    Excel.Cell merge_title_t2 = merge_ws.Cells["G3"];
                    Excel.Cell merge_title_t3 = merge_ws.Cells["G4"];
                    Excel.Cell merge_title_t4 = merge_ws.Cells["G5"];
                    Excel.Cell merge_t0 = merge_ws.Cells["H1"];
                    Excel.Cell merge_t1 = merge_ws.Cells["H2"];
                    Excel.Cell merge_t2 = merge_ws.Cells["H3"];
                    Excel.Cell merge_t3 = merge_ws.Cells["H4"];
                    Excel.Cell merge_t4 = merge_ws.Cells["H5"];

                    merge_title_t0.PutValue("T0");
                    merge_title_t1.PutValue("T1");
                    merge_title_t2.PutValue("T2");
                    merge_title_t3.PutValue("T3");
                    merge_title_t4.PutValue("T4");
                    merge_t0.PutValue(s1_t0.ToString());
                    merge_t1.PutValue(s1_t1.ToString());
                    merge_t2.PutValue(s1_t2.ToString());
                    merge_t3.PutValue(s1_t3.ToString());
                    merge_t4.PutValue(s1_t4.ToString());

                    Excel.Cell merge_title_input_val = merge_ws.Cells["J1"];
                    Excel.Cell merge_title_time_cal = merge_ws.Cells["J2"];
                    Excel.Cell merge_title_cycle_cal = merge_ws.Cells["J3"];
                    Excel.Cell merge_time_cal = merge_ws.Cells["K2"];
                    Excel.Cell merge_cycle_cal = merge_ws.Cells["K3"];

                    merge_title_input_val.PutValue("請輸入換算數字 = >");
                    merge_title_time_cal.PutValue("時間換算");
                    merge_title_cycle_cal.PutValue("組數換算");
                    merge_time_cal.Formula = "=(K1*3600)/" + s1_t1.ToString();
                    merge_cycle_cal.Formula = "K2/(" + s1_t2.ToString() + "+" + s1_t3.ToString() + ")";

                    chkfile = 0;
                }

                //Item 格式調整
                Excel.Style merge_title_Item_style = merge_ws.Cells[9, 6].GetStyle();
                Excel.Font merge_title_Item_font = merge_title_Item_style.Font;
                merge_title_Item_style.ForegroundColor = Color.LightGray;
                merge_title_Item_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_Item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_Item_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_Item_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_Item_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_Item_font.IsBold = true;
                merge_ws.Cells[9, 6].SetStyle(merge_title_Item_style);

                //定位日期(年_月_日) 格式調整
                Excel.Style merge_title_fix_yyyy_mm_dd_style = merge_ws.Cells[9, 7].GetStyle();
                Excel.Font merge_title_fix_yyyy_mm_dd_font = merge_title_fix_yyyy_mm_dd_style.Font;
                merge_title_fix_yyyy_mm_dd_style.ForegroundColor = Color.LightGray;
                merge_title_fix_yyyy_mm_dd_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_fix_yyyy_mm_dd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_font.IsBold = true;
                merge_ws.Cells[9, 7].SetStyle(merge_title_fix_yyyy_mm_dd_style);

                //定位日期(時_分_秒) 格式調整
                Excel.Style merge_title_fix_hh_mm_ss_style = merge_ws.Cells[9, 8].GetStyle();
                Excel.Font merge_title_fix_hh_mm_ss_font = merge_title_fix_hh_mm_ss_style.Font;
                merge_title_fix_hh_mm_ss_style.ForegroundColor = Color.LightGray;
                merge_title_fix_hh_mm_ss_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_fix_hh_mm_ss_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_font.IsBold = true;
                merge_ws.Cells[9, 8].SetStyle(merge_title_fix_hh_mm_ss_style);

                //Interval 格式調整
                Excel.Style merge_title_Interval_style = merge_ws.Cells[9, 9].GetStyle();
                Excel.Font merge_title_Interval_font = merge_title_Interval_style.Font;
                merge_title_Interval_style.ForegroundColor = Color.LightGray;
                merge_title_Interval_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_Interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_Interval_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_Interval_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_Interval_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_Interval_font.IsBold = true;
                merge_ws.Cells[9, 9].SetStyle(merge_title_Interval_style);

                //打點資訊 格式調整
                Excel.Style merge_title_dot_message_style = merge_ws.Cells[9, 10].GetStyle();
                Excel.Font merge_title_dot_message_font = merge_title_dot_message_style.Font;
                merge_title_dot_message_style.ForegroundColor = Color.LightGray;
                merge_title_dot_message_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_dot_message_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_dot_message_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                merge_title_dot_message_font.IsBold = true;
                merge_ws.Cells[9, 10].SetStyle(merge_title_dot_message_style);

                merge_ws.Cells.SetColumnWidth(6, 10);
                merge_ws.Cells.SetColumnWidth(7, 40);
                merge_ws.Cells.SetColumnWidth(8, 40);
                merge_ws.Cells.SetColumnWidth(9, 17);
                merge_ws.Cells.SetColumnWidth(10, 10);
                merge_ws.Cells.SetColumnWidth(11, 1);

                s1_merge_count = 9;
                //Save S1 Item、定位日期(年_月_日)、定位日期(時_分_秒)、Interval Data
                for (cmd_count = 1; cmd_count < convert_count1; cmd_count++)
                {
                    s1_merge_count += 1;
                    //宣告欄位
                    Excel.Cell Merge1_item = merge_ws.Cells[s1_merge_count, 6];
                    Excel.Cell Merge1_ymd = merge_ws.Cells[s1_merge_count, 7];
                    Excel.Cell Merge1_hms = merge_ws.Cells[s1_merge_count, 8];

                    //存放欄位
                    Merge1_item.PutValue(Int32.Parse(s1_Item[cmd_count]));
                    Merge1_ymd.PutValue(s1_ymd[cmd_count]);
                    Merge1_hms.PutValue(s1_hms[cmd_count]);
                    //宣告style調整格式
                    Excel.Style Merge1_item_style = merge_ws.Cells[s1_merge_count, 6].GetStyle();
                    Excel.Style Merge1_ymd_style = merge_ws.Cells[s1_merge_count, 7].GetStyle();
                    Excel.Style Merge1_hms_style = merge_ws.Cells[s1_merge_count, 8].GetStyle();

                    //Set color
                    //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4
                    switch (s1_mode_font_color[cmd_count])
                    {
                        case 0:
                            break;
                        case 1:
                            Merge1_item_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Merge1_ymd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Merge1_hms_style.Font.Color = Color.FromArgb(0, 191, 255);
                            break;
                        case 2:
                            Merge1_item_style.Font.Color = Color.Blue;
                            Merge1_ymd_style.Font.Color = Color.Blue;
                            Merge1_hms_style.Font.Color = Color.Blue;
                            break;
                        case 3:
                            Merge1_item_style.Font.Color = Color.Orange;
                            Merge1_ymd_style.Font.Color = Color.Orange;
                            Merge1_hms_style.Font.Color = Color.Orange;
                            break;
                        case 4:
                            Merge1_item_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Merge1_ymd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Merge1_hms_style.Font.Color = Color.FromArgb(32, 178, 170);
                            break;
                    }


                    //字體置中
                    Merge1_item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Merge1_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Merge1_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    //style set
                    merge_ws.Cells[s1_merge_count, 6].SetStyle(Merge1_item_style);
                    merge_ws.Cells[s1_merge_count, 7].SetStyle(Merge1_ymd_style);
                    merge_ws.Cells[s1_merge_count, 8].SetStyle(Merge1_hms_style);


                    if (cmd_count > 1)
                    {
                        Excel.Cell Merge1_interval = merge_ws.Cells[s1_merge_count, 9];
                        //Excel.Cell Merge1_interval_judge = merge_ws.Cells[s1_merge_count, 10];
                        Merge1_interval.PutValue(s1_interval[cmd_count]);
                        //Merge1_interval_judge.PutValue(s1_interval_judge[cmd_count]);
                        Excel.Style Merge1_interval_style = merge_ws.Cells[s1_merge_count, 9].GetStyle();
                        //Excel.Style Merge1_interval_judge_style = merge_ws.Cells[s1_merge_count, 10].GetStyle();
                        //Set Interval Font color
                        //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4, Red : 5
                        switch (s1_interval_font_color[cmd_count])
                        {
                            case 0:
                                break;
                            case 1:
                                Merge1_interval_style.Font.Color = Color.FromArgb(0, 191, 255);
                                break;
                            case 2:
                                Merge1_interval_style.Font.Color = Color.Blue;
                                break;
                            case 3:
                                Merge1_interval_style.Font.Color = Color.Orange;
                                break;
                            case 4:
                                Merge1_interval_style.Font.Color = Color.FromArgb(32, 178, 170);
                                break;
                            case 5:
                                Merge1_interval_style.Font.Color = Color.Red;
                                //s1_interval_judge_flag = 1;
                                break;

                        }
                        Merge1_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        //Merge1_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        merge_ws.Cells[s1_merge_count, 9].SetStyle(Merge1_interval_style);
                        //merge_ws.Cells[s1_merge_count, 10].SetStyle(Merge1_interval_judge_style);
                    }

                }
                /*
                 * s1 free run cycle
                 */
                Excel.Cells merge_free_run_time = merge_ws.Cells;
                merge_free_run_time.Merge(10, 10, s1_free_run_time, 1);
                Excel.Cell merge_cycle_free_run = merge_ws.Cells["K11"];
                merge_cycle_free_run.PutValue(s1_free_run_time.ToString() + "組");
                //Cycle Free run 格式調整
                for (int free_run_border = 10; free_run_border <= (s1_free_run_time + 9); free_run_border++)
                {
                    Excel.Style title_merge_cycle_free_run_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                    Excel.Font title_merge_cycle_free_run_font = title_merge_cycle_free_run_style.Font;
                    title_merge_cycle_free_run_style.ForegroundColor = Color.LightGray;
                    title_merge_cycle_free_run_style.Pattern = Excel.BackgroundType.Solid;
                    title_merge_cycle_free_run_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    title_merge_cycle_free_run_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_ws.Cells.SetColumnWidth(10, 10);
                    title_merge_cycle_free_run_font.IsBold = true;
                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_free_run_style);
                }
                /*
                 * s1 free run cycle
                 */
                /*
                 * s1 merge cycle sheet
                 */
                excel_mode_flag = 0;
                merge_excel_mode_frame = 9;
                for (int merge_excel_cycle_count = 0; merge_excel_cycle_count <= s1_cycle; merge_excel_cycle_count++)
                {
                    Excel.Cells merge_cycle_time_frame = merge_ws.Cells;
                    Excel.Cell merge_cycle_time;
                    switch (s1_cycle_mode_judge[merge_excel_cycle_count])
                    {
                        //T3~T4
                        case 2:
                            if (excel_mode_flag != 3 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)               //t3_t4的first cycle time
                                {
                                    merge_excel_mode_frame += s1_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_t3_t4_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                    merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(10, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 2;
                                }
                                else if (excel_mode_flag == 2 && s1_cycle_add[merge_excel_cycle_count] != 0)               //如果t3_t4的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s1_t3_t4_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_t3_t4_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                    merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(10, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                    }
                                }

                            }
                            else if (excel_mode_flag == 3 && s1_cycle_add[merge_excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                merge_excel_mode_frame += s1_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_t3_t4_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(10, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            else if (excel_mode_flag == 4 && s1_cycle_add[merge_excel_cycle_count] != 0)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                merge_excel_mode_frame += s1_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_t3_t4_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(10, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            break;

                        //Dynamic
                        case 3:
                            if (excel_mode_flag != 2 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)            //如果Dynamic的first cycle time
                                {
                                    merge_excel_mode_frame += s1_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_dynamic_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                    merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(10, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 3;
                                }
                                else if (excel_mode_flag == 3 && s1_cycle_add[merge_excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s1_dynamic_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_dynamic_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                    merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(10, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s1_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s1_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_dynamic_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(10, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            else if (excel_mode_flag == 4 && s1_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s1_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_dynamic_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(10, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (excel_mode_flag != 2 && excel_mode_flag != 3)
                            {
                                if (excel_mode_flag == 0)            //如果Geofencing的first cycle time
                                {
                                    merge_excel_mode_frame += s1_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_geofencing_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                    merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(10, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 4;
                                }
                                else if (excel_mode_flag == 4 && s1_cycle_add[merge_excel_cycle_count] != 0)            //如果Geofencing的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s1_geofencing_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_geofencing_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                    merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(10, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s1_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s1_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_geofencing_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(10, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }
                            else if (excel_mode_flag == 3 && s1_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s1_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_geofencing_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s1_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(10, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }

                            break;
                        //餘數
                        case 5:
                            if (excel_mode_flag == 2)               //T3~T4 下的餘數
                            {
                                merge_excel_mode_frame += s1_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s1_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(10, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 3)           //Dynamic下的餘數
                            {
                                merge_excel_mode_frame += s1_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s1_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(10, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 4)          //Geofencing下的餘數
                            {

                                merge_excel_mode_frame += s1_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 10, s1_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 10];
                                merge_cycle_time.PutValue(s1_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s1_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 10].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(10, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 10].SetStyle(title_merge_cycle_time_style);
                                }

                            }
                            break;
                    }
                }
                /*
                 * s1 merge cycle sheet
                 */

                /*
                 * Merge Excel
                 */

                wb.Save(s1_directory_fileexcel, Excel.SaveFormat.Xlsx);
                /**
                 * GNSS、MDA、Setting sheet
                 */

            }

            //Save s2 excel file
            if (s2chkb.Checked == true)
            {
                int chkfile = 0;
                if (s0chkb.Checked == true && s1chkb.Checked == true && s3chkb.Checked == true)
                {
                    if (s2_t0 == s0_t0 && s2_t0 == s1_t0 && s2_t0 == s3_t0 && s2_t1 == s0_t1 && s2_t1 == s1_t1 && s2_t1 == s3_t1 && s2_t2 == s0_t2 && s2_t2 == s1_t2 && s2_t2 == s3_t2 && s2_t3 == s0_t3 && s2_t3 == s1_t3 && s2_t3 == s3_t3 && s2_t4 == s0_t4 && s2_t4 == s1_t4 && s2_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == true && s1chkb.Checked == true && s3chkb.Checked == false)
                {
                    if (s2_t0 == s0_t0 && s2_t0 == s1_t0 && s2_t1 == s0_t1 && s2_t1 == s1_t1 && s2_t2 == s0_t2 && s2_t2 == s1_t2 && s2_t3 == s0_t3 && s2_t3 == s1_t3 && s2_t4 == s0_t4 && s2_t4 == s1_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == true && s1chkb.Checked == false && s3chkb.Checked == true)
                {
                    if (s2_t0 == s0_t0 && s2_t0 == s3_t0 && s2_t1 == s0_t1 && s2_t1 == s3_t1 && s2_t2 == s0_t2 && s2_t2 == s3_t2 && s2_t3 == s0_t3 && s2_t3 == s3_t3 && s2_t4 == s0_t4 && s2_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s1chkb.Checked == true && s3chkb.Checked == true)
                {
                    if (s2_t0 == s1_t0 && s2_t0 == s3_t0 && s2_t1 == s1_t1 && s2_t1 == s3_t1 && s2_t2 == s1_t2 && s2_t2 == s3_t2 && s2_t3 == s1_t3 && s2_t3 == s3_t3 && s2_t4 == s1_t4 && s2_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == true && s1chkb.Checked == false && s3chkb.Checked == false)
                {
                    if (s2_t0 == s0_t0 && s2_t1 == s0_t1 && s2_t2 == s0_t2 && s2_t3 == s0_t3 && s2_t4 == s0_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s1chkb.Checked == true && s3chkb.Checked == false)
                {
                    if (s2_t0 == s1_t0 && s2_t1 == s1_t1 && s2_t2 == s1_t2 && s2_t3 == s1_t3 && s2_t4 == s1_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s1chkb.Checked == false && s3chkb.Checked == true)
                {
                    if (s2_t0 == s3_t0 && s2_t1 == s3_t1 && s2_t2 == s3_t2 && s2_t3 == s3_t3 && s2_t4 == s3_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s1chkb.Checked == false && s3chkb.Checked == false)
                {
                    chkfile = 1;
                }

                if (Directory.Exists(s2_directory_file))
                {

                }
                else
                {
                    Directory.CreateDirectory(s2_directory_file);
                }

                int cmd_count;

                Excel.Workbook wb = new Excel.Workbook();
                Excel.Worksheet sheet = wb.Worksheets[0];

                sheet.Name = "Locus Row Data";
                //合併"指令代碼"、"亂數組合"的儲存格
                Excel.Cells title_Instruction_code_format = sheet.Cells;
                Excel.Cells title_Ramdom_combinations_format = sheet.Cells;
                Excel.Cells Free_run_time = sheet.Cells;
                title_Instruction_code_format.Merge(0, 0, 1, 2);
                title_Ramdom_combinations_format.Merge(0, 6, 1, 5);
                Free_run_time.Merge(1, 16, s2_free_run_time, 1);

                /*
                 * s2 cycle sheet
                 */
                excel_mode_flag = 0;
                excel_mode_frame = 0;
                for (int excel_cycle_count = 0; excel_cycle_count <= s2_cycle; excel_cycle_count++)
                {
                    Excel.Cells cycle_time_frame = sheet.Cells;
                    Excel.Cell cycle_time;
                    switch (s2_cycle_mode_judge[excel_cycle_count])
                    {
                        //T3~T4
                        case 2:
                            if (excel_mode_flag != 3 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)               //t3_t4的first cycle time
                                {
                                    excel_mode_frame = s2_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s2_t3_t4_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 2;
                                }
                                else if (excel_mode_flag == 2 && s2_cycle_add[excel_cycle_count] != 0)               //如果t3_t4的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s2_t3_t4_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s2_t3_t4_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }

                            }
                            else if (excel_mode_flag == 3 && s2_cycle_add[excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                excel_mode_frame += s2_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s2_t3_t4_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            else if (excel_mode_flag == 4 && s2_cycle_add[excel_cycle_count] != 0)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                excel_mode_frame += s2_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s2_t3_t4_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            break;

                        //Dynamic
                        case 3:
                            if (excel_mode_flag != 2 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)            //如果Dynamic的first cycle time
                                {
                                    excel_mode_frame = s2_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s2_dynamic_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 3;
                                }
                                else if (excel_mode_flag == 3 && s2_cycle_add[excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s2_dynamic_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s2_dynamic_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s2_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s2_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s2_dynamic_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            else if (excel_mode_flag == 4 && s2_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s2_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s2_dynamic_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (excel_mode_flag != 2 && excel_mode_flag != 3)
                            {
                                if (excel_mode_flag == 0)            //如果Geofencing的first cycle time
                                {
                                    excel_mode_frame = s2_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s2_geofencing_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 4;
                                }
                                else if (excel_mode_flag == 4 && s2_cycle_add[excel_cycle_count] != 0)            //如果Geofencing的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s2_geofencing_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s2_geofencing_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s2_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s2_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s2_geofencing_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }
                            else if (excel_mode_flag == 3 && s2_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s2_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s2_geofencing_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s2_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }

                            break;
                        //餘數
                        case 5:
                            if (excel_mode_flag == 2)               //T3~T4 下的餘數
                            {
                                excel_mode_frame += s2_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s2_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s2_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 3)           //Dynamic下的餘數
                            {
                                excel_mode_frame += s2_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s2_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s2_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 4)          //Geofencing下的餘數
                            {

                                excel_mode_frame += s2_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s2_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s2_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s2_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                            }
                            break;
                    }
                }
                /*
                 * s2 cycle sheet
                 */

                //設定title
                Excel.Cell title_Instruction_code = sheet.Cells["A1"];
                Excel.Cell title_Item = sheet.Cells["C1"];
                Excel.Cell title_time_ymd = sheet.Cells["D1"];
                Excel.Cell title_time_hms = sheet.Cells["E1"];
                Excel.Cell title_Fix = sheet.Cells["F1"];
                Excel.Cell title_Random_combinations = sheet.Cells["G1"];
                Excel.Cell title_sat = sheet.Cells["L1"];
                Excel.Cell title_mode = sheet.Cells["M1"];
                Excel.Cell title_interval = sheet.Cells["N1"];
                //DeepSkyBlue : 0, Blue : 1, Orange : 2, LightSeaGreen : 3
                Excel.Cell color_DeepSkyBlue = sheet.Cells["S2"];
                Excel.Cell DeepSkyBlue_explanation = sheet.Cells["T2"];
                Excel.Cell color_Blue = sheet.Cells["S3"];
                Excel.Cell Blue_explanation = sheet.Cells["T3"];
                Excel.Cell color_Orange = sheet.Cells["S4"];
                Excel.Cell Orange_explanation = sheet.Cells["T4"];
                Excel.Cell color_LightSeaGreen = sheet.Cells["S5"];
                Excel.Cell LightSeaGreen_explanation = sheet.Cells["T5"];
                Excel.Cell HighEffcien = sheet.Cells["S6"];
                //誤差值判定Title、組數
                Excel.Cell title_interval_judge = sheet.Cells["P1"];
                Excel.Cell title_cycle = sheet.Cells["Q1"];
                Excel.Cell cycle_free_run = sheet.Cells["Q2"];
                //T0~T4 title
                Excel.Cell title_T0 = sheet.Cells["S10"];
                Excel.Cell title_T1 = sheet.Cells["S11"];
                Excel.Cell title_T2 = sheet.Cells["S12"];
                Excel.Cell title_T3 = sheet.Cells["S13"];
                Excel.Cell title_T4 = sheet.Cells["S14"];
                Excel.Cell title_T0_value = sheet.Cells["T10"];
                Excel.Cell title_T1_value = sheet.Cells["T11"];
                Excel.Cell title_T2_value = sheet.Cells["T12"];
                Excel.Cell title_T3_value = sheet.Cells["T13"];
                Excel.Cell title_T4_value = sheet.Cells["T14"];
                //時間換算、組數換算
                Excel.Cell enter_num = sheet.Cells["V10"];
                Excel.Cell title_time_cal = sheet.Cells["V11"];
                Excel.Cell title_cycle_cal = sheet.Cells["V12"];
                Excel.Cell title_time_cal_value = sheet.Cells["W11"];
                Excel.Cell title_cycle_cal_value = sheet.Cells["W12"];

                //寫入title
                title_Instruction_code.PutValue("指令代碼");
                title_Item.PutValue("Item");
                title_time_ymd.PutValue("定位日期(年_月_日)");
                title_time_hms.PutValue("定位日期(時_分_秒)");
                title_Fix.PutValue("Fix-Type");
                title_Random_combinations.PutValue("亂數組合");
                title_sat.PutValue("使用的衛星數");
                title_mode.PutValue("Mode");
                title_interval.PutValue("Interval");
                DeepSkyBlue_explanation.PutValue("T0 ~ T1");
                Blue_explanation.PutValue("T2 ~ T4");
                Orange_explanation.PutValue("Dynamic");
                LightSeaGreen_explanation.PutValue("Geofencing");
                HighEffcien.PutValue("High effcien");
                //誤差值判定Title、組數
                title_cycle.PutValue("打點資訊");
                cycle_free_run.PutValue(s2_free_run_time.ToString() + "組");
                //T0~T4 title
                title_T0.PutValue("T0");
                title_T1.PutValue("T1");
                title_T2.PutValue("T2");
                title_T3.PutValue("T3");
                title_T4.PutValue("T4");
                title_T0_value.PutValue(s2_t0.ToString());
                title_T1_value.PutValue(s2_t1.ToString());
                title_T2_value.PutValue(s2_t2.ToString());
                title_T3_value.PutValue(s2_t3.ToString());
                title_T4_value.PutValue(s2_t4.ToString());
                //時間換算、組數換算
                enter_num.PutValue("請輸入換算數字 =>");
                title_time_cal.PutValue("時間換算");
                title_cycle_cal.PutValue("組數換算");
                sheet.Cells.SetColumnWidth(21, 17);
                title_time_cal_value.Formula = "=(W10*3600)/" + s2_t1.ToString();
                title_cycle_cal_value.Formula = "W11/(" + s2_t2.ToString() + "+" + s2_t3.ToString() + ")";

                Excel.Style color_DeepSkyBlue_style = sheet.Cells["S2"].GetStyle();
                color_DeepSkyBlue_style.ForegroundColor = Color.FromArgb(0, 191, 255);
                color_DeepSkyBlue_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S2"].SetStyle(color_DeepSkyBlue_style);
                Excel.Style color_Blue_style = sheet.Cells["S3"].GetStyle();
                color_Blue_style.ForegroundColor = Color.Blue;
                color_Blue_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S3"].SetStyle(color_Blue_style);
                Excel.Style color_Orange_style = sheet.Cells["S4"].GetStyle();
                color_Orange_style.ForegroundColor = Color.Orange;
                color_Orange_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S4"].SetStyle(color_Orange_style);
                Excel.Style color_LightSeaGreen_style = sheet.Cells["S5"].GetStyle();
                color_LightSeaGreen_style.ForegroundColor = Color.FromArgb(32, 178, 170);
                color_LightSeaGreen_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S5"].SetStyle(color_LightSeaGreen_style);
                Excel.Style HighEffcien_style = sheet.Cells["S6"].GetStyle();
                HighEffcien_style.ForegroundColor = Color.FromArgb(169, 208, 142);
                HighEffcien_style.Font.Color = Color.Red;
                HighEffcien_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S6"].SetStyle(HighEffcien_style);

                for (cmd_count = 1; cmd_count < convert_count2; cmd_count++)
                {
                    //宣告欄位
                    Excel.Cell Excel2_Instruction_code_cmd = sheet.Cells[cmd_count, 0];
                    Excel.Cell Excel2_Instruction_code_cmd_two = sheet.Cells[cmd_count, 1];
                    Excel.Cell Excel2_item = sheet.Cells[cmd_count, 2];
                    Excel.Cell Excel2_ymd = sheet.Cells[cmd_count, 3];
                    Excel.Cell Excel2_hms = sheet.Cells[cmd_count, 4];
                    Excel.Cell Excel2_fix = sheet.Cells[cmd_count, 5];
                    Excel.Cell Excel2_ramdom_first = sheet.Cells[cmd_count, 6];
                    Excel.Cell Excel2_ramdom_second = sheet.Cells[cmd_count, 7];
                    Excel.Cell Excel2_ramdom_third = sheet.Cells[cmd_count, 8];
                    Excel.Cell Excel2_ramdom_forth = sheet.Cells[cmd_count, 9];
                    Excel.Cell Excel2_ramdom_fiveth = sheet.Cells[cmd_count, 10];
                    Excel.Cell Excel2_sat = sheet.Cells[cmd_count, 11];
                    Excel.Cell Excel2_mode = sheet.Cells[cmd_count, 12];
                    //存放欄位
                    Excel2_Instruction_code_cmd.PutValue(s2_Instruction_code_cmd[cmd_count]);
                    Excel2_Instruction_code_cmd_two.PutValue(Int32.Parse(s2_Instruction_code_cmd_two[cmd_count]));
                    Excel2_item.PutValue(Int32.Parse(s2_Item[cmd_count]));
                    Excel2_ymd.PutValue(s2_ymd[cmd_count]);
                    Excel2_hms.PutValue(s2_hms[cmd_count]);
                    Excel2_fix.PutValue(s2_fix[cmd_count]);
                    Excel2_ramdom_first.PutValue(s2_ramdom_first[cmd_count]);
                    Excel2_ramdom_second.PutValue(s2_ramdom_second[cmd_count]);
                    Excel2_ramdom_third.PutValue(s2_ramdom_third[cmd_count]);
                    Excel2_ramdom_forth.PutValue(s2_ramdom_forth[cmd_count]);
                    Excel2_ramdom_fiveth.PutValue(s2_ramdom_fiveth[cmd_count]);
                    Excel2_sat.PutValue(s2_sat[cmd_count]);
                    Excel2_mode.PutValue(s2_mode[cmd_count]);
                    //宣告style調整格式
                    Excel.Style Excel2_Instruction_code_cmd_style = sheet.Cells[cmd_count, 0].GetStyle();
                    Excel.Style Excel2_Instruction_code_cmd_two_style = sheet.Cells[cmd_count, 1].GetStyle();
                    Excel.Style Excel2_item_style = sheet.Cells[cmd_count, 2].GetStyle();
                    Excel.Style Excel2_ymd_style = sheet.Cells[cmd_count, 3].GetStyle();
                    Excel.Style Excel2_hms_style = sheet.Cells[cmd_count, 4].GetStyle();
                    Excel.Style Excel2_fix_style = sheet.Cells[cmd_count, 5].GetStyle();
                    Excel.Style Excel2_ramdom_first_style = sheet.Cells[cmd_count, 6].GetStyle();
                    Excel.Style Excel2_ramdom_second_style = sheet.Cells[cmd_count, 7].GetStyle();
                    Excel.Style Excel2_ramdom_third_style = sheet.Cells[cmd_count, 8].GetStyle();
                    Excel.Style Excel2_ramdom_forth_style = sheet.Cells[cmd_count, 9].GetStyle();
                    Excel.Style Excel2_ramdom_fiveth_style = sheet.Cells[cmd_count, 10].GetStyle();
                    Excel.Style Excel2_sat_style = sheet.Cells[cmd_count, 11].GetStyle();
                    Excel.Style Excel2_mode_style = sheet.Cells[cmd_count, 12].GetStyle();

                    //Set color
                    //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4
                    switch (s2_mode_font_color[cmd_count])
                    {
                        case 0:
                            break;
                        case 1:
                            Excel2_Instruction_code_cmd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_Instruction_code_cmd_two_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_item_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_ymd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_hms_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_fix_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_ramdom_first_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_ramdom_second_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_ramdom_third_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_ramdom_forth_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_ramdom_fiveth_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_sat_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel2_mode_style.Font.Color = Color.FromArgb(0, 191, 255);
                            break;
                        case 2:
                            Excel2_Instruction_code_cmd_style.Font.Color = Color.Blue;
                            Excel2_Instruction_code_cmd_two_style.Font.Color = Color.Blue;
                            Excel2_item_style.Font.Color = Color.Blue;
                            Excel2_ymd_style.Font.Color = Color.Blue;
                            Excel2_hms_style.Font.Color = Color.Blue;
                            Excel2_fix_style.Font.Color = Color.Blue;
                            Excel2_ramdom_first_style.Font.Color = Color.Blue;
                            Excel2_ramdom_second_style.Font.Color = Color.Blue;
                            Excel2_ramdom_third_style.Font.Color = Color.Blue;
                            Excel2_ramdom_forth_style.Font.Color = Color.Blue;
                            Excel2_ramdom_fiveth_style.Font.Color = Color.Blue;
                            Excel2_sat_style.Font.Color = Color.Blue;
                            Excel2_mode_style.Font.Color = Color.Blue;
                            break;
                        case 3:
                            Excel2_Instruction_code_cmd_style.Font.Color = Color.Orange;
                            Excel2_Instruction_code_cmd_two_style.Font.Color = Color.Orange;
                            Excel2_item_style.Font.Color = Color.Orange;
                            Excel2_ymd_style.Font.Color = Color.Orange;
                            Excel2_hms_style.Font.Color = Color.Orange;
                            Excel2_fix_style.Font.Color = Color.Orange;
                            Excel2_ramdom_first_style.Font.Color = Color.Orange;
                            Excel2_ramdom_second_style.Font.Color = Color.Orange;
                            Excel2_ramdom_third_style.Font.Color = Color.Orange;
                            Excel2_ramdom_forth_style.Font.Color = Color.Orange;
                            Excel2_ramdom_fiveth_style.Font.Color = Color.Orange;
                            Excel2_sat_style.Font.Color = Color.Orange;
                            Excel2_mode_style.Font.Color = Color.Orange;
                            break;
                        case 4:
                            Excel2_Instruction_code_cmd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_Instruction_code_cmd_two_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_item_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_ymd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_hms_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_fix_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_ramdom_first_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_ramdom_second_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_ramdom_third_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_ramdom_forth_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_ramdom_fiveth_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_sat_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel2_mode_style.Font.Color = Color.FromArgb(32, 178, 170);
                            break;
                    }

                    //字體置中
                    Excel2_Instruction_code_cmd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_Instruction_code_cmd_two_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_fix_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_ramdom_first_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_ramdom_second_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_ramdom_third_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_ramdom_forth_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_ramdom_fiveth_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_sat_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel2_mode_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    //style set
                    sheet.Cells[cmd_count, 0].SetStyle(Excel2_Instruction_code_cmd_style);
                    sheet.Cells[cmd_count, 1].SetStyle(Excel2_Instruction_code_cmd_two_style);
                    sheet.Cells[cmd_count, 2].SetStyle(Excel2_item_style);
                    sheet.Cells[cmd_count, 3].SetStyle(Excel2_ymd_style);
                    sheet.Cells[cmd_count, 4].SetStyle(Excel2_hms_style);
                    sheet.Cells[cmd_count, 5].SetStyle(Excel2_fix_style);
                    sheet.Cells[cmd_count, 6].SetStyle(Excel2_ramdom_first_style);
                    sheet.Cells[cmd_count, 7].SetStyle(Excel2_ramdom_second_style);
                    sheet.Cells[cmd_count, 8].SetStyle(Excel2_ramdom_third_style);
                    sheet.Cells[cmd_count, 9].SetStyle(Excel2_ramdom_forth_style);
                    sheet.Cells[cmd_count, 10].SetStyle(Excel2_ramdom_fiveth_style);
                    sheet.Cells[cmd_count, 11].SetStyle(Excel2_sat_style);
                    sheet.Cells[cmd_count, 12].SetStyle(Excel2_mode_style);

                    if (cmd_count > 1)
                    {
                        Excel.Cell Excel2_interval = sheet.Cells[cmd_count, 13];
                        Excel.Cell Excel2_interval_judge = sheet.Cells[cmd_count, 15];
                        Excel2_interval.PutValue(s2_interval[cmd_count]);
                        Excel2_interval_judge.PutValue(s2_interval_judge[cmd_count]);
                        Excel.Style Excel2_interval_style = sheet.Cells[cmd_count, 13].GetStyle();
                        Excel.Style Excel2_interval_judge_style = sheet.Cells[cmd_count, 15].GetStyle();
                        //Set Interval Font color
                        //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4, Red : 5
                        switch (s2_interval_font_color[cmd_count])
                        {
                            case 0:
                                break;
                            case 1:
                                Excel2_interval_style.Font.Color = Color.FromArgb(0, 191, 255);
                                break;
                            case 2:
                                Excel2_interval_style.Font.Color = Color.Blue;
                                break;
                            case 3:
                                Excel2_interval_style.Font.Color = Color.Orange;
                                break;
                            case 4:
                                Excel2_interval_style.Font.Color = Color.FromArgb(32, 178, 170);
                                break;
                            case 5:
                                Excel2_interval_style.Font.Color = Color.Red;
                                s2_interval_judge_flag = 1;
                                break;
                        }
                        Excel2_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        Excel2_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        sheet.Cells[cmd_count, 13].SetStyle(Excel2_interval_style);
                        sheet.Cells[cmd_count, 15].SetStyle(Excel2_interval_judge_style);
                    }

                }

                //指令代碼title格式調整
                Excel.Style title_Instruction_code_style = sheet.Cells["A1"].GetStyle();
                Excel.Style title_Instruction_code_style_b2 = sheet.Cells["B1"].GetStyle();
                Excel.Font title_Instruction_code_font = title_Instruction_code_style.Font;
                title_Instruction_code_style.ForegroundColor = Color.LightGray;
                title_Instruction_code_style.Pattern = Excel.BackgroundType.Solid;
                title_Instruction_code_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Instruction_code_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Instruction_code_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Instruction_code_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Instruction_code_font.IsBold = true;
                sheet.Cells.SetColumnWidth(0, 15);
                sheet.Cells["A1"].SetStyle(title_Instruction_code_style);
                sheet.Cells["B1"].SetStyle(title_Instruction_code_style_b2);

                //Item title格式調整
                Excel.Style title_Item_style = sheet.Cells["C1"].GetStyle();
                Excel.Font title_Item_font = title_Item_style.Font;
                title_Item_style.ForegroundColor = Color.LightGray;
                title_Item_style.Pattern = Excel.BackgroundType.Solid;
                title_Item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Item_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Item_font.IsBold = true;
                sheet.Cells["C1"].SetStyle(title_Item_style);

                //time ymd格式調整
                Excel.Style title_time_ymd_style = sheet.Cells["D1"].GetStyle();
                Excel.Font title_time_ymd_font = title_time_ymd_style.Font;
                title_time_ymd_style.ForegroundColor = Color.LightGray;
                title_time_ymd_style.Pattern = Excel.BackgroundType.Solid;
                title_time_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_time_ymd_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_time_ymd_font.IsBold = true;
                sheet.Cells.SetColumnWidth(3, 35);
                sheet.Cells["D1"].SetStyle(title_time_ymd_style);

                //time hms格式調整
                Excel.Style title_time_hms_style = sheet.Cells["E1"].GetStyle();
                Excel.Font title_time_hms_font = title_time_hms_style.Font;
                title_time_hms_style.ForegroundColor = Color.LightGray;
                title_time_hms_style.Pattern = Excel.BackgroundType.Solid;
                title_time_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_time_hms_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_time_hms_font.IsBold = true;
                sheet.Cells["E1"].SetStyle(title_time_hms_style);
                sheet.Cells.SetColumnWidth(4, 35);

                //Fix Type格式調整
                Excel.Style title_fix_type_style = sheet.Cells["F1"].GetStyle();
                Excel.Font title_fix_type_font = title_time_hms_style.Font;
                title_fix_type_style.ForegroundColor = Color.LightGray;
                title_fix_type_style.Pattern = Excel.BackgroundType.Solid;
                title_fix_type_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_fix_type_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_fix_type_font.IsBold = true;
                sheet.Cells["F1"].SetStyle(title_fix_type_style);

                //Ramdom combinations格式調整
                Excel.Style title_Ramdom_combinations_style = sheet.Cells["G1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b2 = sheet.Cells["H1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b3 = sheet.Cells["I1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b4 = sheet.Cells["J1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b5 = sheet.Cells["K1"].GetStyle();
                Excel.Font title_Ramdom_combinations_font = title_Ramdom_combinations_style.Font;
                title_Ramdom_combinations_style.ForegroundColor = Color.LightGray;
                title_Ramdom_combinations_style.Pattern = Excel.BackgroundType.Solid;
                title_Ramdom_combinations_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_font.IsBold = true;
                sheet.Cells.SetColumnWidth(6, 10);
                sheet.Cells.SetColumnWidth(7, 10);
                sheet.Cells["G1"].SetStyle(title_Ramdom_combinations_style);
                sheet.Cells["H1"].SetStyle(title_Ramdom_combinations_style_b2);
                sheet.Cells["I1"].SetStyle(title_Ramdom_combinations_style_b3);
                sheet.Cells["J1"].SetStyle(title_Ramdom_combinations_style_b4);
                sheet.Cells["K1"].SetStyle(title_Ramdom_combinations_style_b5);

                //SAT格式調整
                Excel.Style title_sat_style = sheet.Cells["L1"].GetStyle();
                Excel.Font title_sat_font = title_sat_style.Font;
                title_sat_style.ForegroundColor = Color.LightGray;
                title_sat_style.Pattern = Excel.BackgroundType.Solid;
                title_sat_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_sat_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_sat_font.IsBold = true;
                sheet.Cells.SetColumnWidth(11, 20);
                sheet.Cells["L1"].SetStyle(title_sat_style);

                //Mode格式調整
                Excel.Style title_mode_style = sheet.Cells["M1"].GetStyle();
                Excel.Font title_mode_font = title_mode_style.Font;
                title_mode_style.ForegroundColor = Color.LightGray;
                title_mode_style.Pattern = Excel.BackgroundType.Solid;
                title_mode_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_mode_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_mode_font.IsBold = true;
                sheet.Cells["M1"].SetStyle(title_mode_style);

                //Interval格式調整
                Excel.Style title_interval_style = sheet.Cells["N1"].GetStyle();
                Excel.Font title_interval_font = title_interval_style.Font;
                title_interval_style.ForegroundColor = Color.LightGray;
                title_interval_style.Pattern = Excel.BackgroundType.Solid;
                title_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_interval_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_interval_font.IsBold = true;
                sheet.Cells["N1"].SetStyle(title_interval_style);

                //Interval_judge格式調整
                Excel.Style title_interval_judge_style = sheet.Cells["P1"].GetStyle();
                Excel.Font title_interval_judge_font = title_interval_judge_style.Font;
                title_interval_judge_style.ForegroundColor = Color.LightGray;
                title_interval_judge_style.Pattern = Excel.BackgroundType.Solid;
                title_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_interval_judge_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_interval_judge_font.IsBold = true;
                sheet.Cells.SetColumnWidth(15, 15);
                if (s2_interval_judge_flag == 1)
                {
                    title_interval_judge.PutValue("誤差值判定:False");
                    title_interval_judge_style.Font.Color = Color.Red;
                    s2_interval_judge_flag = 0;
                }
                else if (s2_interval_judge_flag == 0)
                {
                    title_interval_judge.PutValue("誤差值判定:OK");
                    title_interval_judge_style.Font.Color = Color.Green;
                }
                sheet.Cells["P1"].SetStyle(title_interval_judge_style);

                //Cycle格式調整
                Excel.Style title_cycle_style = sheet.Cells["Q1"].GetStyle();
                Excel.Font title_cycle_font = title_cycle_style.Font;
                title_cycle_style.ForegroundColor = Color.LightGray;
                title_cycle_style.Pattern = Excel.BackgroundType.Solid;
                title_cycle_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_cycle_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                sheet.Cells.SetColumnWidth(16, 10);
                title_cycle_font.IsBold = true;
                sheet.Cells["Q1"].SetStyle(title_cycle_style);

                //Cycle Free run 格式調整
                for (int free_run_border = 1; free_run_border <= s2_free_run_time; free_run_border++)
                {
                    Excel.Style title_cycle_free_run_style = sheet.Cells[free_run_border, 16].GetStyle();
                    Excel.Font title_cycle_free_run_font = title_cycle_free_run_style.Font;
                    title_cycle_free_run_style.ForegroundColor = Color.LightGray;
                    title_cycle_free_run_style.Pattern = Excel.BackgroundType.Solid;
                    title_cycle_free_run_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    title_cycle_free_run_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                    title_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    sheet.Cells.SetColumnWidth(16, 10);
                    title_cycle_free_run_font.IsBold = true;
                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_free_run_style);
                }

                /**
                 * GNSS、MDA、Setting sheet
                 */
                int index = wb.Worksheets.Add();    //新增一個GNSS sheet
                Excel.Worksheet sheet_mda = wb.Worksheets[index];

                sheet_mda.Name = "GNSS";
                s2_gnss_cell_flag = 0;
                s2_gnss_item = 0;
                s2_gps_prn_count = 1;
                s2_gps_snr_count = 2;
                s2_glo_prn_count = 3;
                s2_glo_snr_count = 4;
                s2_gal_prn_count = 5;
                s2_gal_snr_count = 6;
                s2_bei_prn_count = 7;
                s2_bei_snr_count = 8;
                s2_qzs_prn_count = 9;
                s2_qzs_snr_count = 10;
                for (int GNSS_item_count = 1; GNSS_item_count < convert_count2; GNSS_item_count++)
                {
                    if (s2_gnss_cell_flag == 0)
                    {
                        Excel.Cell excel_gnss_item = sheet_mda.Cells[s2_gnss_item, 0];
                        Excel.Cell excel_gps_prn = sheet_mda.Cells[s2_gps_prn_count, 0];
                        Excel.Cell excel_gps_snr = sheet_mda.Cells[s2_gps_snr_count, 0];
                        Excel.Cell excel_glo_prn = sheet_mda.Cells[s2_glo_prn_count, 0];
                        Excel.Cell excel_glo_snr = sheet_mda.Cells[s2_glo_snr_count, 0];
                        Excel.Cell excel_gal_prn = sheet_mda.Cells[s2_gal_prn_count, 0];
                        Excel.Cell excel_gal_snr = sheet_mda.Cells[s2_gal_snr_count, 0];
                        Excel.Cell excel_bei_prn = sheet_mda.Cells[s2_bei_prn_count, 0];
                        Excel.Cell excel_bei_snr = sheet_mda.Cells[s2_bei_snr_count, 0];
                        Excel.Cell excel_qzs_prn = sheet_mda.Cells[s2_qzs_prn_count, 0];
                        Excel.Cell excel_qzs_snr = sheet_mda.Cells[s2_qzs_snr_count, 0];

                        excel_gnss_item.PutValue(S2_ITEM[GNSS_item_count]);
                        excel_gps_prn.PutValue(S2_GPS_PRN[GNSS_item_count]);
                        excel_gps_snr.PutValue(S2_GPS_SNR[GNSS_item_count]);
                        excel_glo_prn.PutValue(S2_GLO_PRN[GNSS_item_count]);
                        excel_glo_snr.PutValue(S2_GLO_SNR[GNSS_item_count]);
                        excel_gal_prn.PutValue(S2_GAL_PRN[GNSS_item_count]);
                        excel_gal_snr.PutValue(S2_GAL_SNR[GNSS_item_count]);
                        excel_bei_prn.PutValue(S2_BEI_PRN[GNSS_item_count]);
                        excel_bei_snr.PutValue(S2_BEI_SNR[GNSS_item_count]);
                        excel_qzs_prn.PutValue(S2_QZS_PRN[GNSS_item_count]);
                        excel_qzs_snr.PutValue(S2_QZS_SNR[GNSS_item_count]);

                        Excel.Style excel_gnss_item_STYLE = sheet_mda.Cells[s2_gnss_item, 0].GetStyle();
                        Excel.Font excel_gnss_item_FONT = excel_gnss_item_STYLE.Font;
                        excel_gnss_item_FONT.IsBold = true;
                        sheet_mda.Cells[s2_gnss_item, 0].SetStyle(excel_gnss_item_STYLE);

                        s2_gnss_cell_flag++;
                    }
                    else if (s2_gnss_cell_flag > 0)
                    {
                        s2_gnss_item = s2_gnss_item + 11;
                        s2_gps_prn_count = s2_gps_prn_count + 11;
                        s2_gps_snr_count = s2_gps_snr_count + 11;
                        s2_glo_prn_count = s2_glo_prn_count + 11;
                        s2_glo_snr_count = s2_glo_snr_count + 11;
                        s2_gal_prn_count = s2_gal_prn_count + 11;
                        s2_gal_snr_count = s2_gal_snr_count + 11;
                        s2_bei_prn_count = s2_bei_prn_count + 11;
                        s2_bei_snr_count = s2_bei_snr_count + 11;
                        s2_qzs_prn_count = s2_qzs_prn_count + 11;
                        s2_qzs_snr_count = s2_qzs_snr_count + 11;

                        Excel.Cell excel_gnss_item = sheet_mda.Cells[s2_gnss_item, 0];
                        Excel.Cell excel_gps_prn = sheet_mda.Cells[s2_gps_prn_count, 0];
                        Excel.Cell excel_gps_snr = sheet_mda.Cells[s2_gps_snr_count, 0];
                        Excel.Cell excel_glo_prn = sheet_mda.Cells[s2_glo_prn_count, 0];
                        Excel.Cell excel_glo_snr = sheet_mda.Cells[s2_glo_snr_count, 0];
                        Excel.Cell excel_gal_prn = sheet_mda.Cells[s2_gal_prn_count, 0];
                        Excel.Cell excel_gal_snr = sheet_mda.Cells[s2_gal_snr_count, 0];
                        Excel.Cell excel_bei_prn = sheet_mda.Cells[s2_bei_prn_count, 0];
                        Excel.Cell excel_bei_snr = sheet_mda.Cells[s2_bei_snr_count, 0];
                        Excel.Cell excel_qzs_prn = sheet_mda.Cells[s2_qzs_prn_count, 0];
                        Excel.Cell excel_qzs_snr = sheet_mda.Cells[s2_qzs_snr_count, 0];

                        excel_gnss_item.PutValue(S2_ITEM[GNSS_item_count]);
                        excel_gps_prn.PutValue(S2_GPS_PRN[GNSS_item_count]);
                        excel_gps_snr.PutValue(S2_GPS_SNR[GNSS_item_count]);
                        excel_glo_prn.PutValue(S2_GLO_PRN[GNSS_item_count]);
                        excel_glo_snr.PutValue(S2_GLO_SNR[GNSS_item_count]);
                        excel_gal_prn.PutValue(S2_GAL_PRN[GNSS_item_count]);
                        excel_gal_snr.PutValue(S2_GAL_SNR[GNSS_item_count]);
                        excel_bei_prn.PutValue(S2_BEI_PRN[GNSS_item_count]);
                        excel_bei_snr.PutValue(S2_BEI_SNR[GNSS_item_count]);
                        excel_qzs_prn.PutValue(S2_QZS_PRN[GNSS_item_count]);
                        excel_qzs_snr.PutValue(S2_QZS_SNR[GNSS_item_count]);

                        Excel.Style excel_gnss_item_STYLE = sheet_mda.Cells[s2_gnss_item, 0].GetStyle();
                        Excel.Font excel_gnss_item_FONT = excel_gnss_item_STYLE.Font;
                        excel_gnss_item_FONT.IsBold = true;
                        sheet_mda.Cells[s2_gnss_item, 0].SetStyle(excel_gnss_item_STYLE);

                        s2_gnss_cell_flag++;
                    }

                }

                Excel.Cell gps_epo_enable = sheet_mda.Cells["F1"];
                Excel.Cell glo_epo_enable = sheet_mda.Cells["F2"];
                Excel.Cell gal_epo_enable = sheet_mda.Cells["F3"];
                Excel.Cell bei_epo_enable = sheet_mda.Cells["F4"];

                Excel.Cell TTFF_item = sheet_mda.Cells["F6"];
                Excel.Cell TTFF_USAGE_TIME = sheet_mda.Cells["F7"];
                Excel.Cell Analyze_UTC_ITEM = sheet_mda.Cells["F8"];
                Excel.Cell Analyze_UTC_TIME = sheet_mda.Cells["F9"];

                //[AVG:FIRST - PREVIOUS FIX]
                Excel.Cell AVG_FIRST_PREVIOUS_FIX = sheet_mda.Cells["F11"];
                Excel.Cell A2_Start_Stop_Total_item = sheet_mda.Cells["F23"];
                Excel.Cell A2_gps_sat_avg = sheet_mda.Cells["F24"];
                Excel.Cell A2_gps_snr_avg = sheet_mda.Cells["F25"];
                Excel.Cell A2_glo_sat_avg = sheet_mda.Cells["F26"];
                Excel.Cell A2_glo_snr_avg = sheet_mda.Cells["F27"];
                Excel.Cell A2_gal_sat_avg = sheet_mda.Cells["F28"];
                Excel.Cell A2_gal_snr_avg = sheet_mda.Cells["F29"];
                Excel.Cell A2_bei_sat_avg = sheet_mda.Cells["F30"];
                Excel.Cell A2_bei_snr_avg = sheet_mda.Cells["F31"];

                //[AVG:FIRST - FIX]
                Excel.Cell AVG_FIRST_FIX = sheet_mda.Cells["F22"];
                Excel.Cell A1_Start_Stop_Total_item = sheet_mda.Cells["F12"];
                Excel.Cell A1_gps_sat_avg = sheet_mda.Cells["F13"];
                Excel.Cell A1_gps_snr_avg = sheet_mda.Cells["F14"];
                Excel.Cell A1_glo_sat_avg = sheet_mda.Cells["F15"];
                Excel.Cell A1_glo_snr_avg = sheet_mda.Cells["F16"];
                Excel.Cell A1_gal_sat_avg = sheet_mda.Cells["F17"];
                Excel.Cell A1_gal_snr_avg = sheet_mda.Cells["F18"];
                Excel.Cell A1_bei_sat_avg = sheet_mda.Cells["F19"];
                Excel.Cell A1_bei_snr_avg = sheet_mda.Cells["F20"];

                //[AVG:FIX - LAST]
                Excel.Cell AVG_FIX_LAST = sheet_mda.Cells["F33"];
                Excel.Cell A3_Start_Stop_Total_item = sheet_mda.Cells["F34"];
                Excel.Cell A3_gps_sat_avg = sheet_mda.Cells["F35"];
                Excel.Cell A3_gps_snr_avg = sheet_mda.Cells["F36"];
                Excel.Cell A3_glo_sat_avg = sheet_mda.Cells["F37"];
                Excel.Cell A3_glo_snr_avg = sheet_mda.Cells["F38"];
                Excel.Cell A3_gal_sat_avg = sheet_mda.Cells["F39"];
                Excel.Cell A3_gal_snr_avg = sheet_mda.Cells["F40"];
                Excel.Cell A3_bei_sat_avg = sheet_mda.Cells["F41"];
                Excel.Cell A3_bei_snr_avg = sheet_mda.Cells["F42"];

                //[AVG:FIRST - LAST]
                Excel.Cell AVG_FIRST_LAST = sheet_mda.Cells["F44"];
                Excel.Cell A4_Start_Stop_Total_item = sheet_mda.Cells["F45"];
                Excel.Cell A4_gps_sat_avg = sheet_mda.Cells["F46"];
                Excel.Cell A4_gps_snr_avg = sheet_mda.Cells["F47"];
                Excel.Cell A4_glo_sat_avg = sheet_mda.Cells["F48"];
                Excel.Cell A4_glo_snr_avg = sheet_mda.Cells["F49"];
                Excel.Cell A4_gal_sat_avg = sheet_mda.Cells["F50"];
                Excel.Cell A4_gal_snr_avg = sheet_mda.Cells["F51"];
                Excel.Cell A4_bei_sat_avg = sheet_mda.Cells["F52"];
                Excel.Cell A4_bei_snr_avg = sheet_mda.Cells["F53"];

                gps_epo_enable.PutValue(S2_GNSS_EPO[0]);
                glo_epo_enable.PutValue(S2_GNSS_EPO[1]);
                gal_epo_enable.PutValue(S2_GNSS_EPO[2]);
                bei_epo_enable.PutValue(S2_GNSS_EPO[3]);

                TTFF_item.PutValue(s2_TTFF_item);
                TTFF_USAGE_TIME.PutValue(s2_TTFF_time);
                Analyze_UTC_ITEM.PutValue(s2_Analyze_UTC_item);
                Analyze_UTC_TIME.PutValue(s2_Analyze_UTC_time);

                AVG_FIRST_FIX.PutValue("[AVG:FIRST - FIX]");
                A2_Start_Stop_Total_item.PutValue(S2_Area1_2_4_startitem + ", " + S2_Area2_stopitem + ", " + S2_Area2_totalitem);
                A2_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S2_A2_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S2_A2_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S2_A2_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S2_A2_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S2_A2_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S2_A2_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S2_A2_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S2_A2_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIRST_PREVIOUS_FIX.PutValue("[AVG:FIRST - PREVIOUS FIX]");
                A1_Start_Stop_Total_item.PutValue(S2_Area1_2_4_startitem + ", " + S2_Area1_stopitem + ", " + S2_Area1_totalitem);
                A1_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S2_A1_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S2_A1_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S2_A1_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S2_A1_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S2_A1_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S2_A1_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S2_A1_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S2_A1_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIX_LAST.PutValue("[AVG:FIX - LAST]");
                A3_Start_Stop_Total_item.PutValue(S2_Area3_startitem + ", " + S2_Area3_stopitem + ", " + S2_Area3_totalitem);
                A3_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S2_A3_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S2_A3_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S2_A3_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S2_A3_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S2_A3_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S2_A3_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S2_A3_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S2_A3_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIRST_LAST.PutValue("[AVG:FIRST - LAST]");
                A4_Start_Stop_Total_item.PutValue(S2_Area1_2_4_startitem + ", " + S2_Area4_stopitem + ", " + S2_Area4_totalitem);
                A4_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S2_A4_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S2_A4_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S2_A4_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S2_A4_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S2_A4_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S2_A4_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S2_A4_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S2_A4_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                //MDA 格式調整
                sheet_mda.Cells.SetColumnWidth(0, 62);  //GNSS欄位寬度
                sheet_mda.Cells.SetColumnWidth(5, 50);  //MDA欄位寬度

                Excel.Style gps_epo_enable_STYLE = sheet_mda.Cells["F1"].GetStyle();
                Excel.Font gps_epo_enable_FONT = gps_epo_enable_STYLE.Font;
                gps_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F1"].SetStyle(gps_epo_enable_STYLE);

                Excel.Style glo_epo_enable_STYLE = sheet_mda.Cells["F2"].GetStyle();
                Excel.Font glo_epo_enable_FONT = glo_epo_enable_STYLE.Font;
                glo_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F2"].SetStyle(glo_epo_enable_STYLE);

                Excel.Style gal_epo_enable_STYLE = sheet_mda.Cells["F3"].GetStyle();
                Excel.Font gal_epo_enable_FONT = gal_epo_enable_STYLE.Font;
                gal_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F3"].SetStyle(gal_epo_enable_STYLE);

                Excel.Style bei_epo_enable_STYLE = sheet_mda.Cells["F4"].GetStyle();
                Excel.Font bei_epo_enable_FONT = bei_epo_enable_STYLE.Font;
                bei_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F4"].SetStyle(bei_epo_enable_STYLE);

                Excel.Style TTFF_item_STYLE = sheet_mda.Cells["F6"].GetStyle();
                Excel.Font TTFF_item_FONT = TTFF_item_STYLE.Font;
                TTFF_item_FONT.IsBold = true;
                sheet_mda.Cells["F6"].SetStyle(TTFF_item_STYLE);

                Excel.Style TTFF_USAGE_TIME_STYLE = sheet_mda.Cells["F7"].GetStyle();
                Excel.Font TTFF_USAGE_TIME_FONT = TTFF_USAGE_TIME_STYLE.Font;
                TTFF_USAGE_TIME_FONT.IsBold = true;
                sheet_mda.Cells["F7"].SetStyle(TTFF_USAGE_TIME_STYLE);

                Excel.Style Analyze_UTC_ITEM_STYLE = sheet_mda.Cells["F8"].GetStyle();
                Excel.Font Analyze_UTC_ITEM_FONT = Analyze_UTC_ITEM_STYLE.Font;
                Analyze_UTC_ITEM_FONT.IsBold = true;
                sheet_mda.Cells["F8"].SetStyle(Analyze_UTC_ITEM_STYLE);

                Excel.Style Analyze_UTC_TIME_STYLE = sheet_mda.Cells["F9"].GetStyle();
                Excel.Font Analyze_UTC_TIME_FONT = Analyze_UTC_TIME_STYLE.Font;
                Analyze_UTC_TIME_FONT.IsBold = true;
                sheet_mda.Cells["F9"].SetStyle(Analyze_UTC_TIME_STYLE);

                Excel.Style AVG_FIRST_FIX_STYLE = sheet_mda.Cells["F11"].GetStyle();
                Excel.Font AVG_FIRST_FIX_FONT = AVG_FIRST_FIX_STYLE.Font;
                AVG_FIRST_FIX_FONT.IsBold = true;
                sheet_mda.Cells["F11"].SetStyle(AVG_FIRST_FIX_STYLE);

                Excel.Style AVG_FIRST_PREVIOUS_FIX_STYLE = sheet_mda.Cells["F22"].GetStyle();
                Excel.Font AVG_FIRST_PREVIOUS_FIX_FONT = AVG_FIRST_PREVIOUS_FIX_STYLE.Font;
                AVG_FIRST_PREVIOUS_FIX_FONT.IsBold = true;
                sheet_mda.Cells["F22"].SetStyle(AVG_FIRST_PREVIOUS_FIX_STYLE);

                Excel.Style AVG_FIX_LAST_STYLE = sheet_mda.Cells["F3"].GetStyle();
                Excel.Font AVG_FIX_LAST_FONT = AVG_FIX_LAST_STYLE.Font;
                AVG_FIX_LAST_FONT.IsBold = true;
                sheet_mda.Cells["F33"].SetStyle(AVG_FIX_LAST_STYLE);

                Excel.Style AVG_FIRST_LAST_STYLE = sheet_mda.Cells["F44"].GetStyle();
                Excel.Font AVG_FIRST_LAST_FONT = AVG_FIRST_LAST_STYLE.Font;
                AVG_FIRST_LAST_FONT.IsBold = true;
                sheet_mda.Cells["F44"].SetStyle(AVG_FIRST_LAST_STYLE);

                //Setting
                string[] setting_Array = richTextBox11.Lines;
                for (int counter = 0; counter < setting_Array.Length; counter++)
                {
                    s2_excel_setting[counter] = setting_Array[counter];
                    if (counter == 0)                                                                   //Periodic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Blue;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 0 && counter < 12)                                               //Periodic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Blue;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 12)                                                             //Dynamic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Orange;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 12 && counter < 17)                                             //Dynamic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Orange;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 17)                                                             //Geofencing
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(32, 178, 170);
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 17 && counter < 25)                                              //Geofencing
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(32, 178, 170);
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 25)                                                             //MotionDetection
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(165, 42, 42);
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 25 && counter < 30)                                              //MotionDetection
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(165, 42, 42);
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 30)                                                             //GPS_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 30 && counter < 36)                                              //GPS_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                    }
                    else if (counter == 36)                                                             //GLO_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 36 && counter < 42)                                              //GLO_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                    }
                    else if (counter == 42)                                                             //GAL_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 42 && counter < 48)                                              //GAL_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                    }
                    else if (counter == 48)                                                             //BEI_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 48 && counter < 54)                                              //BEI_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s2_excel_setting[counter]);
                    }

                }
                sheet_mda.Cells.SetColumnWidth(3, 30);
                //Setting

                /*
                 * Merge Excel
                 */
                Excel.Cell merge_title_Item = merge_ws.Cells[9, 12];
                Excel.Cell merge_title_fix_yyyy_mm_dd = merge_ws.Cells[9, 13];
                Excel.Cell merge_title_fix_hh_mm_ss = merge_ws.Cells[9, 14];
                Excel.Cell merge_title_Interval = merge_ws.Cells[9, 15];
                Excel.Cell merge_title_dot_message = merge_ws.Cells[9, 16];
                Excel.Cell merge_antenna = merge_ws.Cells["M8"];
                Excel.Cell merge_anklet = merge_ws.Cells["M9"];
                Excel.Cell merge_antenna_name = merge_ws.Cells["N8"];
                Excel.Cell merge_id_name = merge_ws.Cells["N9"];

                merge_title_Item.PutValue("Item");
                merge_title_fix_yyyy_mm_dd.PutValue("定位日期(年_月_日)");
                merge_title_fix_hh_mm_ss.PutValue("定位日期(時_分_秒)");
                merge_title_Interval.PutValue("Interval");
                merge_title_dot_message.PutValue("打點資訊");
                merge_antenna.PutValue("天線");
                merge_antenna_name.PutValue(" : ");
                merge_anklet.PutValue("腳環ID");
                merge_id_name.PutValue(" : " + s2_opfilename);

                if (chkfile == 1)
                {
                    String GNSS_Profile, EPOcheck;
                    DateTime Wakeup_time = WakeupTime.Value;
                    GNSS_Profile = SatCom.Text;
                    EPOcheck = EPOCom.Text;
                    String str_wakeuptime = Wakeup_time.ToString("yyyy/MM/dd HH:mm:ss");

                    Excel.Cell merge_sat = merge_ws.Cells["A1"];
                    Excel.Cell merge_test_time = merge_ws.Cells["A2"];
                    Excel.Cell merge_firmware_version = merge_ws.Cells["A3"];
                    Excel.Cell merge_parameter = merge_ws.Cells["A4"];
                    Excel.Cell merge_standard = merge_ws.Cells["A5"];
                    Excel.Cell merge_gnss_profile = merge_ws.Cells["B1"];
                    Excel.Cell merge_test_wakeuptime_value = merge_ws.Cells["B2"];
                    Excel.Cell merge_firmware_version_value = merge_ws.Cells["B3"];
                    Excel.Cell merge_parameter_value = merge_ws.Cells["B4"];
                    Excel.Cell merge_standard_value1 = merge_ws.Cells["B5"];
                    Excel.Cell merge_standard_value2 = merge_ws.Cells["C5"];

                    merge_sat.PutValue("衛星:");
                    merge_test_time.PutValue("測試時間:");
                    merge_firmware_version.PutValue("分位:");
                    merge_parameter.PutValue("參數:");
                    merge_standard.PutValue("標準:");

                    if (GNSS_Profile.Equals("G") == true)                           //GPS Only
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+EPO+(QZSS)");
                                merge_gnss_profile.Characters(8, 6).Font.Color = Color.Red;

                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+(QZSS)");
                                merge_gnss_profile.Characters(4, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GR") == true)                 //G + GR
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+EPO+(QZSS)");
                                merge_gnss_profile.Characters(16, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+(QZSS)");
                                merge_gnss_profile.Characters(12, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GE") == true)                 //G + GE
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+EPO+(QZSS)");
                                merge_gnss_profile.Characters(16, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+(QZSS)");
                                merge_gnss_profile.Characters(12, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GB") == true)                 //G + GB
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+EPO+(QZSS)");
                                merge_gnss_profile.Characters(15, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+(QZSS)");
                                merge_gnss_profile.Characters(11, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GR+GE+GB") == true)       //G + GR + GE + GB
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+EPO+(QZSS)");
                                merge_gnss_profile.Characters(31, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+(QZSS)");
                                merge_gnss_profile.Characters(27, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU");
                            }
                        }
                    }
                    merge_test_wakeuptime_value.PutValue(str_wakeuptime);
                    merge_firmware_version_value.PutValue(label28.Text);
                    merge_parameter_value.PutValue(s2_t0.ToString() + "、" + s2_t1.ToString() + "、" + s2_t2.ToString() + "、" + s2_t3.ToString() + "、" + s2_t4.ToString());
                    merge_standard_value1.PutValue("free run(" + s2_t1.ToString() + "s/" + s2_t0.ToString() + "s=" + s2_free_run_time.ToString() + "組)");
                    merge_standard_value2.PutValue("小循環(一組" + (s2_t3 + s2_t4).ToString() + "s，共" + (s2_t3 / s2_t0).ToString() + "個點)");

                    Excel.Style merge_standard_value1_style = merge_ws.Cells["B5"].GetStyle();
                    Excel.Font merge_standard_value1_font = merge_standard_value1_style.Font;
                    merge_standard_value1_style.ForegroundColor = Color.FromArgb(191, 191, 191);
                    merge_standard_value1_style.Pattern = Excel.BackgroundType.Solid;
                    merge_standard_value1_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    merge_standard_value1_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    merge_standard_value1_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_ws.Cells["B5"].SetStyle(merge_standard_value1_style);

                    Excel.Style merge_standard_value2_style = merge_ws.Cells["C5"].GetStyle();
                    Excel.Font merge_standard_value2_font = merge_standard_value2_style.Font;
                    merge_standard_value2_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                    merge_standard_value2_style.Pattern = Excel.BackgroundType.Solid;
                    merge_standard_value2_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    merge_ws.Cells["C5"].SetStyle(merge_standard_value2_style);

                    Excel.Cell merge_title_t0 = merge_ws.Cells["G1"];
                    Excel.Cell merge_title_t1 = merge_ws.Cells["G2"];
                    Excel.Cell merge_title_t2 = merge_ws.Cells["G3"];
                    Excel.Cell merge_title_t3 = merge_ws.Cells["G4"];
                    Excel.Cell merge_title_t4 = merge_ws.Cells["G5"];
                    Excel.Cell merge_t0 = merge_ws.Cells["H1"];
                    Excel.Cell merge_t1 = merge_ws.Cells["H2"];
                    Excel.Cell merge_t2 = merge_ws.Cells["H3"];
                    Excel.Cell merge_t3 = merge_ws.Cells["H4"];
                    Excel.Cell merge_t4 = merge_ws.Cells["H5"];

                    merge_title_t0.PutValue("T0");
                    merge_title_t1.PutValue("T1");
                    merge_title_t2.PutValue("T2");
                    merge_title_t3.PutValue("T3");
                    merge_title_t4.PutValue("T4");
                    merge_t0.PutValue(s2_t0.ToString());
                    merge_t1.PutValue(s2_t1.ToString());
                    merge_t2.PutValue(s2_t2.ToString());
                    merge_t3.PutValue(s2_t3.ToString());
                    merge_t4.PutValue(s2_t4.ToString());

                    Excel.Cell merge_title_input_val = merge_ws.Cells["J1"];
                    Excel.Cell merge_title_time_cal = merge_ws.Cells["J2"];
                    Excel.Cell merge_title_cycle_cal = merge_ws.Cells["J3"];
                    Excel.Cell merge_time_cal = merge_ws.Cells["K2"];
                    Excel.Cell merge_cycle_cal = merge_ws.Cells["K3"];

                    merge_title_input_val.PutValue("請輸入換算數字 = >");
                    merge_title_time_cal.PutValue("時間換算");
                    merge_title_cycle_cal.PutValue("組數換算");
                    merge_time_cal.Formula = "=(K1*3600)/" + s2_t1.ToString();
                    merge_cycle_cal.Formula = "K2/(" + s2_t2.ToString() + "+" + s2_t3.ToString() + ")";

                    chkfile = 0;
                }

                //Item 格式調整
                Excel.Style merge_title_Item_style = merge_ws.Cells[9, 12].GetStyle();
                Excel.Font merge_title_Item_font = merge_title_Item_style.Font;
                merge_title_Item_style.ForegroundColor = Color.LightGray;
                merge_title_Item_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_Item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_Item_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_Item_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_Item_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_Item_font.IsBold = true;
                merge_ws.Cells[9, 12].SetStyle(merge_title_Item_style);

                //定位日期(年_月_日) 格式調整
                Excel.Style merge_title_fix_yyyy_mm_dd_style = merge_ws.Cells[9, 13].GetStyle();
                Excel.Font merge_title_fix_yyyy_mm_dd_font = merge_title_fix_yyyy_mm_dd_style.Font;
                merge_title_fix_yyyy_mm_dd_style.ForegroundColor = Color.LightGray;
                merge_title_fix_yyyy_mm_dd_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_fix_yyyy_mm_dd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_font.IsBold = true;
                merge_ws.Cells[9, 13].SetStyle(merge_title_fix_yyyy_mm_dd_style);

                //定位日期(時_分_秒) 格式調整
                Excel.Style merge_title_fix_hh_mm_ss_style = merge_ws.Cells[9, 14].GetStyle();
                Excel.Font merge_title_fix_hh_mm_ss_font = merge_title_fix_hh_mm_ss_style.Font;
                merge_title_fix_hh_mm_ss_style.ForegroundColor = Color.LightGray;
                merge_title_fix_hh_mm_ss_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_fix_hh_mm_ss_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_font.IsBold = true;
                merge_ws.Cells[9, 14].SetStyle(merge_title_fix_hh_mm_ss_style);

                //Interval 格式調整
                Excel.Style merge_title_Interval_style = merge_ws.Cells[9, 15].GetStyle();
                Excel.Font merge_title_Interval_font = merge_title_Interval_style.Font;
                merge_title_Interval_style.ForegroundColor = Color.LightGray;
                merge_title_Interval_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_Interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_Interval_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_Interval_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_Interval_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_Interval_font.IsBold = true;
                merge_ws.Cells[9, 15].SetStyle(merge_title_Interval_style);

                //打點資訊 格式調整
                Excel.Style merge_title_dot_message_style = merge_ws.Cells[9, 16].GetStyle();
                Excel.Font merge_title_dot_message_font = merge_title_dot_message_style.Font;
                merge_title_dot_message_style.ForegroundColor = Color.LightGray;
                merge_title_dot_message_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_dot_message_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_dot_message_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                merge_title_dot_message_font.IsBold = true;
                merge_ws.Cells[9, 16].SetStyle(merge_title_dot_message_style);

                merge_ws.Cells.SetColumnWidth(12, 10);
                merge_ws.Cells.SetColumnWidth(13, 40);
                merge_ws.Cells.SetColumnWidth(14, 40);
                merge_ws.Cells.SetColumnWidth(15, 17);
                merge_ws.Cells.SetColumnWidth(16, 10);
                merge_ws.Cells.SetColumnWidth(17, 1);

                s2_merge_count = 9;
                //Save S2 Item、定位日期(年_月_日)、定位日期(時_分_秒)、Interval Data
                for (cmd_count = 1; cmd_count < convert_count2; cmd_count++)
                {
                    s2_merge_count += 1;
                    //宣告欄位
                    Excel.Cell Merge2_item = merge_ws.Cells[s2_merge_count, 12];
                    Excel.Cell Merge2_ymd = merge_ws.Cells[s2_merge_count, 13];
                    Excel.Cell Merge2_hms = merge_ws.Cells[s2_merge_count, 14];

                    //存放欄位
                    Merge2_item.PutValue(Int32.Parse(s2_Item[cmd_count]));
                    Merge2_ymd.PutValue(s2_ymd[cmd_count]);
                    Merge2_hms.PutValue(s2_hms[cmd_count]);
                    //宣告style調整格式
                    Excel.Style Merge2_item_style = merge_ws.Cells[s2_merge_count, 12].GetStyle();
                    Excel.Style Merge2_ymd_style = merge_ws.Cells[s2_merge_count, 13].GetStyle();
                    Excel.Style Merge2_hms_style = merge_ws.Cells[s2_merge_count, 14].GetStyle();

                    //Set color
                    //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4
                    switch (s2_mode_font_color[cmd_count])
                    {
                        case 0:
                            break;
                        case 1:
                            Merge2_item_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Merge2_ymd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Merge2_hms_style.Font.Color = Color.FromArgb(0, 191, 255);
                            break;
                        case 2:
                            Merge2_item_style.Font.Color = Color.Blue;
                            Merge2_ymd_style.Font.Color = Color.Blue;
                            Merge2_hms_style.Font.Color = Color.Blue;
                            break;
                        case 3:
                            Merge2_item_style.Font.Color = Color.Orange;
                            Merge2_ymd_style.Font.Color = Color.Orange;
                            Merge2_hms_style.Font.Color = Color.Orange;
                            break;
                        case 4:
                            Merge2_item_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Merge2_ymd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Merge2_hms_style.Font.Color = Color.FromArgb(32, 178, 170);
                            break;
                    }


                    //字體置中
                    Merge2_item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Merge2_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Merge2_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    //style set
                    merge_ws.Cells[s2_merge_count, 12].SetStyle(Merge2_item_style);
                    merge_ws.Cells[s2_merge_count, 13].SetStyle(Merge2_ymd_style);
                    merge_ws.Cells[s2_merge_count, 14].SetStyle(Merge2_hms_style);


                    if (cmd_count > 1)
                    {
                        Excel.Cell Merge2_interval = merge_ws.Cells[s2_merge_count, 15];
                        //Excel.Cell Merge2_interval_judge = merge_ws.Cells[s2_merge_count, 16];
                        Merge2_interval.PutValue(s2_interval[cmd_count]);
                        //Merge2_interval_judge.PutValue(s2_interval_judge[cmd_count]);
                        Excel.Style Merge2_interval_style = merge_ws.Cells[s2_merge_count, 15].GetStyle();
                        //Excel.Style Merge2_interval_judge_style = merge_ws.Cells[s2_merge_count, 16].GetStyle();
                        //Set Interval Font color
                        //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4, Red : 5
                        switch (s2_interval_font_color[cmd_count])
                        {
                            case 0:
                                break;
                            case 1:
                                Merge2_interval_style.Font.Color = Color.FromArgb(0, 191, 255);
                                break;
                            case 2:
                                Merge2_interval_style.Font.Color = Color.Blue;
                                break;
                            case 3:
                                Merge2_interval_style.Font.Color = Color.Orange;
                                break;
                            case 4:
                                Merge2_interval_style.Font.Color = Color.FromArgb(32, 178, 170);
                                break;
                            case 5:
                                Merge2_interval_style.Font.Color = Color.Red;
                                //s2_interval_judge_flag = 1;
                                break;

                        }
                        Merge2_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        //Merge2_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        merge_ws.Cells[s2_merge_count, 15].SetStyle(Merge2_interval_style);
                        //merge_ws.Cells[s2_merge_count, 16].SetStyle(Merge2_interval_judge_style);
                    }

                }
                /*
                 * s2 free run cycle
                 */
                Excel.Cells merge_free_run_time = merge_ws.Cells;
                merge_free_run_time.Merge(10, 16, s2_free_run_time, 1);
                Excel.Cell merge_cycle_free_run = merge_ws.Cells["Q11"];
                merge_cycle_free_run.PutValue(s2_free_run_time.ToString() + "組");
                //Cycle Free run 格式調整
                for (int free_run_border = 10; free_run_border <= (s2_free_run_time + 9); free_run_border++)
                {
                    Excel.Style title_merge_cycle_free_run_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                    Excel.Font title_merge_cycle_free_run_font = title_merge_cycle_free_run_style.Font;
                    title_merge_cycle_free_run_style.ForegroundColor = Color.LightGray;
                    title_merge_cycle_free_run_style.Pattern = Excel.BackgroundType.Solid;
                    title_merge_cycle_free_run_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    title_merge_cycle_free_run_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_ws.Cells.SetColumnWidth(16, 10);
                    title_merge_cycle_free_run_font.IsBold = true;
                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_free_run_style);
                }
                /*
                 * s2 free run cycle
                 */
                /*
                 * s2 merge cycle sheet
                 */
                excel_mode_flag = 0;
                merge_excel_mode_frame = 9;
                for (int merge_excel_cycle_count = 0; merge_excel_cycle_count <= s2_cycle; merge_excel_cycle_count++)
                {
                    Excel.Cells merge_cycle_time_frame = merge_ws.Cells;
                    Excel.Cell merge_cycle_time;
                    switch (s2_cycle_mode_judge[merge_excel_cycle_count])
                    {
                        //T3~T4
                        case 2:
                            if (excel_mode_flag != 3 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)               //t3_t4的first cycle time
                                {
                                    merge_excel_mode_frame += s2_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_t3_t4_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                    merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(16, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 2;
                                }
                                else if (excel_mode_flag == 2 && s2_cycle_add[merge_excel_cycle_count] != 0)               //如果t3_t4的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s2_t3_t4_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_t3_t4_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                    merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(16, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                    }
                                }

                            }
                            else if (excel_mode_flag == 3 && s2_cycle_add[merge_excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                merge_excel_mode_frame += s2_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_t3_t4_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(16, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            else if (excel_mode_flag == 4 && s2_cycle_add[merge_excel_cycle_count] != 0)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                merge_excel_mode_frame += s2_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_t3_t4_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(16, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            break;

                        //Dynamic
                        case 3:
                            if (excel_mode_flag != 2 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)            //如果Dynamic的first cycle time
                                {
                                    merge_excel_mode_frame += s2_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_dynamic_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                    merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(16, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 3;
                                }
                                else if (excel_mode_flag == 3 && s2_cycle_add[merge_excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s2_dynamic_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_dynamic_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                    merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(16, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s2_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s2_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_dynamic_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(16, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            else if (excel_mode_flag == 4 && s2_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s2_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_dynamic_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(16, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (excel_mode_flag != 2 && excel_mode_flag != 3)
                            {
                                if (excel_mode_flag == 0)            //如果Geofencing的first cycle time
                                {
                                    merge_excel_mode_frame += s2_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_geofencing_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                    merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(16, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 4;
                                }
                                else if (excel_mode_flag == 4 && s2_cycle_add[merge_excel_cycle_count] != 0)            //如果Geofencing的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s2_geofencing_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_geofencing_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                    merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(16, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s2_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s2_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_geofencing_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(16, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }
                            else if (excel_mode_flag == 3 && s2_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s2_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_geofencing_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s2_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(16, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }

                            break;
                        //餘數
                        case 5:
                            if (excel_mode_flag == 2)               //T3~T4 下的餘數
                            {
                                merge_excel_mode_frame += s2_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s2_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(16, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 3)           //Dynamic下的餘數
                            {
                                merge_excel_mode_frame += s2_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s2_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(16, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 4)          //Geofencing下的餘數
                            {

                                merge_excel_mode_frame += s2_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 16, s2_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 16];
                                merge_cycle_time.PutValue(s2_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s2_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(16, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 16].SetStyle(title_merge_cycle_time_style);
                                }

                            }
                            break;
                    }
                }
                /*
                 * s2 merge cycle sheet
                 */

                /*
                 * Merge Excel
                 */

                wb.Save(s2_directory_fileexcel, Excel.SaveFormat.Xlsx);
                /**
                 * GNSS、MDA、Setting sheet
                 */

            }

            //Save s3 excel file
            if (s3chkb.Checked == true)
            {
                int chkfile = 0;
                if (s0chkb.Checked == true && s1chkb.Checked == true && s2chkb.Checked == true)
                {
                    if (s3_t0 == s0_t0 && s3_t0 == s1_t0 && s3_t0 == s2_t0 && s3_t1 == s0_t1 && s3_t1 == s1_t1 && s3_t1 == s2_t1 && s3_t2 == s0_t2 && s3_t2 == s1_t2 && s3_t2 == s2_t2 && s3_t3 == s0_t3 && s3_t3 == s1_t3 && s3_t3 == s2_t3 && s3_t4 == s0_t4 && s3_t4 == s1_t4 && s3_t4 == s2_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == true && s1chkb.Checked == true && s2chkb.Checked == false)
                {
                    if (s3_t0 == s0_t0 && s3_t0 == s1_t0 && s3_t1 == s0_t1 && s3_t1 == s1_t1 && s3_t2 == s0_t2 && s3_t2 == s1_t2 && s3_t3 == s0_t3 && s3_t3 == s1_t3 && s3_t4 == s0_t4 && s3_t4 == s1_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == true && s1chkb.Checked == false && s2chkb.Checked == true)
                {
                    if (s3_t0 == s0_t0 && s3_t0 == s2_t0 && s3_t1 == s0_t1 && s3_t1 == s2_t1 && s3_t2 == s0_t2 && s3_t2 == s2_t2 && s3_t3 == s0_t3 && s3_t3 == s2_t3 && s3_t4 == s0_t4 && s3_t4 == s2_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s1chkb.Checked == true && s2chkb.Checked == true)
                {
                    if (s3_t0 == s1_t0 && s3_t0 == s2_t0 && s3_t1 == s1_t1 && s3_t1 == s2_t1 && s3_t2 == s1_t2 && s3_t2 == s2_t2 && s3_t3 == s1_t3 && s3_t3 == s2_t3 && s3_t4 == s1_t4 && s3_t4 == s2_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == true && s1chkb.Checked == false && s2chkb.Checked == false)
                {
                    if (s3_t0 == s0_t0 && s3_t1 == s0_t1 && s3_t2 == s0_t2 && s3_t3 == s0_t3 && s3_t4 == s0_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s1chkb.Checked == true && s2chkb.Checked == false)
                {
                    if (s3_t0 == s1_t0 && s3_t1 == s1_t1 && s3_t2 == s1_t2 && s3_t3 == s1_t3 && s3_t4 == s1_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s1chkb.Checked == false && s2chkb.Checked == true)
                {
                    if (s3_t0 == s2_t0 && s3_t1 == s2_t1 && s3_t2 == s2_t2 && s3_t3 == s2_t3 && s3_t4 == s2_t4)
                    {
                        chkfile = 1;
                    }
                }
                else if (s0chkb.Checked == false && s1chkb.Checked == false && s2chkb.Checked == false)
                {
                    chkfile = 1;
                }

                if (Directory.Exists(s3_directory_file))
                {

                }
                else
                {
                    Directory.CreateDirectory(s3_directory_file);
                }

                int cmd_count;

                Excel.Workbook wb = new Excel.Workbook();
                Excel.Worksheet sheet = wb.Worksheets[0];

                sheet.Name = "Locus Row Data";
                //合併"指令代碼"、"亂數組合"的儲存格
                Excel.Cells title_Instruction_code_format = sheet.Cells;
                Excel.Cells title_Ramdom_combinations_format = sheet.Cells;
                Excel.Cells Free_run_time = sheet.Cells;
                title_Instruction_code_format.Merge(0, 0, 1, 2);
                title_Ramdom_combinations_format.Merge(0, 6, 1, 5);
                Free_run_time.Merge(1, 16, s3_free_run_time, 1);

                /*
                 * s3 cycle sheet
                 */
                excel_mode_flag = 0;
                excel_mode_frame = 0;
                for (int excel_cycle_count = 0; excel_cycle_count <= s3_cycle; excel_cycle_count++)
                {
                    Excel.Cells cycle_time_frame = sheet.Cells;
                    Excel.Cell cycle_time;
                    switch (s3_cycle_mode_judge[excel_cycle_count])
                    {
                        //T3~T4
                        case 2:
                            if (excel_mode_flag != 3 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)               //t3_t4的first cycle time
                                {
                                    excel_mode_frame = s3_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s3_t3_t4_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 2;
                                }
                                else if (excel_mode_flag == 2 && s3_cycle_add[excel_cycle_count] != 0)               //如果t3_t4的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s3_t3_t4_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s3_t3_t4_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }

                            }
                            else if (excel_mode_flag == 3 && s3_cycle_add[excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                excel_mode_frame += s3_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s3_t3_t4_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            else if (excel_mode_flag == 4 && s3_cycle_add[excel_cycle_count] != 0)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                excel_mode_frame += s3_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s3_t3_t4_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            break;

                        //Dynamic
                        case 3:
                            if (excel_mode_flag != 2 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)            //如果Dynamic的first cycle time
                                {
                                    excel_mode_frame = s3_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s3_dynamic_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 3;
                                }
                                else if (excel_mode_flag == 3 && s3_cycle_add[excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s3_dynamic_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s3_dynamic_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s3_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s3_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s3_dynamic_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            else if (excel_mode_flag == 4 && s3_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s3_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s3_dynamic_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (excel_mode_flag != 2 && excel_mode_flag != 3)
                            {
                                if (excel_mode_flag == 0)            //如果Geofencing的first cycle time
                                {
                                    excel_mode_frame = s3_free_run_time + 1;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s3_geofencing_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }

                                    excel_mode_flag = 4;
                                }
                                else if (excel_mode_flag == 4 && s3_cycle_add[excel_cycle_count] != 0)            //如果Geofencing的cycle time還沒結束繼續累加
                                {
                                    excel_mode_frame += s3_geofencing_time;
                                    cycle_time_frame.Merge(excel_mode_frame, 16, s3_geofencing_time, 1);
                                    cycle_time = sheet.Cells[excel_mode_frame, 16];
                                    cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                        Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                        title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        sheet.Cells.SetColumnWidth(16, 10);
                                        title_cycle_time_font.IsBold = true;
                                        sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s3_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s3_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s3_geofencing_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }
                            else if (excel_mode_flag == 3 && s3_cycle_add[excel_cycle_count] != 0)
                            {
                                excel_mode_frame += s3_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s3_geofencing_time, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border < excel_mode_frame + s3_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }

                            break;
                        //餘數
                        case 5:
                            if (excel_mode_flag == 2)               //T3~T4 下的餘數
                            {
                                excel_mode_frame += s3_t3_t4_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s3_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s3_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 3)           //Dynamic下的餘數
                            {
                                excel_mode_frame += s3_dynamic_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s3_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s3_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 4)          //Geofencing下的餘數
                            {

                                excel_mode_frame += s3_geofencing_time;
                                cycle_time_frame.Merge(excel_mode_frame, 16, s3_cycle_remainder + 1, 1);
                                cycle_time = sheet.Cells[excel_mode_frame, 16];
                                cycle_time.PutValue(s3_cycle_add[excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = excel_mode_frame; free_run_border <= excel_mode_frame + s3_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_cycle_time_style = sheet.Cells[free_run_border, 16].GetStyle();
                                    Excel.Font title_cycle_time_font = title_cycle_time_style.Font;
                                    title_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    sheet.Cells.SetColumnWidth(16, 10);
                                    title_cycle_time_font.IsBold = true;
                                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_time_style);
                                }

                            }
                            break;
                    }
                }
                /*
                 * s3 cycle sheet
                 */

                //設定title
                Excel.Cell title_Instruction_code = sheet.Cells["A1"];
                Excel.Cell title_Item = sheet.Cells["C1"];
                Excel.Cell title_time_ymd = sheet.Cells["D1"];
                Excel.Cell title_time_hms = sheet.Cells["E1"];
                Excel.Cell title_Fix = sheet.Cells["F1"];
                Excel.Cell title_Random_combinations = sheet.Cells["G1"];
                Excel.Cell title_sat = sheet.Cells["L1"];
                Excel.Cell title_mode = sheet.Cells["M1"];
                Excel.Cell title_interval = sheet.Cells["N1"];
                //DeepSkyBlue : 0, Blue : 1, Orange : 2, LightSeaGreen : 3
                Excel.Cell color_DeepSkyBlue = sheet.Cells["S2"];
                Excel.Cell DeepSkyBlue_explanation = sheet.Cells["T2"];
                Excel.Cell color_Blue = sheet.Cells["S3"];
                Excel.Cell Blue_explanation = sheet.Cells["T3"];
                Excel.Cell color_Orange = sheet.Cells["S4"];
                Excel.Cell Orange_explanation = sheet.Cells["T4"];
                Excel.Cell color_LightSeaGreen = sheet.Cells["S5"];
                Excel.Cell LightSeaGreen_explanation = sheet.Cells["T5"];
                Excel.Cell HighEffcien = sheet.Cells["S6"];
                //誤差值判定Title、組數
                Excel.Cell title_interval_judge = sheet.Cells["P1"];
                Excel.Cell title_cycle = sheet.Cells["Q1"];
                Excel.Cell cycle_free_run = sheet.Cells["Q2"];
                //T0~T4 title
                Excel.Cell title_T0 = sheet.Cells["S10"];
                Excel.Cell title_T1 = sheet.Cells["S11"];
                Excel.Cell title_T2 = sheet.Cells["S12"];
                Excel.Cell title_T3 = sheet.Cells["S13"];
                Excel.Cell title_T4 = sheet.Cells["S14"];
                Excel.Cell title_T0_value = sheet.Cells["T10"];
                Excel.Cell title_T1_value = sheet.Cells["T11"];
                Excel.Cell title_T2_value = sheet.Cells["T12"];
                Excel.Cell title_T3_value = sheet.Cells["T13"];
                Excel.Cell title_T4_value = sheet.Cells["T14"];
                //時間換算、組數換算
                Excel.Cell enter_num = sheet.Cells["V10"];
                Excel.Cell title_time_cal = sheet.Cells["V11"];
                Excel.Cell title_cycle_cal = sheet.Cells["V12"];
                Excel.Cell title_time_cal_value = sheet.Cells["W11"];
                Excel.Cell title_cycle_cal_value = sheet.Cells["W12"];

                //寫入title
                title_Instruction_code.PutValue("指令代碼");
                title_Item.PutValue("Item");
                title_time_ymd.PutValue("定位日期(年_月_日)");
                title_time_hms.PutValue("定位日期(時_分_秒)");
                title_Fix.PutValue("Fix-Type");
                title_Random_combinations.PutValue("亂數組合");
                title_sat.PutValue("使用的衛星數");
                title_mode.PutValue("Mode");
                title_interval.PutValue("Interval");
                DeepSkyBlue_explanation.PutValue("T0 ~ T1");
                Blue_explanation.PutValue("T2 ~ T4");
                Orange_explanation.PutValue("Dynamic");
                LightSeaGreen_explanation.PutValue("Geofencing");
                HighEffcien.PutValue("High effcien");
                //誤差值判定Title、組數
                title_cycle.PutValue("打點資訊");
                cycle_free_run.PutValue(s3_free_run_time.ToString() + "組");
                //T0~T4 title
                title_T0.PutValue("T0");
                title_T1.PutValue("T1");
                title_T2.PutValue("T2");
                title_T3.PutValue("T3");
                title_T4.PutValue("T4");
                title_T0_value.PutValue(s3_t0.ToString());
                title_T1_value.PutValue(s3_t1.ToString());
                title_T2_value.PutValue(s3_t2.ToString());
                title_T3_value.PutValue(s3_t3.ToString());
                title_T4_value.PutValue(s3_t4.ToString());
                //時間換算、組數換算
                enter_num.PutValue("請輸入換算數字 =>");
                title_time_cal.PutValue("時間換算");
                title_cycle_cal.PutValue("組數換算");
                sheet.Cells.SetColumnWidth(21, 17);
                title_time_cal_value.Formula = "=(W10*3600)/" + s3_t1.ToString();
                title_cycle_cal_value.Formula = "W11/(" + s3_t2.ToString() + "+" + s3_t3.ToString() + ")";


                Excel.Style color_DeepSkyBlue_style = sheet.Cells["S2"].GetStyle();
                color_DeepSkyBlue_style.ForegroundColor = Color.FromArgb(0, 191, 255);
                color_DeepSkyBlue_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S2"].SetStyle(color_DeepSkyBlue_style);
                Excel.Style color_Blue_style = sheet.Cells["S3"].GetStyle();
                color_Blue_style.ForegroundColor = Color.Blue;
                color_Blue_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S3"].SetStyle(color_Blue_style);
                Excel.Style color_Orange_style = sheet.Cells["S4"].GetStyle();
                color_Orange_style.ForegroundColor = Color.Orange;
                color_Orange_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S4"].SetStyle(color_Orange_style);
                Excel.Style color_LightSeaGreen_style = sheet.Cells["S5"].GetStyle();
                color_LightSeaGreen_style.ForegroundColor = Color.FromArgb(32, 178, 170);
                color_LightSeaGreen_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S5"].SetStyle(color_LightSeaGreen_style);
                Excel.Style HighEffcien_style = sheet.Cells["S6"].GetStyle();
                HighEffcien_style.ForegroundColor = Color.FromArgb(169, 208, 142);
                HighEffcien_style.Font.Color = Color.Red;
                HighEffcien_style.Pattern = Excel.BackgroundType.Solid;
                sheet.Cells["S6"].SetStyle(HighEffcien_style);


                for (cmd_count = 1; cmd_count < convert_count3; cmd_count++)
                {
                    //宣告欄位
                    Excel.Cell Excel3_Instruction_code_cmd = sheet.Cells[cmd_count, 0];
                    Excel.Cell Excel3_Instruction_code_cmd_two = sheet.Cells[cmd_count, 1];
                    Excel.Cell Excel3_item = sheet.Cells[cmd_count, 2];
                    Excel.Cell Excel3_ymd = sheet.Cells[cmd_count, 3];
                    Excel.Cell Excel3_hms = sheet.Cells[cmd_count, 4];
                    Excel.Cell Excel3_fix = sheet.Cells[cmd_count, 5];
                    Excel.Cell Excel3_ramdom_first = sheet.Cells[cmd_count, 6];
                    Excel.Cell Excel3_ramdom_second = sheet.Cells[cmd_count, 7];
                    Excel.Cell Excel3_ramdom_third = sheet.Cells[cmd_count, 8];
                    Excel.Cell Excel3_ramdom_forth = sheet.Cells[cmd_count, 9];
                    Excel.Cell Excel3_ramdom_fiveth = sheet.Cells[cmd_count, 10];
                    Excel.Cell Excel3_sat = sheet.Cells[cmd_count, 11];
                    Excel.Cell Excel3_mode = sheet.Cells[cmd_count, 12];
                    //存放欄位
                    Excel3_Instruction_code_cmd.PutValue(s3_Instruction_code_cmd[cmd_count]);
                    Excel3_Instruction_code_cmd_two.PutValue(Int32.Parse(s3_Instruction_code_cmd_two[cmd_count]));
                    Excel3_item.PutValue(Int32.Parse(s3_Item[cmd_count]));
                    Excel3_ymd.PutValue(s3_ymd[cmd_count]);
                    Excel3_hms.PutValue(s3_hms[cmd_count]);
                    Excel3_fix.PutValue(s3_fix[cmd_count]);
                    Excel3_ramdom_first.PutValue(s3_ramdom_first[cmd_count]);
                    Excel3_ramdom_second.PutValue(s3_ramdom_second[cmd_count]);
                    Excel3_ramdom_third.PutValue(s3_ramdom_third[cmd_count]);
                    Excel3_ramdom_forth.PutValue(s3_ramdom_forth[cmd_count]);
                    Excel3_ramdom_fiveth.PutValue(s3_ramdom_fiveth[cmd_count]);
                    Excel3_sat.PutValue(s3_sat[cmd_count]);
                    Excel3_mode.PutValue(s3_mode[cmd_count]);
                    //宣告style調整格式
                    Excel.Style Excel3_Instruction_code_cmd_style = sheet.Cells[cmd_count, 0].GetStyle();
                    Excel.Style Excel3_Instruction_code_cmd_two_style = sheet.Cells[cmd_count, 1].GetStyle();
                    Excel.Style Excel3_item_style = sheet.Cells[cmd_count, 2].GetStyle();
                    Excel.Style Excel3_ymd_style = sheet.Cells[cmd_count, 3].GetStyle();
                    Excel.Style Excel3_hms_style = sheet.Cells[cmd_count, 4].GetStyle();
                    Excel.Style Excel3_fix_style = sheet.Cells[cmd_count, 5].GetStyle();
                    Excel.Style Excel3_ramdom_first_style = sheet.Cells[cmd_count, 6].GetStyle();
                    Excel.Style Excel3_ramdom_second_style = sheet.Cells[cmd_count, 7].GetStyle();
                    Excel.Style Excel3_ramdom_third_style = sheet.Cells[cmd_count, 8].GetStyle();
                    Excel.Style Excel3_ramdom_forth_style = sheet.Cells[cmd_count, 9].GetStyle();
                    Excel.Style Excel3_ramdom_fiveth_style = sheet.Cells[cmd_count, 10].GetStyle();
                    Excel.Style Excel3_sat_style = sheet.Cells[cmd_count, 11].GetStyle();
                    Excel.Style Excel3_mode_style = sheet.Cells[cmd_count, 12].GetStyle();

                    //Set color
                    //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4
                    switch (s3_mode_font_color[cmd_count])
                    {
                        case 0:
                            break;
                        case 1:
                            Excel3_Instruction_code_cmd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_Instruction_code_cmd_two_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_item_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_ymd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_hms_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_fix_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_ramdom_first_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_ramdom_second_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_ramdom_third_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_ramdom_forth_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_ramdom_fiveth_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_sat_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Excel3_mode_style.Font.Color = Color.FromArgb(0, 191, 255);
                            break;
                        case 2:
                            Excel3_Instruction_code_cmd_style.Font.Color = Color.Blue;
                            Excel3_Instruction_code_cmd_two_style.Font.Color = Color.Blue;
                            Excel3_item_style.Font.Color = Color.Blue;
                            Excel3_ymd_style.Font.Color = Color.Blue;
                            Excel3_hms_style.Font.Color = Color.Blue;
                            Excel3_fix_style.Font.Color = Color.Blue;
                            Excel3_ramdom_first_style.Font.Color = Color.Blue;
                            Excel3_ramdom_second_style.Font.Color = Color.Blue;
                            Excel3_ramdom_third_style.Font.Color = Color.Blue;
                            Excel3_ramdom_forth_style.Font.Color = Color.Blue;
                            Excel3_ramdom_fiveth_style.Font.Color = Color.Blue;
                            Excel3_sat_style.Font.Color = Color.Blue;
                            Excel3_mode_style.Font.Color = Color.Blue;
                            break;
                        case 3:
                            Excel3_Instruction_code_cmd_style.Font.Color = Color.Orange;
                            Excel3_Instruction_code_cmd_two_style.Font.Color = Color.Orange;
                            Excel3_item_style.Font.Color = Color.Orange;
                            Excel3_ymd_style.Font.Color = Color.Orange;
                            Excel3_hms_style.Font.Color = Color.Orange;
                            Excel3_fix_style.Font.Color = Color.Orange;
                            Excel3_ramdom_first_style.Font.Color = Color.Orange;
                            Excel3_ramdom_second_style.Font.Color = Color.Orange;
                            Excel3_ramdom_third_style.Font.Color = Color.Orange;
                            Excel3_ramdom_forth_style.Font.Color = Color.Orange;
                            Excel3_ramdom_fiveth_style.Font.Color = Color.Orange;
                            Excel3_sat_style.Font.Color = Color.Orange;
                            Excel3_mode_style.Font.Color = Color.Orange;
                            break;
                        case 4:
                            Excel3_Instruction_code_cmd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_Instruction_code_cmd_two_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_item_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_ymd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_hms_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_fix_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_ramdom_first_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_ramdom_second_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_ramdom_third_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_ramdom_forth_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_ramdom_fiveth_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_sat_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Excel3_mode_style.Font.Color = Color.FromArgb(32, 178, 170);
                            break;
                    }

                    //字體置中
                    Excel3_Instruction_code_cmd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_Instruction_code_cmd_two_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_fix_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_ramdom_first_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_ramdom_second_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_ramdom_third_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_ramdom_forth_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_ramdom_fiveth_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_sat_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Excel3_mode_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    //style set
                    sheet.Cells[cmd_count, 0].SetStyle(Excel3_Instruction_code_cmd_style);
                    sheet.Cells[cmd_count, 1].SetStyle(Excel3_Instruction_code_cmd_two_style);
                    sheet.Cells[cmd_count, 2].SetStyle(Excel3_item_style);
                    sheet.Cells[cmd_count, 3].SetStyle(Excel3_ymd_style);
                    sheet.Cells[cmd_count, 4].SetStyle(Excel3_hms_style);
                    sheet.Cells[cmd_count, 5].SetStyle(Excel3_fix_style);
                    sheet.Cells[cmd_count, 6].SetStyle(Excel3_ramdom_first_style);
                    sheet.Cells[cmd_count, 7].SetStyle(Excel3_ramdom_second_style);
                    sheet.Cells[cmd_count, 8].SetStyle(Excel3_ramdom_third_style);
                    sheet.Cells[cmd_count, 9].SetStyle(Excel3_ramdom_forth_style);
                    sheet.Cells[cmd_count, 10].SetStyle(Excel3_ramdom_fiveth_style);
                    sheet.Cells[cmd_count, 11].SetStyle(Excel3_sat_style);
                    sheet.Cells[cmd_count, 12].SetStyle(Excel3_mode_style);

                    if (cmd_count > 1)
                    {
                        Excel.Cell Excel3_interval = sheet.Cells[cmd_count, 13];
                        Excel.Cell Excel3_interval_judge = sheet.Cells[cmd_count, 15];
                        Excel3_interval.PutValue(s3_interval[cmd_count]);
                        Excel3_interval_judge.PutValue(s3_interval_judge[cmd_count]);
                        Excel.Style Excel3_interval_style = sheet.Cells[cmd_count, 13].GetStyle();
                        Excel.Style Excel3_interval_judge_style = sheet.Cells[cmd_count, 15].GetStyle();
                        //Set Interval Font color
                        //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4, Red : 5
                        switch (s3_interval_font_color[cmd_count])
                        {
                            case 0:
                                break;
                            case 1:
                                Excel3_interval_style.Font.Color = Color.FromArgb(0, 191, 255);
                                break;
                            case 2:
                                Excel3_interval_style.Font.Color = Color.Blue;
                                break;
                            case 3:
                                Excel3_interval_style.Font.Color = Color.Orange;
                                break;
                            case 4:
                                Excel3_interval_style.Font.Color = Color.FromArgb(32, 178, 170);
                                break;
                            case 5:
                                Excel3_interval_style.Font.Color = Color.Red;
                                s3_interval_judge_flag = 1;
                                break;
                        }
                        Excel3_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        Excel3_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        sheet.Cells[cmd_count, 13].SetStyle(Excel3_interval_style);
                        sheet.Cells[cmd_count, 15].SetStyle(Excel3_interval_judge_style);
                    }

                }

                //指令代碼title格式調整
                Excel.Style title_Instruction_code_style = sheet.Cells["A1"].GetStyle();
                Excel.Style title_Instruction_code_style_b2 = sheet.Cells["B1"].GetStyle();
                Excel.Font title_Instruction_code_font = title_Instruction_code_style.Font;
                title_Instruction_code_style.ForegroundColor = Color.LightGray;
                title_Instruction_code_style.Pattern = Excel.BackgroundType.Solid;
                title_Instruction_code_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Instruction_code_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Instruction_code_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Instruction_code_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Instruction_code_style_b2.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Instruction_code_font.IsBold = true;
                sheet.Cells.SetColumnWidth(0, 15);
                sheet.Cells["A1"].SetStyle(title_Instruction_code_style);
                sheet.Cells["B1"].SetStyle(title_Instruction_code_style_b2);

                //Item title格式調整
                Excel.Style title_Item_style = sheet.Cells["C1"].GetStyle();
                Excel.Font title_Item_font = title_Item_style.Font;
                title_Item_style.ForegroundColor = Color.LightGray;
                title_Item_style.Pattern = Excel.BackgroundType.Solid;
                title_Item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Item_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Item_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Item_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Item_font.IsBold = true;
                sheet.Cells["C1"].SetStyle(title_Item_style);

                //time ymd格式調整
                Excel.Style title_time_ymd_style = sheet.Cells["D1"].GetStyle();
                Excel.Font title_time_ymd_font = title_time_ymd_style.Font;
                title_time_ymd_style.ForegroundColor = Color.LightGray;
                title_time_ymd_style.Pattern = Excel.BackgroundType.Solid;
                title_time_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_time_ymd_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_time_ymd_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_ymd_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_time_ymd_font.IsBold = true;
                sheet.Cells.SetColumnWidth(3, 35);
                sheet.Cells["D1"].SetStyle(title_time_ymd_style);

                //time hms格式調整
                Excel.Style title_time_hms_style = sheet.Cells["E1"].GetStyle();
                Excel.Font title_time_hms_font = title_time_hms_style.Font;
                title_time_hms_style.ForegroundColor = Color.LightGray;
                title_time_hms_style.Pattern = Excel.BackgroundType.Solid;
                title_time_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_time_hms_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_time_hms_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_time_hms_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_time_hms_font.IsBold = true;
                sheet.Cells["E1"].SetStyle(title_time_hms_style);
                sheet.Cells.SetColumnWidth(4, 35);

                //Fix Type格式調整
                Excel.Style title_fix_type_style = sheet.Cells["F1"].GetStyle();
                Excel.Font title_fix_type_font = title_time_hms_style.Font;
                title_fix_type_style.ForegroundColor = Color.LightGray;
                title_fix_type_style.Pattern = Excel.BackgroundType.Solid;
                title_fix_type_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_fix_type_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_fix_type_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_fix_type_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_fix_type_font.IsBold = true;
                sheet.Cells["F1"].SetStyle(title_fix_type_style);

                //Ramdom combinations格式調整
                Excel.Style title_Ramdom_combinations_style = sheet.Cells["G1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b2 = sheet.Cells["H1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b3 = sheet.Cells["I1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b4 = sheet.Cells["J1"].GetStyle();
                Excel.Style title_Ramdom_combinations_style_b5 = sheet.Cells["K1"].GetStyle();
                Excel.Font title_Ramdom_combinations_font = title_Ramdom_combinations_style.Font;
                title_Ramdom_combinations_style.ForegroundColor = Color.LightGray;
                title_Ramdom_combinations_style.Pattern = Excel.BackgroundType.Solid;
                title_Ramdom_combinations_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b2.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b3.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b4.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_Ramdom_combinations_style_b5.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_Ramdom_combinations_font.IsBold = true;
                sheet.Cells.SetColumnWidth(6, 10);
                sheet.Cells.SetColumnWidth(7, 10);
                sheet.Cells["G1"].SetStyle(title_Ramdom_combinations_style);
                sheet.Cells["H1"].SetStyle(title_Ramdom_combinations_style_b2);
                sheet.Cells["I1"].SetStyle(title_Ramdom_combinations_style_b3);
                sheet.Cells["J1"].SetStyle(title_Ramdom_combinations_style_b4);
                sheet.Cells["K1"].SetStyle(title_Ramdom_combinations_style_b5);

                //SAT格式調整
                Excel.Style title_sat_style = sheet.Cells["L1"].GetStyle();
                Excel.Font title_sat_font = title_sat_style.Font;
                title_sat_style.ForegroundColor = Color.LightGray;
                title_sat_style.Pattern = Excel.BackgroundType.Solid;
                title_sat_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_sat_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_sat_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_sat_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_sat_font.IsBold = true;
                sheet.Cells.SetColumnWidth(11, 20);
                sheet.Cells["L1"].SetStyle(title_sat_style);

                //Mode格式調整
                Excel.Style title_mode_style = sheet.Cells["M1"].GetStyle();
                Excel.Font title_mode_font = title_mode_style.Font;
                title_mode_style.ForegroundColor = Color.LightGray;
                title_mode_style.Pattern = Excel.BackgroundType.Solid;
                title_mode_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_mode_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_mode_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_mode_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_mode_font.IsBold = true;
                sheet.Cells["M1"].SetStyle(title_mode_style);

                //Interval格式調整
                Excel.Style title_interval_style = sheet.Cells["N1"].GetStyle();
                Excel.Font title_interval_font = title_interval_style.Font;
                title_interval_style.ForegroundColor = Color.LightGray;
                title_interval_style.Pattern = Excel.BackgroundType.Solid;
                title_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_interval_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_interval_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_interval_font.IsBold = true;
                sheet.Cells["N1"].SetStyle(title_interval_style);

                //Interval_judge格式調整
                Excel.Style title_interval_judge_style = sheet.Cells["P1"].GetStyle();
                Excel.Font title_interval_judge_font = title_interval_judge_style.Font;
                title_interval_judge_style.ForegroundColor = Color.LightGray;
                title_interval_judge_style.Pattern = Excel.BackgroundType.Solid;
                title_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_interval_judge_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_interval_judge_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_interval_judge_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                title_interval_judge_font.IsBold = true;
                sheet.Cells.SetColumnWidth(15, 15);
                if (s3_interval_judge_flag == 1)
                {
                    title_interval_judge.PutValue("誤差值判定:False");
                    title_interval_judge_style.Font.Color = Color.Red;
                    s3_interval_judge_flag = 0;
                }
                else if (s3_interval_judge_flag == 0)
                {
                    title_interval_judge.PutValue("誤差值判定:OK");
                    title_interval_judge_style.Font.Color = Color.Green;
                }
                sheet.Cells["P1"].SetStyle(title_interval_judge_style);

                //Cycle格式調整
                Excel.Style title_cycle_style = sheet.Cells["Q1"].GetStyle();
                Excel.Font title_cycle_font = title_cycle_style.Font;
                title_cycle_style.ForegroundColor = Color.LightGray;
                title_cycle_style.Pattern = Excel.BackgroundType.Solid;
                title_cycle_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                title_cycle_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                title_cycle_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                title_cycle_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                sheet.Cells.SetColumnWidth(16, 10);
                title_cycle_font.IsBold = true;
                sheet.Cells["Q1"].SetStyle(title_cycle_style);

                //Cycle Free run 格式調整
                for (int free_run_border = 1; free_run_border <= s3_free_run_time; free_run_border++)
                {
                    Excel.Style title_cycle_free_run_style = sheet.Cells[free_run_border, 16].GetStyle();
                    Excel.Font title_cycle_free_run_font = title_cycle_free_run_style.Font;
                    title_cycle_free_run_style.ForegroundColor = Color.LightGray;
                    title_cycle_free_run_style.Pattern = Excel.BackgroundType.Solid;
                    title_cycle_free_run_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    title_cycle_free_run_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                    title_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    title_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    sheet.Cells.SetColumnWidth(16, 10);
                    title_cycle_free_run_font.IsBold = true;
                    sheet.Cells[free_run_border, 16].SetStyle(title_cycle_free_run_style);
                }

                /**
                 * GNSS、MDA、Setting sheet
                 */
                int index = wb.Worksheets.Add();    //新增一個GNSS sheet
                Excel.Worksheet sheet_mda = wb.Worksheets[index];

                sheet_mda.Name = "GNSS";
                s3_gnss_cell_flag = 0;
                s3_gnss_item = 0;
                s3_gps_prn_count = 1;
                s3_gps_snr_count = 2;
                s3_glo_prn_count = 3;
                s3_glo_snr_count = 4;
                s3_gal_prn_count = 5;
                s3_gal_snr_count = 6;
                s3_bei_prn_count = 7;
                s3_bei_snr_count = 8;
                s3_qzs_prn_count = 9;
                s3_qzs_snr_count = 10;
                for (int GNSS_item_count = 1; GNSS_item_count < convert_count3; GNSS_item_count++)
                {
                    if (s3_gnss_cell_flag == 0)
                    {
                        Excel.Cell excel_gnss_item = sheet_mda.Cells[s3_gnss_item, 0];
                        Excel.Cell excel_gps_prn = sheet_mda.Cells[s3_gps_prn_count, 0];
                        Excel.Cell excel_gps_snr = sheet_mda.Cells[s3_gps_snr_count, 0];
                        Excel.Cell excel_glo_prn = sheet_mda.Cells[s3_glo_prn_count, 0];
                        Excel.Cell excel_glo_snr = sheet_mda.Cells[s3_glo_snr_count, 0];
                        Excel.Cell excel_gal_prn = sheet_mda.Cells[s3_gal_prn_count, 0];
                        Excel.Cell excel_gal_snr = sheet_mda.Cells[s3_gal_snr_count, 0];
                        Excel.Cell excel_bei_prn = sheet_mda.Cells[s3_bei_prn_count, 0];
                        Excel.Cell excel_bei_snr = sheet_mda.Cells[s3_bei_snr_count, 0];
                        Excel.Cell excel_qzs_prn = sheet_mda.Cells[s3_qzs_prn_count, 0];
                        Excel.Cell excel_qzs_snr = sheet_mda.Cells[s3_qzs_snr_count, 0];

                        excel_gnss_item.PutValue(S3_ITEM[GNSS_item_count]);
                        excel_gps_prn.PutValue(S3_GPS_PRN[GNSS_item_count]);
                        excel_gps_snr.PutValue(S3_GPS_SNR[GNSS_item_count]);
                        excel_glo_prn.PutValue(S3_GLO_PRN[GNSS_item_count]);
                        excel_glo_snr.PutValue(S3_GLO_SNR[GNSS_item_count]);
                        excel_gal_prn.PutValue(S3_GAL_PRN[GNSS_item_count]);
                        excel_gal_snr.PutValue(S3_GAL_SNR[GNSS_item_count]);
                        excel_bei_prn.PutValue(S3_BEI_PRN[GNSS_item_count]);
                        excel_bei_snr.PutValue(S3_BEI_SNR[GNSS_item_count]);
                        excel_qzs_prn.PutValue(S3_QZS_PRN[GNSS_item_count]);
                        excel_qzs_snr.PutValue(S3_QZS_SNR[GNSS_item_count]);

                        Excel.Style excel_gnss_item_STYLE = sheet_mda.Cells[s3_gnss_item, 0].GetStyle();
                        Excel.Font excel_gnss_item_FONT = excel_gnss_item_STYLE.Font;
                        excel_gnss_item_FONT.IsBold = true;
                        sheet_mda.Cells[s3_gnss_item, 0].SetStyle(excel_gnss_item_STYLE);

                        s3_gnss_cell_flag++;
                    }
                    else if (s3_gnss_cell_flag > 0)
                    {
                        s3_gnss_item = s3_gnss_item + 11;
                        s3_gps_prn_count = s3_gps_prn_count + 11;
                        s3_gps_snr_count = s3_gps_snr_count + 11;
                        s3_glo_prn_count = s3_glo_prn_count + 11;
                        s3_glo_snr_count = s3_glo_snr_count + 11;
                        s3_gal_prn_count = s3_gal_prn_count + 11;
                        s3_gal_snr_count = s3_gal_snr_count + 11;
                        s3_bei_prn_count = s3_bei_prn_count + 11;
                        s3_bei_snr_count = s3_bei_snr_count + 11;
                        s3_qzs_prn_count = s3_qzs_prn_count + 11;
                        s3_qzs_snr_count = s3_qzs_snr_count + 11;

                        Excel.Cell excel_gnss_item = sheet_mda.Cells[s3_gnss_item, 0];
                        Excel.Cell excel_gps_prn = sheet_mda.Cells[s3_gps_prn_count, 0];
                        Excel.Cell excel_gps_snr = sheet_mda.Cells[s3_gps_snr_count, 0];
                        Excel.Cell excel_glo_prn = sheet_mda.Cells[s3_glo_prn_count, 0];
                        Excel.Cell excel_glo_snr = sheet_mda.Cells[s3_glo_snr_count, 0];
                        Excel.Cell excel_gal_prn = sheet_mda.Cells[s3_gal_prn_count, 0];
                        Excel.Cell excel_gal_snr = sheet_mda.Cells[s3_gal_snr_count, 0];
                        Excel.Cell excel_bei_prn = sheet_mda.Cells[s3_bei_prn_count, 0];
                        Excel.Cell excel_bei_snr = sheet_mda.Cells[s3_bei_snr_count, 0];
                        Excel.Cell excel_qzs_prn = sheet_mda.Cells[s3_qzs_prn_count, 0];
                        Excel.Cell excel_qzs_snr = sheet_mda.Cells[s3_qzs_snr_count, 0];

                        excel_gnss_item.PutValue(S3_ITEM[GNSS_item_count]);
                        excel_gps_prn.PutValue(S3_GPS_PRN[GNSS_item_count]);
                        excel_gps_snr.PutValue(S3_GPS_SNR[GNSS_item_count]);
                        excel_glo_prn.PutValue(S3_GLO_PRN[GNSS_item_count]);
                        excel_glo_snr.PutValue(S3_GLO_SNR[GNSS_item_count]);
                        excel_gal_prn.PutValue(S3_GAL_PRN[GNSS_item_count]);
                        excel_gal_snr.PutValue(S3_GAL_SNR[GNSS_item_count]);
                        excel_bei_prn.PutValue(S3_BEI_PRN[GNSS_item_count]);
                        excel_bei_snr.PutValue(S3_BEI_SNR[GNSS_item_count]);
                        excel_qzs_prn.PutValue(S3_QZS_PRN[GNSS_item_count]);
                        excel_qzs_snr.PutValue(S3_QZS_SNR[GNSS_item_count]);

                        Excel.Style excel_gnss_item_STYLE = sheet_mda.Cells[s3_gnss_item, 0].GetStyle();
                        Excel.Font excel_gnss_item_FONT = excel_gnss_item_STYLE.Font;
                        excel_gnss_item_FONT.IsBold = true;
                        sheet_mda.Cells[s3_gnss_item, 0].SetStyle(excel_gnss_item_STYLE);

                        s3_gnss_cell_flag++;
                    }

                }

                Excel.Cell gps_epo_enable = sheet_mda.Cells["F1"];
                Excel.Cell glo_epo_enable = sheet_mda.Cells["F2"];
                Excel.Cell gal_epo_enable = sheet_mda.Cells["F3"];
                Excel.Cell bei_epo_enable = sheet_mda.Cells["F4"];

                Excel.Cell TTFF_item = sheet_mda.Cells["F6"];
                Excel.Cell TTFF_USAGE_TIME = sheet_mda.Cells["F7"];
                Excel.Cell Analyze_UTC_ITEM = sheet_mda.Cells["F8"];
                Excel.Cell Analyze_UTC_TIME = sheet_mda.Cells["F9"];

                //[AVG:FIRST - PREVIOUS FIX]
                Excel.Cell AVG_FIRST_PREVIOUS_FIX = sheet_mda.Cells["F11"];
                Excel.Cell A2_Start_Stop_Total_item = sheet_mda.Cells["F23"];
                Excel.Cell A2_gps_sat_avg = sheet_mda.Cells["F24"];
                Excel.Cell A2_gps_snr_avg = sheet_mda.Cells["F25"];
                Excel.Cell A2_glo_sat_avg = sheet_mda.Cells["F26"];
                Excel.Cell A2_glo_snr_avg = sheet_mda.Cells["F27"];
                Excel.Cell A2_gal_sat_avg = sheet_mda.Cells["F28"];
                Excel.Cell A2_gal_snr_avg = sheet_mda.Cells["F29"];
                Excel.Cell A2_bei_sat_avg = sheet_mda.Cells["F30"];
                Excel.Cell A2_bei_snr_avg = sheet_mda.Cells["F31"];

                //[AVG:FIRST - FIX]
                Excel.Cell AVG_FIRST_FIX = sheet_mda.Cells["F22"];
                Excel.Cell A1_Start_Stop_Total_item = sheet_mda.Cells["F12"];
                Excel.Cell A1_gps_sat_avg = sheet_mda.Cells["F13"];
                Excel.Cell A1_gps_snr_avg = sheet_mda.Cells["F14"];
                Excel.Cell A1_glo_sat_avg = sheet_mda.Cells["F15"];
                Excel.Cell A1_glo_snr_avg = sheet_mda.Cells["F16"];
                Excel.Cell A1_gal_sat_avg = sheet_mda.Cells["F17"];
                Excel.Cell A1_gal_snr_avg = sheet_mda.Cells["F18"];
                Excel.Cell A1_bei_sat_avg = sheet_mda.Cells["F19"];
                Excel.Cell A1_bei_snr_avg = sheet_mda.Cells["F20"];

                //[AVG:FIX - LAST]
                Excel.Cell AVG_FIX_LAST = sheet_mda.Cells["F33"];
                Excel.Cell A3_Start_Stop_Total_item = sheet_mda.Cells["F34"];
                Excel.Cell A3_gps_sat_avg = sheet_mda.Cells["F35"];
                Excel.Cell A3_gps_snr_avg = sheet_mda.Cells["F36"];
                Excel.Cell A3_glo_sat_avg = sheet_mda.Cells["F37"];
                Excel.Cell A3_glo_snr_avg = sheet_mda.Cells["F38"];
                Excel.Cell A3_gal_sat_avg = sheet_mda.Cells["F39"];
                Excel.Cell A3_gal_snr_avg = sheet_mda.Cells["F40"];
                Excel.Cell A3_bei_sat_avg = sheet_mda.Cells["F41"];
                Excel.Cell A3_bei_snr_avg = sheet_mda.Cells["F42"];

                //[AVG:FIRST - LAST]
                Excel.Cell AVG_FIRST_LAST = sheet_mda.Cells["F44"];
                Excel.Cell A4_Start_Stop_Total_item = sheet_mda.Cells["F45"];
                Excel.Cell A4_gps_sat_avg = sheet_mda.Cells["F46"];
                Excel.Cell A4_gps_snr_avg = sheet_mda.Cells["F47"];
                Excel.Cell A4_glo_sat_avg = sheet_mda.Cells["F48"];
                Excel.Cell A4_glo_snr_avg = sheet_mda.Cells["F49"];
                Excel.Cell A4_gal_sat_avg = sheet_mda.Cells["F50"];
                Excel.Cell A4_gal_snr_avg = sheet_mda.Cells["F51"];
                Excel.Cell A4_bei_sat_avg = sheet_mda.Cells["F52"];
                Excel.Cell A4_bei_snr_avg = sheet_mda.Cells["F53"];

                gps_epo_enable.PutValue(S3_GNSS_EPO[0]);
                glo_epo_enable.PutValue(S3_GNSS_EPO[1]);
                gal_epo_enable.PutValue(S3_GNSS_EPO[2]);
                bei_epo_enable.PutValue(S3_GNSS_EPO[3]);

                TTFF_item.PutValue(s3_TTFF_item);
                TTFF_USAGE_TIME.PutValue(s3_TTFF_time);
                Analyze_UTC_ITEM.PutValue(s3_Analyze_UTC_item);
                Analyze_UTC_TIME.PutValue(s3_Analyze_UTC_time);

                AVG_FIRST_FIX.PutValue("[AVG:FIRST - FIX]");
                A2_Start_Stop_Total_item.PutValue(S3_Area1_2_4_startitem + ", " + S3_Area2_stopitem + ", " + S3_Area2_totalitem);
                A2_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S3_A2_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S3_A2_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S3_A2_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S3_A2_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S3_A2_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S3_A2_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S3_A2_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A2_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S3_A2_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIRST_PREVIOUS_FIX.PutValue("[AVG:FIRST - PREVIOUS FIX]");
                A1_Start_Stop_Total_item.PutValue(S3_Area1_2_4_startitem + ", " + S3_Area1_stopitem + ", " + S3_Area1_totalitem);
                A1_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S3_A1_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S3_A1_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S3_A1_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S3_A1_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S3_A1_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S3_A1_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S3_A1_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A1_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S3_A1_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIX_LAST.PutValue("[AVG:FIX - LAST]");
                A3_Start_Stop_Total_item.PutValue(S3_Area3_startitem + ", " + S3_Area3_stopitem + ", " + S3_Area3_totalitem);
                A3_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S3_A3_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S3_A3_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S3_A3_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S3_A3_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S3_A3_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S3_A3_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S3_A3_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A3_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S3_A3_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                AVG_FIRST_LAST.PutValue("[AVG:FIRST - LAST]");
                A4_Start_Stop_Total_item.PutValue(S3_Area1_2_4_startitem + ", " + S3_Area4_stopitem + ", " + S3_Area4_totalitem);
                A4_gps_sat_avg.PutValue("[GPS]SAT_AVG = " + S3_A4_GPS_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gps_snr_avg.PutValue("[GPS]SNR_AVG = " + S3_A4_GPS_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_glo_sat_avg.PutValue("[GLO]SAT_AVG = " + S3_A4_GLO_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_glo_snr_avg.PutValue("[GLO]SNR_AVG = " + S3_A4_GLO_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gal_sat_avg.PutValue("[GAL]SAT_AVG = " + S3_A4_GAL_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_gal_snr_avg.PutValue("[GAL]SNR_AVG = " + S3_A4_GAL_CN_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_bei_sat_avg.PutValue("[BEI]SAT_AVG = " + S3_A4_BEI_SAT_AVG.ToString("F", CultureInfo.InvariantCulture));
                A4_bei_snr_avg.PutValue("[BEI]SNR_AVG = " + S3_A4_BEI_CN_AVG.ToString("F", CultureInfo.InvariantCulture));

                //MDA 格式調整
                sheet_mda.Cells.SetColumnWidth(0, 62);  //GNSS欄位寬度
                sheet_mda.Cells.SetColumnWidth(5, 50);  //MDA欄位寬度

                Excel.Style gps_epo_enable_STYLE = sheet_mda.Cells["F1"].GetStyle();
                Excel.Font gps_epo_enable_FONT = gps_epo_enable_STYLE.Font;
                gps_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F1"].SetStyle(gps_epo_enable_STYLE);

                Excel.Style glo_epo_enable_STYLE = sheet_mda.Cells["F2"].GetStyle();
                Excel.Font glo_epo_enable_FONT = glo_epo_enable_STYLE.Font;
                glo_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F2"].SetStyle(glo_epo_enable_STYLE);

                Excel.Style gal_epo_enable_STYLE = sheet_mda.Cells["F3"].GetStyle();
                Excel.Font gal_epo_enable_FONT = gal_epo_enable_STYLE.Font;
                gal_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F3"].SetStyle(gal_epo_enable_STYLE);

                Excel.Style bei_epo_enable_STYLE = sheet_mda.Cells["F4"].GetStyle();
                Excel.Font bei_epo_enable_FONT = bei_epo_enable_STYLE.Font;
                bei_epo_enable_FONT.IsBold = true;
                sheet_mda.Cells["F4"].SetStyle(bei_epo_enable_STYLE);

                Excel.Style TTFF_item_STYLE = sheet_mda.Cells["F6"].GetStyle();
                Excel.Font TTFF_item_FONT = TTFF_item_STYLE.Font;
                TTFF_item_FONT.IsBold = true;
                sheet_mda.Cells["F6"].SetStyle(TTFF_item_STYLE);

                Excel.Style TTFF_USAGE_TIME_STYLE = sheet_mda.Cells["F7"].GetStyle();
                Excel.Font TTFF_USAGE_TIME_FONT = TTFF_USAGE_TIME_STYLE.Font;
                TTFF_USAGE_TIME_FONT.IsBold = true;
                sheet_mda.Cells["F7"].SetStyle(TTFF_USAGE_TIME_STYLE);

                Excel.Style Analyze_UTC_ITEM_STYLE = sheet_mda.Cells["F8"].GetStyle();
                Excel.Font Analyze_UTC_ITEM_FONT = Analyze_UTC_ITEM_STYLE.Font;
                Analyze_UTC_ITEM_FONT.IsBold = true;
                sheet_mda.Cells["F8"].SetStyle(Analyze_UTC_ITEM_STYLE);

                Excel.Style Analyze_UTC_TIME_STYLE = sheet_mda.Cells["F9"].GetStyle();
                Excel.Font Analyze_UTC_TIME_FONT = Analyze_UTC_TIME_STYLE.Font;
                Analyze_UTC_TIME_FONT.IsBold = true;
                sheet_mda.Cells["F9"].SetStyle(Analyze_UTC_TIME_STYLE);

                Excel.Style AVG_FIRST_FIX_STYLE = sheet_mda.Cells["F11"].GetStyle();
                Excel.Font AVG_FIRST_FIX_FONT = AVG_FIRST_FIX_STYLE.Font;
                AVG_FIRST_FIX_FONT.IsBold = true;
                sheet_mda.Cells["F11"].SetStyle(AVG_FIRST_FIX_STYLE);

                Excel.Style AVG_FIRST_PREVIOUS_FIX_STYLE = sheet_mda.Cells["F22"].GetStyle();
                Excel.Font AVG_FIRST_PREVIOUS_FIX_FONT = AVG_FIRST_PREVIOUS_FIX_STYLE.Font;
                AVG_FIRST_PREVIOUS_FIX_FONT.IsBold = true;
                sheet_mda.Cells["F22"].SetStyle(AVG_FIRST_PREVIOUS_FIX_STYLE);

                Excel.Style AVG_FIX_LAST_STYLE = sheet_mda.Cells["F33"].GetStyle();
                Excel.Font AVG_FIX_LAST_FONT = AVG_FIX_LAST_STYLE.Font;
                AVG_FIX_LAST_FONT.IsBold = true;
                sheet_mda.Cells["F33"].SetStyle(AVG_FIX_LAST_STYLE);

                Excel.Style AVG_FIRST_LAST_STYLE = sheet_mda.Cells["F44"].GetStyle();
                Excel.Font AVG_FIRST_LAST_FONT = AVG_FIRST_LAST_STYLE.Font;
                AVG_FIRST_LAST_FONT.IsBold = true;
                sheet_mda.Cells["F44"].SetStyle(AVG_FIRST_LAST_STYLE);

                //Setting
                string[] setting_Array = richTextBox12.Lines;
                for (int counter = 0; counter < setting_Array.Length; counter++)
                {
                    s3_excel_setting[counter] = setting_Array[counter];
                    if (counter == 0)                                                                   //Periodic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Blue;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 0 && counter < 12)                                               //Periodic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Blue;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 12)                                                             //Dynamic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Orange;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 12 && counter < 17)                                             //Dynamic
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.Orange;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 17)                                                             //Geofencing
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(32, 178, 170);
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 17 && counter < 25)                                              //Geofencing
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(32, 178, 170);
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 25)                                                             //MotionDetection
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(165, 42, 42);
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 25 && counter < 30)                                              //MotionDetection
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_style.Font.Color = Color.FromArgb(165, 42, 42);
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter == 30)                                                             //GPS_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 30 && counter < 36)                                              //GPS_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                    }
                    else if (counter == 36)                                                             //GLO_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 36 && counter < 42)                                              //GLO_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                    }
                    else if (counter == 42)                                                             //GAL_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 42 && counter < 48)                                              //GAL_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                    }
                    else if (counter == 48)                                                             //BEI_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                        Excel.Style all_setting_style = sheet_mda.Cells[counter, 3].GetStyle();
                        Excel.Font all_setting_font = all_setting_style.Font;
                        all_setting_font.IsBold = true;
                        sheet_mda.Cells[counter, 3].SetStyle(all_setting_style);
                    }
                    else if (counter > 48 && counter < 54)                                              //BEI_EPO
                    {
                        Excel.Cell all_setting = sheet_mda.Cells[counter, 3];
                        all_setting.PutValue(s3_excel_setting[counter]);
                    }

                }
                sheet_mda.Cells.SetColumnWidth(3, 30);
                //Setting

                /*
                 * Merge Excel
                 */
                Excel.Cell merge_title_Item = merge_ws.Cells[9, 18];
                Excel.Cell merge_title_fix_yyyy_mm_dd = merge_ws.Cells[9, 19];
                Excel.Cell merge_title_fix_hh_mm_ss = merge_ws.Cells[9, 20];
                Excel.Cell merge_title_Interval = merge_ws.Cells[9, 21];
                Excel.Cell merge_title_dot_message = merge_ws.Cells[9, 22];
                Excel.Cell merge_antenna = merge_ws.Cells["S8"];
                Excel.Cell merge_anklet = merge_ws.Cells["S9"];
                Excel.Cell merge_antenna_name = merge_ws.Cells["T8"];
                Excel.Cell merge_id_name = merge_ws.Cells["T9"];

                merge_title_Item.PutValue("Item");
                merge_title_fix_yyyy_mm_dd.PutValue("定位日期(年_月_日)");
                merge_title_fix_hh_mm_ss.PutValue("定位日期(時_分_秒)");
                merge_title_Interval.PutValue("Interval");
                merge_title_dot_message.PutValue("打點資訊");
                merge_antenna.PutValue("天線");
                merge_antenna_name.PutValue(" : ");
                merge_anklet.PutValue("腳環ID");
                merge_id_name.PutValue(" : " + s3_opfilename);

                if (chkfile == 1)
                {
                    String GNSS_Profile, EPOcheck;
                    DateTime Wakeup_time = WakeupTime.Value;
                    GNSS_Profile = SatCom.Text;
                    EPOcheck = EPOCom.Text;
                    String str_wakeuptime = Wakeup_time.ToString("yyyy/MM/dd HH:mm:ss");

                    Excel.Cell merge_sat = merge_ws.Cells["A1"];
                    Excel.Cell merge_test_time = merge_ws.Cells["A2"];
                    Excel.Cell merge_firmware_version = merge_ws.Cells["A3"];
                    Excel.Cell merge_parameter = merge_ws.Cells["A4"];
                    Excel.Cell merge_standard = merge_ws.Cells["A5"];
                    Excel.Cell merge_gnss_profile = merge_ws.Cells["B1"];
                    Excel.Cell merge_test_wakeuptime_value = merge_ws.Cells["B2"];
                    Excel.Cell merge_firmware_version_value = merge_ws.Cells["B3"];
                    Excel.Cell merge_parameter_value = merge_ws.Cells["B4"];
                    Excel.Cell merge_standard_value1 = merge_ws.Cells["B5"];
                    Excel.Cell merge_standard_value2 = merge_ws.Cells["C5"];

                    merge_sat.PutValue("衛星:");
                    merge_test_time.PutValue("測試時間:");
                    merge_firmware_version.PutValue("分位:");
                    merge_parameter.PutValue("參數:");
                    merge_standard.PutValue("標準:");

                    if (GNSS_Profile.Equals("G") == true)                           //GPS Only
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+EPO+(QZSS)");
                                merge_gnss_profile.Characters(8, 6).Font.Color = Color.Red;

                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+(QZSS)");
                                merge_gnss_profile.Characters(4, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GR") == true)                 //G + GR
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+EPO+(QZSS)");
                                merge_gnss_profile.Characters(16, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+(QZSS)");
                                merge_gnss_profile.Characters(12, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GE") == true)                 //G + GE
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+EPO+(QZSS)");
                                merge_gnss_profile.Characters(16, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+(QZSS)");
                                merge_gnss_profile.Characters(12, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GALILEO");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GB") == true)                 //G + GB
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+EPO+(QZSS)");
                                merge_gnss_profile.Characters(15, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+(QZSS)");
                                merge_gnss_profile.Characters(11, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+BEIDOU");
                            }
                        }
                    }
                    else if (GNSS_Profile.Equals("G+GR+GE+GB") == true)       //G + GR + GE + GB
                    {
                        if (QZSSChk.Checked == true)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+EPO+(QZSS)");
                                merge_gnss_profile.Characters(31, 6).Font.Color = Color.Red;
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+(QZSS)");
                                merge_gnss_profile.Characters(27, 6).Font.Color = Color.Red;
                            }
                        }
                        else if (QZSSChk.Checked == false)
                        {
                            if (EPOcheck.Equals("True") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU+EPO");
                            }
                            else if (EPOcheck.Equals("False") == true)
                            {
                                merge_gnss_profile.PutValue("GPS+GLONASS+GALILEO+BEIDOU");
                            }
                        }
                    }
                    merge_test_wakeuptime_value.PutValue(str_wakeuptime);
                    merge_firmware_version_value.PutValue(label28.Text);
                    merge_parameter_value.PutValue(s3_t0.ToString() + "、" + s3_t1.ToString() + "、" + s3_t2.ToString() + "、" + s3_t3.ToString() + "、" + s3_t4.ToString());
                    merge_standard_value1.PutValue("free run(" + s3_t1.ToString() + "s/" + s3_t0.ToString() + "s=" + s3_free_run_time.ToString() + "組)");
                    merge_standard_value2.PutValue("小循環(一組" + (s3_t3 + s3_t4).ToString() + "s，共" + (s3_t3 / s3_t0).ToString() + "個點)");

                    Excel.Style merge_standard_value1_style = merge_ws.Cells["B5"].GetStyle();
                    Excel.Font merge_standard_value1_font = merge_standard_value1_style.Font;
                    merge_standard_value1_style.ForegroundColor = Color.FromArgb(191, 191, 191);
                    merge_standard_value1_style.Pattern = Excel.BackgroundType.Solid;
                    merge_standard_value1_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    merge_standard_value1_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    merge_standard_value1_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value1_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_ws.Cells["B5"].SetStyle(merge_standard_value1_style);

                    Excel.Style merge_standard_value2_style = merge_ws.Cells["C5"].GetStyle();
                    Excel.Font merge_standard_value2_font = merge_standard_value2_style.Font;
                    merge_standard_value2_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                    merge_standard_value2_style.Pattern = Excel.BackgroundType.Solid;
                    merge_standard_value2_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_standard_value2_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    merge_standard_value2_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    merge_ws.Cells["C5"].SetStyle(merge_standard_value2_style);

                    Excel.Cell merge_title_t0 = merge_ws.Cells["G1"];
                    Excel.Cell merge_title_t1 = merge_ws.Cells["G2"];
                    Excel.Cell merge_title_t2 = merge_ws.Cells["G3"];
                    Excel.Cell merge_title_t3 = merge_ws.Cells["G4"];
                    Excel.Cell merge_title_t4 = merge_ws.Cells["G5"];
                    Excel.Cell merge_t0 = merge_ws.Cells["H1"];
                    Excel.Cell merge_t1 = merge_ws.Cells["H2"];
                    Excel.Cell merge_t2 = merge_ws.Cells["H3"];
                    Excel.Cell merge_t3 = merge_ws.Cells["H4"];
                    Excel.Cell merge_t4 = merge_ws.Cells["H5"];

                    merge_title_t0.PutValue("T0");
                    merge_title_t1.PutValue("T1");
                    merge_title_t2.PutValue("T2");
                    merge_title_t3.PutValue("T3");
                    merge_title_t4.PutValue("T4");
                    merge_t0.PutValue(s3_t0.ToString());
                    merge_t1.PutValue(s3_t1.ToString());
                    merge_t2.PutValue(s3_t2.ToString());
                    merge_t3.PutValue(s3_t3.ToString());
                    merge_t4.PutValue(s3_t4.ToString());

                    Excel.Cell merge_title_input_val = merge_ws.Cells["J1"];
                    Excel.Cell merge_title_time_cal = merge_ws.Cells["J2"];
                    Excel.Cell merge_title_cycle_cal = merge_ws.Cells["J3"];
                    Excel.Cell merge_time_cal = merge_ws.Cells["K2"];
                    Excel.Cell merge_cycle_cal = merge_ws.Cells["K3"];

                    merge_title_input_val.PutValue("請輸入換算數字 = >");
                    merge_title_time_cal.PutValue("時間換算");
                    merge_title_cycle_cal.PutValue("組數換算");
                    merge_time_cal.Formula = "=(K1*3600)/" + s3_t1.ToString();
                    merge_cycle_cal.Formula = "K2/(" + s3_t2.ToString() + "+" + s3_t3.ToString() + ")";

                    chkfile = 0;
                }

                //Item 格式調整
                Excel.Style merge_title_Item_style = merge_ws.Cells[9, 18].GetStyle();
                Excel.Font merge_title_Item_font = merge_title_Item_style.Font;
                merge_title_Item_style.ForegroundColor = Color.LightGray;
                merge_title_Item_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_Item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_Item_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_Item_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_Item_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Item_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_Item_font.IsBold = true;
                merge_ws.Cells[9, 18].SetStyle(merge_title_Item_style);

                //定位日期(年_月_日) 格式調整
                Excel.Style merge_title_fix_yyyy_mm_dd_style = merge_ws.Cells[9, 19].GetStyle();
                Excel.Font merge_title_fix_yyyy_mm_dd_font = merge_title_fix_yyyy_mm_dd_style.Font;
                merge_title_fix_yyyy_mm_dd_style.ForegroundColor = Color.LightGray;
                merge_title_fix_yyyy_mm_dd_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_fix_yyyy_mm_dd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_yyyy_mm_dd_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_fix_yyyy_mm_dd_font.IsBold = true;
                merge_ws.Cells[9, 19].SetStyle(merge_title_fix_yyyy_mm_dd_style);

                //定位日期(時_分_秒) 格式調整
                Excel.Style merge_title_fix_hh_mm_ss_style = merge_ws.Cells[9, 20].GetStyle();
                Excel.Font merge_title_fix_hh_mm_ss_font = merge_title_fix_hh_mm_ss_style.Font;
                merge_title_fix_hh_mm_ss_style.ForegroundColor = Color.LightGray;
                merge_title_fix_hh_mm_ss_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_fix_hh_mm_ss_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_fix_hh_mm_ss_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_fix_hh_mm_ss_font.IsBold = true;
                merge_ws.Cells[9, 20].SetStyle(merge_title_fix_hh_mm_ss_style);

                //Interval 格式調整
                Excel.Style merge_title_Interval_style = merge_ws.Cells[9, 21].GetStyle();
                Excel.Font merge_title_Interval_font = merge_title_Interval_style.Font;
                merge_title_Interval_style.ForegroundColor = Color.LightGray;
                merge_title_Interval_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_Interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_Interval_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_Interval_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_Interval_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_Interval_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_Interval_font.IsBold = true;
                merge_ws.Cells[9, 21].SetStyle(merge_title_Interval_style);

                //打點資訊 格式調整
                Excel.Style merge_title_dot_message_style = merge_ws.Cells[9, 22].GetStyle();
                Excel.Font merge_title_dot_message_font = merge_title_dot_message_style.Font;
                merge_title_dot_message_style.ForegroundColor = Color.LightGray;
                merge_title_dot_message_style.Pattern = Excel.BackgroundType.Solid;
                merge_title_dot_message_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                merge_title_dot_message_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                merge_title_dot_message_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                merge_title_dot_message_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                merge_title_dot_message_font.IsBold = true;
                merge_ws.Cells[9, 22].SetStyle(merge_title_dot_message_style);

                merge_ws.Cells.SetColumnWidth(18, 10);
                merge_ws.Cells.SetColumnWidth(19, 40);
                merge_ws.Cells.SetColumnWidth(20, 40);
                merge_ws.Cells.SetColumnWidth(21, 17);
                merge_ws.Cells.SetColumnWidth(22, 10);
                merge_ws.Cells.SetColumnWidth(23, 1);

                s3_merge_count = 9;
                //Save S3 Item、定位日期(年_月_日)、定位日期(時_分_秒)、Interval Data
                for (cmd_count = 1; cmd_count < convert_count3; cmd_count++)
                {
                    s3_merge_count += 1;
                    //宣告欄位
                    Excel.Cell Merge3_item = merge_ws.Cells[s3_merge_count, 18];
                    Excel.Cell Merge3_ymd = merge_ws.Cells[s3_merge_count, 19];
                    Excel.Cell Merge3_hms = merge_ws.Cells[s3_merge_count, 20];

                    //存放欄位
                    Merge3_item.PutValue(Int32.Parse(s3_Item[cmd_count]));
                    Merge3_ymd.PutValue(s3_ymd[cmd_count]);
                    Merge3_hms.PutValue(s3_hms[cmd_count]);
                    //宣告style調整格式
                    Excel.Style Merge3_item_style = merge_ws.Cells[s3_merge_count, 18].GetStyle();
                    Excel.Style Merge3_ymd_style = merge_ws.Cells[s3_merge_count, 19].GetStyle();
                    Excel.Style Merge3_hms_style = merge_ws.Cells[s3_merge_count, 20].GetStyle();

                    //Set color
                    //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4
                    switch (s3_mode_font_color[cmd_count])
                    {
                        case 0:
                            break;
                        case 1:
                            Merge3_item_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Merge3_ymd_style.Font.Color = Color.FromArgb(0, 191, 255);
                            Merge3_hms_style.Font.Color = Color.FromArgb(0, 191, 255);
                            break;
                        case 2:
                            Merge3_item_style.Font.Color = Color.Blue;
                            Merge3_ymd_style.Font.Color = Color.Blue;
                            Merge3_hms_style.Font.Color = Color.Blue;
                            break;
                        case 3:
                            Merge3_item_style.Font.Color = Color.Orange;
                            Merge3_ymd_style.Font.Color = Color.Orange;
                            Merge3_hms_style.Font.Color = Color.Orange;
                            break;
                        case 4:
                            Merge3_item_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Merge3_ymd_style.Font.Color = Color.FromArgb(32, 178, 170);
                            Merge3_hms_style.Font.Color = Color.FromArgb(32, 178, 170);
                            break;
                    }


                    //字體置中
                    Merge3_item_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Merge3_ymd_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    Merge3_hms_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    //style set
                    merge_ws.Cells[s3_merge_count, 18].SetStyle(Merge3_item_style);
                    merge_ws.Cells[s3_merge_count, 19].SetStyle(Merge3_ymd_style);
                    merge_ws.Cells[s3_merge_count, 20].SetStyle(Merge3_hms_style);


                    if (cmd_count > 1)
                    {
                        Excel.Cell Merge3_interval = merge_ws.Cells[s3_merge_count, 21];
                        //Excel.Cell Merge3_interval_judge = merge_ws.Cells[s3_merge_count, 22];
                        Merge3_interval.PutValue(s3_interval[cmd_count]);
                        //Merge3_interval_judge.PutValue(s3_interval_judge[cmd_count]);
                        Excel.Style Merge3_interval_style = merge_ws.Cells[s3_merge_count, 21].GetStyle();
                        //Excel.Style Merge3_interval_judge_style = merge_ws.Cells[s3_merge_count, 22].GetStyle();
                        //Set Interval Font color
                        //DeepSkyBlue : 1, Blue : 2, Orange : 3, LightSeaGreen : 4, Red : 5
                        switch (s3_interval_font_color[cmd_count])
                        {
                            case 0:
                                break;
                            case 1:
                                Merge3_interval_style.Font.Color = Color.FromArgb(0, 191, 255);
                                break;
                            case 2:
                                Merge3_interval_style.Font.Color = Color.Blue;
                                break;
                            case 3:
                                Merge3_interval_style.Font.Color = Color.Orange;
                                break;
                            case 4:
                                Merge3_interval_style.Font.Color = Color.FromArgb(32, 178, 170);
                                break;
                            case 5:
                                Merge3_interval_style.Font.Color = Color.Red;
                                //s3_interval_judge_flag = 1;
                                break;

                        }
                        Merge3_interval_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        //Merge3_interval_judge_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                        merge_ws.Cells[s3_merge_count, 21].SetStyle(Merge3_interval_style);
                        //merge_ws.Cells[s3_merge_count, 22].SetStyle(Merge3_interval_judge_style);
                    }

                }
                /*
                 * s3 free run cycle
                 */
                Excel.Cells merge_free_run_time = merge_ws.Cells;
                merge_free_run_time.Merge(10, 22, s3_free_run_time, 1);
                Excel.Cell merge_cycle_free_run = merge_ws.Cells["W11"];
                merge_cycle_free_run.PutValue(s3_free_run_time.ToString() + "組");
                //Cycle Free run 格式調整
                for (int free_run_border = 10; free_run_border <= (s3_free_run_time + 9); free_run_border++)
                {
                    Excel.Style title_merge_cycle_free_run_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                    Excel.Font title_merge_cycle_free_run_font = title_merge_cycle_free_run_style.Font;
                    title_merge_cycle_free_run_style.ForegroundColor = Color.LightGray;
                    title_merge_cycle_free_run_style.Pattern = Excel.BackgroundType.Solid;
                    title_merge_cycle_free_run_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                    title_merge_cycle_free_run_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                    title_merge_cycle_free_run_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                    merge_ws.Cells.SetColumnWidth(22, 10);
                    title_merge_cycle_free_run_font.IsBold = true;
                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_free_run_style);
                }
                /*
                 * s3 free run cycle
                 */
                /*
                 * s3 merge cycle sheet
                 */
                excel_mode_flag = 0;
                merge_excel_mode_frame = 9;
                for (int merge_excel_cycle_count = 0; merge_excel_cycle_count <= s3_cycle; merge_excel_cycle_count++)
                {
                    Excel.Cells merge_cycle_time_frame = merge_ws.Cells;
                    Excel.Cell merge_cycle_time;
                    switch (s3_cycle_mode_judge[merge_excel_cycle_count])
                    {
                        //T3~T4
                        case 2:
                            if (excel_mode_flag != 3 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)               //t3_t4的first cycle time
                                {
                                    merge_excel_mode_frame += s3_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_t3_t4_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                    merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(22, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 2;
                                }
                                else if (excel_mode_flag == 2 && s3_cycle_add[merge_excel_cycle_count] != 0)               //如果t3_t4的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s3_t3_t4_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_t3_t4_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                    merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle T3~T4 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_t3_t4_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(22, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                    }
                                }

                            }
                            else if (excel_mode_flag == 3 && s3_cycle_add[merge_excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                            {
                                merge_excel_mode_frame += s3_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_t3_t4_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(22, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            else if (excel_mode_flag == 4 && s3_cycle_add[merge_excel_cycle_count] != 0)            //如果geofencing的cycle time還沒結束繼續累加
                            {
                                merge_excel_mode_frame += s3_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_t3_t4_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_t3_t4_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(22, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 2;
                            }
                            break;

                        //Dynamic
                        case 3:
                            if (excel_mode_flag != 2 && excel_mode_flag != 4)
                            {
                                if (excel_mode_flag == 0)            //如果Dynamic的first cycle time
                                {
                                    merge_excel_mode_frame += s3_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_dynamic_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                    merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(22, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 3;
                                }
                                else if (excel_mode_flag == 3 && s3_cycle_add[merge_excel_cycle_count] != 0)            //如果dynamic的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s3_dynamic_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_dynamic_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                    merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Dynamic 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_dynamic_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(22, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s3_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s3_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_dynamic_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(22, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            else if (excel_mode_flag == 4 && s3_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s3_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_dynamic_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Dynamic 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_dynamic_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(22, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 3;
                            }
                            break;
                        //Geofencing
                        case 4:
                            if (excel_mode_flag != 2 && excel_mode_flag != 3)
                            {
                                if (excel_mode_flag == 0)            //如果Geofencing的first cycle time
                                {
                                    merge_excel_mode_frame += s3_free_run_time + 1;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_geofencing_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                    merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(22, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                    }

                                    excel_mode_flag = 4;
                                }
                                else if (excel_mode_flag == 4 && s3_cycle_add[merge_excel_cycle_count] != 0)            //如果Geofencing的cycle time還沒結束繼續累加
                                {
                                    merge_excel_mode_frame += s3_geofencing_time;
                                    merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_geofencing_time, 1);
                                    merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                    merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                    //Cycle Geofencing 格式調整
                                    for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_geofencing_time; free_run_border++)
                                    {
                                        Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                        Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                        title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                        title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                        title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                        title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                        merge_ws.Cells.SetColumnWidth(22, 10);
                                        title_merge_cycle_time_font.IsBold = true;
                                        merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                    }
                                }
                            }
                            else if (excel_mode_flag == 2 && s3_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s3_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_geofencing_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(22, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }
                            else if (excel_mode_flag == 3 && s3_cycle_add[merge_excel_cycle_count] != 0)
                            {
                                merge_excel_mode_frame += s3_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_geofencing_time, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle Geofencing 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border < merge_excel_mode_frame + s3_geofencing_time; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(22, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                }

                                excel_mode_flag = 4;
                            }

                            break;
                        //餘數
                        case 5:
                            if (excel_mode_flag == 2)               //T3~T4 下的餘數
                            {
                                merge_excel_mode_frame += s3_t3_t4_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s3_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(22, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 3)           //Dynamic下的餘數
                            {
                                merge_excel_mode_frame += s3_dynamic_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s3_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(22, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                }
                            }
                            else if (excel_mode_flag == 4)          //Geofencing下的餘數
                            {

                                merge_excel_mode_frame += s3_geofencing_time;
                                merge_cycle_time_frame.Merge(merge_excel_mode_frame, 22, s3_cycle_remainder + 1, 1);
                                merge_cycle_time = merge_ws.Cells[merge_excel_mode_frame, 22];
                                merge_cycle_time.PutValue(s3_cycle_add[merge_excel_cycle_count].ToString());

                                //Cycle 餘數 格式調整
                                for (int free_run_border = merge_excel_mode_frame; free_run_border <= merge_excel_mode_frame + s3_cycle_remainder; free_run_border++)
                                {
                                    Excel.Style title_merge_cycle_time_style = merge_ws.Cells[free_run_border, 22].GetStyle();
                                    Excel.Font title_merge_cycle_time_font = title_merge_cycle_time_style.Font;
                                    title_merge_cycle_time_style.ForegroundColor = Color.FromArgb(255, 230, 153);
                                    title_merge_cycle_time_style.Pattern = Excel.BackgroundType.Solid;
                                    title_merge_cycle_time_style.HorizontalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.VerticalAlignment = Excel.TextAlignmentType.Center;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.LeftBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.RightBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.TopBorder].Color = Color.Black;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].LineStyle = Excel.CellBorderType.Thin;
                                    title_merge_cycle_time_style.Borders[Excel.BorderType.BottomBorder].Color = Color.Black;
                                    merge_ws.Cells.SetColumnWidth(22, 10);
                                    title_merge_cycle_time_font.IsBold = true;
                                    merge_ws.Cells[free_run_border, 22].SetStyle(title_merge_cycle_time_style);
                                }

                            }
                            break;
                    }
                }
                /*
                 * s3 merge cycle sheet
                 */

                /*
                 * Merge Excel
                 */

                wb.Save(s3_directory_fileexcel, Excel.SaveFormat.Xlsx);
                /**
                 * GNSS、MDA、Setting sheet
                 */

            }

            merge_wb.Save(directory_filemerge, Excel.SaveFormat.Xlsx);

        }

        private void button3_Click(object sender, EventArgs e)
        {
            data_send_excel();
        }

    }
}